x[i] = sum(vec == levels(vec)[i]) / length(vec)
ns[i] = paste0(levels(vec)[i], " (", round(x[i] * 100, 2), "%)")
}
return(list(x = x, ns = ns))
}
getPIE = function(vec, main = "") {
lst = getparam(vec)
pie(x = lst$x,
labels = lst$ns,
main = main)
}
getFan = function(vec, main = "") {
pr = getparam(vec)
fan.plot(pr$x, labels = pr$ns, main = main)
}
data.backup = data
data %<>% filter(Count <= 20)
data %>% summary()
Error = function(target, weight)
(target - weight) ^ 2 %>% mean() %>% sqrt()
Show = function(vals, df = data) {
#vals=predict(model,df)
err = df$RM - vals
cbind(
Fact = round(vals),
Target = df$RM,
Set = paste0(df$MRM, "*", df$Count),
ERROR = abs(df$RM - vals),
ErrorPercent = abs(err) / df$RM * 100,
df[, c(3:15)]
) %>% tbl_df() %>% select(-Count, -Mail, -Experience, IndexGroup) %>% arrange(-ERROR, -ErrorPercent, Weight) %>%
filter(ERROR > 1) %>% View()
cat("\n")
rg = range(err)#;print(err);print(rg)
if (rg[1] < 0)
cat("------------> Наибольшая ошибка в большую сторону:",
-rg[1],
"\n")
if (rg[2] > 0)
cat("------------> Наибольшая ошибка в меньшую сторону:", rg[2], "\n")
s = sum(abs(err) / df$RM * 100 > maxerror)
len = length(err)
cat(
"Модель ошиблась более чем на",
maxerror,
"% в",
s,
"случаях из",
len,
"(",
s / len * 100,
"%)\n"
)
s = sum(abs(err) > maxerror)
cat(
"Модель ошиблась более чем на",
maxerror,
"кг в",
s,
"случаях из",
len,
"(",
s / len * 100,
"%)\n"
)
cat("----------------> Статистика по ошибкам в процентах:\n")
(abs(df$RM - vals) / df$RM * 100) %>% summary() %>% print()
cat("-------------------> Среднеквадратичная ошибка:",
Error(vals, df$RM),
"\n")
}
ShowErrors = function(model,
power.coef = 1,
sum.coef = 0) {
Show(predict(model, data) * power.coef + sum.coef)
cat(
"Оценка кросс-валидации для всего набора данных",
boot::cv.glm(data, glm(
formula = model$call$formula, data = data
), K = 10)$delta[1],
"\n"
)
cat(
"Оценка кросс-валидации для не более чем 10 повторений",
boot::cv.glm(
data %>% filter(Count < 11),
glm(
formula = model$call$formula,
data = data %>% filter(Count < 11)
),
K = 10
)$delta[1],
"\n"
)
cat(
"Оценка кросс-валидации для не более чем 6 повторений",
boot::cv.glm(
data %>% filter(Count < 7),
glm(
formula = model$call$formula,
data = data %>% filter(Count < 7)
),
K = 10
)$delta[1],
"\n"
)
}
ResAn = function(res) {
p = ggplot(data %>% mutate(res = res), aes(x = CountGroup, y = res)) +
geom_boxplot() + labs(x = "Группа повторений", y = "Остатки (цель - предсказание)", title =
"Распределения остатков в зависимости от группы повторений") + theme_bw()
print(p)
(p + facet_grid(vars(Action))) %>% print()
(p + facet_grid(vars(BodyType), vars(Action))) %>% print()
return(0)
}
#из этого графика можно сделать вывод, что модель неплохо работает на диапазоне 2-3, но на диапазоне 13-20 ошибка какая-то сильно отличающаяся от тенденции уменьшения ошибок, так что этот диапазон надо бы и вообще убрать, так как там уже играют роль свойства красных волокон, не говорящие о силе
ResAn(data$RM - data$MRM * (1 + 0.0333 * data$Count))
ResVal = function(vals)
ResAn(data$RM - vals)
#ResGraf=function(model)ResVal(predict(model,data))
mysummary = function(mdl) {
cat("-----> ОБЩАЯ ИНФОРМАЦИЯ О МОДЕЛИ:\n")
cat("\n")
gvlma::gvlma(mdl) %>% summary()
cat("\n")
cat("-----> БАЗОВЫЕ ГРАФИКИ:\n")
cat("\n")
par(mfrow = c(2, 2))
plot(mdl)
par(mfrow = c(1, 1))
cat("\n")
cat("-----> ТЕСТ НА НОРМАЛЬНОСТЬ РАСПРЕДЕЛЕНИЯ ОСТАТКОВ\n")
cat("\n")
shapiro.test(mdl$residuals) %>% print()
cat("\n")
qqPlot(mdl, main = "Q-Q plot")
cat("-----> ФАКТОР ИНФЛЯЦИИ ДИСПЕРСИЙ:\n")
cat("\n")
vif(mdl) %>% print()
cat("\n")
cat("-----> ТЕСТ НА АВТОКОРРЕЛЯЦИЮ:\n")
cat("\n")
durbinWatsonTest(mdl) %>% print()
cat("\n")   #тест на автокорреляцию
# cat("-----> ТЕСТ НА ОДНОРОДНОСТЬ ДИСПЕРСИИ:\n");cat("\n")
# ncvTest(mdl)%>% print();cat("\n")    #однородность дисперсии
cat("-----> ТЕСТ НА ВЫБРОСЫ И ВЛИЯТЕЛЬНЫЕ НАБЛЮДЕНИЯ:\n")
cat("\n")
outs = outlierTest(mdl)
outs %>% print()
influ = influencePlot(mdl, main = "Диаграмма влияния", sub = "Размеры кругов пропорциональны расстояниям Кука")
influ %>% print()
cat("-----> ВЫБРОСЫ И ВЛИЯТЕЛЬНЫЕ НАБЛЮДЕНИЯ:\n")
cat("\n")
data[c(outs$p %>% names(), influ %>% rownames()) %>% as.numeric(), ] %>% unique() %>%
select(-Mail) %>% arrange(-RM, -Count) %>% print()
cat("\n")
}
all = function(modelka) {
modelka %>% ShowErrors()
modelka %>% predict(data) %>% ResVal()
modelka %>% mysummary()
}
data %<>% mutate(
Body2 = ifelse(BodyType == "Эндоморф", "Endo", "NonEndo") %>% factor(),
Action2 = ifelse(Action == "Жим", "Up", "Down") %>% factor()
)
data %<>% filter(Count < 11)
b5 = lm(RM ~ I((MRM / Index) ^ 6) + MRM:CountGroup + MRM:Action + MRM:CountGroup:Count - 1,
data)
b5 %>% all()
md = nls(
RM ~ (MRM^d)*(coef1)/(coef2-Count+c*Count^2),
data = data,
start = list(
coef1 = 50,
coef2=40,d=1,
c=0
)
)
ShowSummary(md)
ShowSummary=function(model){
model %>% summary() %>% print()
Show(model %>% predict(data))
}
ShowSummary(md)
md = nls(
RM ~ (MRM^d)*(coef1)/(coef2-Count+c*Count^2),
data = data,
start = list(
coef1 = 50,
coef2=40,d=1,
c=0
)
)
ShowSummary(md)
md = nls(
RM ~ (MRM^d)*(coef1)/(coef2-Count+c*Count^2),
data = data,
start = list(
coef1 = 50,
coef2=40,d=1,
c=0
)
)
ShowSummary(md)
md = nls(
RM ~ MRM ^ vk * (s + coef * Count^ kk) ,
data = data,
start = list(coef = 0.0333, vk = 1., kk = 1.,s=1)
)
ShowSummary(md)
n2=nls(RM~MRM*a/(b-Count),data,start = list(a=36,b=37))
ShowSummary(n2)
md = nls(RM ~ MRM * (s + coef * Count) ^ t + k * Weight / MRM,
data = data,
start = start)
start = list(s = 1,
coef = 0.0333,
t = 1,
k = 0)
md = nls(RM ~ MRM * (s + coef * Count) ^ t + k * Weight / MRM,
data = data,
start = start)
ShowSummary(md)
n2=nls(RM~MRM*(
a1/(b1-Count)*as.numeric(Action=='Жим')+
a2/(b2-Count)*as.numeric(Action=='Присед')+
a3/(b3-Count)*as.numeric(Action=='Тяга')
),data,start = list(a1=36,b1=37,a2=36,b2=37,a3=36,b3=37))
ShowSummary(n2)
n2=nls(RM~MRM*a/(b-Count),data,start = list(a=36,b=37))
ShowSummary(n2)
n2=nls(RM~MRM*(
a[Action]/(b[Action]-Count)),data,start = list(a=rep(36,3),b=rep(37,3)))
ShowSummary(n2)
n2=nls(RM~MRM*(
a[Action]/(b[CountGroup]-Count)),data,start = list(a=rep(36,3),b=rep(37,4)))
n2=nls(RM~MRM*(
a[CountGroup]/(b[CountGroup]-Count)),data,
start = list(a=rep(36,3),b=rep(37,4)))
n2=nls(RM~MRM*(
a[CountGroup]/(b[CountGroup]-Count)),data,
start = list(a=rep(36,4),b=rep(37,4)))
ShowSummary(n2)
n2=nls(RM~MRM*(
a[CountGroup]/(b[CountGroup]-Count)),data,
start = list(a=rep(36,6),b=rep(37,6)))
n2=nls(RM~MRM*(
a[BodyType]/(b[Action]-Count)),data,
start = list(a=rep(36,3),b=rep(37,3)))
ShowSummary(n2)
n2=nls(RM~MRM*(
a[BodyType]/(b[Action][BodyType]-Count)),data,
start = list(a=rep(36,3),b=rep(37,9)))
n2=nls(RM~MRM*(
a[BodyType]/(b[CountGroup]-Count)),data,
start = list(a=rep(36,3),b=rep(37,4)))
n2=nls(RM~MRM*(
a[BodyType]/(b[Action]-Count)),data,
start = list(a=rep(36,3),b=rep(37,6)))
n2=nls(RM~MRM*(
a[BodyType]/(b[Action]-Count)),data,
start = list(a=rep(36,3),b=rep(37,3)))
ShowSummary(n2)
n2=nls(RM~MRM*(
a[BodyType]/(b[CountGroup]-Count)),data,
start = list(a=rep(36,3),b=rep(37,3)))
ShowSummary(n2)
n2=nls(RM~MRM*(
a[BodyType]/(b[CountGroup][Action]-Count)),data,
start = list(a=rep(36,3),b=rep(37,3)))
n2=nls(RM~MRM*(
a[BodyType]/(b[CountGroup][Action]-Count)),data,
start = list(a=rep(36,3),b=rep(37,9)))
n2=nls(RM~MRM*(
a[BodyType]/(b[CountGroup]+c[Action]-Count)),data,
start = list(a=rep(36,3),b=rep(37,3),c=rep(0,3)))
n2=nls(RM~MRM*(
a[Action]/(b[CountGroup]+c[Action]-Count)),data,
start = list(a=rep(36,3),b=rep(37,3),c=rep(0,3)))
n2=nls(RM~MRM*(
a[BodyType]/(b[CountGroup]+c[BodyType]-Count)),data,
start = list(a=rep(36,3),b=rep(37,3),c=rep(0,3)))
n2=nls(RM~MRM*(
a[BodyType]/(b[CountGroup]+c[Action]-Count)),data,
start = list(a=rep(36,3),b=rep(37,3),c=rep(1,3)))
n2=nls(RM~MRM*(
a[BodyType]/(b[CountGroup]+c[Action]-Count)),data,
start = list(a=rep(36,3),b=rep(37,3),c=rep(11,3)))
n2=nls(RM~MRM*(
a[BodyType]/(b[CountGroup]+c[Action]-Count)),data,
start = list(a=rep(36,3),b=rep(37,3),c=rep(-1,3)))
n2=nls(RM~MRM*(
a[BodyType]/(b[CountGroup]+c[Action]-Count)),data,
start = list(a=rep(36,3),b=rep(37,3),c=rep(-11,3)))
n2=nls(RM~MRM*(
a[BodyType]/(b[CountGroup]+c[Action]-Count)),data,
start = list(a=rep(36,3),b=rep(37,3),c=rep(10,3)))
n2=nls(RM~MRM*(
a[CountGroup]/(b[CountGroup]+c[Action]-Count)),data,
start = list(a=rep(36,3),b=rep(37,3),c=rep(0,3)))
n2=nls(RM~MRM*(
a[BodyType]/(b[CountGroup]-Count)),data,
start = list(a=rep(36,3),b=rep(37,3)))
ShowSummary(n2)
n2=nls(RM~MRM*(
a[Action]/(b[CountGroup]-Count)),data,
start = list(a=rep(36,3),b=rep(37,3)))
ShowSummary(n2)
n2=nls(RM~MRM*(
a[BodyType]/(b[CountGroup]-Count)),data,
start = list(a=rep(36,3),b=rep(37,3)))
ShowSummary(n2)
n2=nls(RM~MRM*(
a[BodyType]/(b[CountGroup]*c[Action]-Count)),data,
start = list(a=rep(36,3),b=rep(37,3),c=rep(37,3)))
n2=nls(RM~MRM*(
a[BodyType]/(b[CountGroup]*c[Action]-Count)),data,
start = list(a=rep(36,3),b=rep(37,3),c=rep(1,3)))
n2=nls(RM~MRM*(
a[BodyType]/(b[CountGroup]*c[Action]-Count)),data,
start = list(a=rep(36,3),b=rep(37,3),c=rep(1.1,3)))
n2=nls(RM~MRM*(
a[BodyType]/(b[CountGroup]*c[Action]-Count)),data,
start = list(a=rep(36,3),b=rep(37,3),c=c(1,2,3)))
n2=nls(RM~MRM*(
a[BodyType]/(b[CountGroup]+c[Action]*Index-Count)),data,
start = list(a=rep(36,3),b=rep(37,3),c=c(1,2,3)))
ShowSummary(n2)
n2=nls(RM~MRM*(
a[BodyType]/(b[CountGroup]+c[Action]-Count)),data,
start = list(a=rep(36,3),b=rep(37,3),c=c(1,2,3)))
n2=nls(RM~MRM*(
a[BodyType]/(b[CountGroup]+c[Action]-Count)),data,
start = list(a=rep(36,3),b=rep(37,3),c=c(-1,2,-3)))
n2=nls(RM~MRM*(
a[BodyType]/(c[Action]-b[CountGroup]*Count)),data,
start = list(a=rep(36,3),b=rep(37,3),c=c(-1,2,-3)))
n2=nls(RM~MRM*(
a[BodyType]/(c[Action]-b[CountGroup]*Count)),data,
start = list(a=rep(36,3),b=rep(37,3),c=rep(37,3)))
n2=nls(RM~MRM*(
a[BodyType]/(c[Action]-b[CountGroup]*Count)),data,
start = list(a=rep(36,3),b=rep(1,3),c=rep(37,3)))
n2=nls(RM~MRM*(
a[BodyType]/(c[Action]-b[CountGroup]*Count)),data,
start = list(a=rep(36,3),b=rep(0,3),c=rep(37,3)))
n22=nls(RM~MRM*(
a[Action]/(b[CountGroup]-Count)),data,
start = list(a=rep(36,3),b=rep(37,3)))
ShowSummary(n2)
md = nls(
RM ~ MRM ^ vk * (s + coef * Count^ kk) ,
data = data,
start = list(coef = 0.0333, vk = 1., kk = 1.,s=1)
)
ShowSummary(md)
n4=nls(RM~MRM*Count^a[CountGroup],data,start = list(a=rep(0.1,3)))
ShowSummary(n4)
n4=nls(RM~MRM*(Count^a[CountGroup]+b[Action]),data,start = list(a=rep(0.1,3),b=rep(0.1,3)))
ShowSummary(n4)
n4=nls(RM~MRM*(Count^a[CountGroup]+b[Action]/Index),data,start = list(a=rep(0.1,3),b=rep(0.1,3)))
ShowSummary(n4)
n4=nls(RM~MRM*(Count^a[CountGroup])+b[Action]*MRM/Index,data,start = list(a=rep(0.1,3),b=rep(0.1,3)))
ShowSummary(n4)
n4=nls(RM~MRM*(Count^a[CountGroup])+b[Action]*MRM,data,start = list(a=rep(0.1,3),b=rep(0.1,3)))
ShowSummary(n4)
n4=nls(RM~MRM*(Count^a[CountGroup])+b[Action]*MRM*Count^2,data,start = list(a=rep(0.1,3),b=rep(0.1,3)))
ShowSummary(n4)
n4=nls(RM~MRM*(Count^a[CountGroup])+b[Action]*MRM*Count^3,data,start = list(a=rep(0.1,3),b=rep(0.1,3)))
ShowSummary(n4)
n4=nls(RM~MRM*(Count^a[CountGroup])+b[Action]*MRM*Count^2,data,start = list(a=rep(0.1,3),b=rep(0.1,3)))
ShowSummary(n4)
n3=nls(RM~100*MRM/(a[Action]+b*exp(-c[CountGroup]*Count)),data,start = list(a=rep(52,3),b=42,c=rep(0.0555,3)))
ShowSummary(n3)
n3=nls(RM~100*MRM/(a[Action]+b*exp(-c[CountGroup]*Count))+d*(MRM/Index)^6,data,start = list(a=rep(52,3),b=42,c=rep(0.0555,3),d=0))
ShowSummary(n3)
n44=nls(RM~MRM*(Count^a[CountGroup])+b[Action]*MRM*Count^2+d*(MRM/Index)^6,data,start = list(a=rep(0.1,3),b=rep(0.1,3),d=0))
ShowSummary(n44)
n22=nls(RM~MRM*(
a[Action]/(b[CountGroup]-Count))+d*(MRM/Index)^6,data,
start = list(a=rep(36,3),b=rep(37,3),d=0))
ShowSummary(n2)
n22=nls(RM~MRM*(
a[Action]/(b[CountGroup]-Count))+d*(MRM/Index)^6,data,
start = list(a=rep(36,3),b=rep(37,3),d=0))
ShowSummary(n22)
n22=nls(RM~MRM*(
a[Action]/(b[CountGroup]-Count)),data,
start = list(a=rep(36,3),b=rep(37,3)))
ShowSummary(n22)
n22=nls(RM~MRM*(
a[Action]/(b[CountGroup]-Count))+d*(MRM/Index)^6,data,
start = list(a=rep(36,3),b=rep(37,3),d=0))
ShowSummary(n22)
n22=nls(RM~MRM*(
a[BodyType]/(b[Action]-Count))+d*(MRM/Index)^6,data,
start = list(a=rep(36,3),b=rep(37,3),d=0))
ShowSummary(n2)
library(caret)
tr = trainControl(
method = "repeatedcv",
number = 10,
#p = 0.75,
repeats = 10,
verboseIter = T,
returnResamp = "all",
savePredictions = T,
summaryFunction = defaultSummary
)
d2=data %>% select(MRM,Count,Weight,Height,Index,Action,CountGroup,IndexGroup,BodyType,Experience) %>%
mutate_all(as.numeric) %>%
mutate(pow=MRM*Count,add=(MRM/Index)^6)
# 5.16
ft = train(
y=data$RM,
x = d2,
method = "penalized",
metric =  "RMSE",
maximize = FALSE,
trControl = tr
)
ft %>% predict(d2) %>% Show()
tr = trainControl(
method = "repeatedcv",
number = 10,
#p = 0.75,
repeats = 1,
verboseIter = T,
returnResamp = "all",
savePredictions = T,
summaryFunction = defaultSummary
)
ft %>% summary()
#5.24
ft = train(
y=data$RM,
x = d2,
method = "rqlasso",
metric =  "RMSE",
maximize = FALSE,
trControl = tr
)
ft %>% predict(d2) %>% Show()
n5 = nls(
RM ~ (MRM^d)*(coef1)/(coef2-Count+c*Count^2),
data = data,
start = list(
coef1 = 50,
coef2=40,d=1,
c=0
)
)
ShowSummary(n5)
n6 = nls(
RM ~ MRM ^ vk * (s + coef * Count^ kk) ,
data = data,
start = list(coef = 0.0333, vk = 1., kk = 1.,s=1)
)
ShowSummary(n6)
n5 = nls(
RM ~ (MRM^d)*(coef1[Action])/(coef2-Count+c*Count^2),
data = data,
start = list(
coef1 = rep(50,3),
coef2=40,d=1,
c=0
)
)
ShowSummary(n5)
n5 = nls(
RM ~ (MRM^d)*(coef1[Action])/(coef2[CountGroup]-Count+c*Count^2),
data = data,
start = list(
coef1 = rep(50,3),
coef2=rep(40,3),
d=1,
c=0
)
)
ShowSummary(n5)
n7 = nls(
RM ~ MRM ^ vk * (s[Action] + coef[CountGroup] * Count^ kk) ,
data = data,
start = list(coef = rep(0.0333,3), vk = 1., kk = 1.,s=rep(1,3))
)
ShowSummary(n7)
n8 = nls(
RM ~ MRM ^ vk * (s[Action] + coef * Count^kk[CountGroup]) ,
data = data,
start = list(coef = 0.0333, vk = rep(1,3), kk = 1.,s=rep(1,3))
)
n8 = nls(
RM ~ MRM ^ vk * (s[Action] + coef * Count^kk[CountGroup]) ,
data = data,
start = list(coef = 0.0333, vk = 1, kk = rep(1,3),s=rep(1,3))
)
ShowSummary(n8)
n8 = nls(
RM ~ MRM ^ vk[CountGroup] * (s[Action] + coef * Count^kk) ,
data = data,
start = list(coef = 0.0333, vk = rep(1,3), kk = 1,s=rep(1,3))
)
ShowSummary(n8)
n8 = nls(
RM ~ MRM ^ vk[CountGroup] * (s[Action] + coef * sqrt(Count)) ,
data = data,
start = list(coef = 0.0333, vk = rep(1,3),s=rep(1,3))
)
ShowSummary(n8)
