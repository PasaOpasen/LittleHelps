dt = data %>% filter(Count < ct[j])
getval.mean = function(k, count) {
cv.my2(dt, model, sts[[i]], k,count)
}
beg = (j - 1) * length(kn)
for (s in 1:length(kn)) {
m[beg + s, i] = getval.mean(kn[s], 30)
}
#print(m)
}
}
m
colnames(m) = paste0('n', 1::length(lst))
kp = rep(kn, length(ct))
vals = data.frame(
kp = rep(kp, 1:length(lst)),
b = as.numeric(m),
gr = factor(rep(gr, 1:length(lst))),
n = factor(rep(colnames(m), length(kn) * length(ct)) %>% sort())
) %>%
tbl_df()
colnames(m) = paste0('n', 1::length(lst))
colnames(m) = paste0('n', 1:length(lst))
kp = rep(kn, length(ct))
vals = data.frame(
kp = rep(kp, 1:length(lst)),
b = as.numeric(m),
gr = factor(rep(gr, 1:length(lst))),
n = factor(rep(colnames(m), length(kn) * length(ct)) %>% sort())
) %>%
tbl_df()
kp = rep(kn, length(ct))
vals = data.frame(
kp = rep(kp, 1:length(lst)),
b = as.numeric(m),
gr = factor(rep(gr, 1:length(lst))),
n = factor(rep(colnames(m), length(kn) * length(ct)) %>% sort())
) %>%
tbl_df()
vals = data.frame(
kp = rep(kp, length(lst)),
b = as.numeric(m),
gr = factor(rep(gr, 1:length(lst))),
n = factor(rep(colnames(m), length(kn) * length(ct)) %>% sort())
) %>%
tbl_df()
vals = data.frame(
kp = rep(kp, length(lst)),
b = as.numeric(m),
gr = factor(rep(gr, length(lst))),
n = factor(rep(colnames(m), length(kn) * length(ct)) %>% sort())
) %>%
tbl_df()
ggplot(vals, aes(x = kp, y = b, col = n)) + theme_bw() + facet_grid(vars(gr)) +
geom_point(size = 4) + geom_line(size = 1.) +
labs(
x = "Количество блоков при перекрёстной проверке",
y = "Усреднённые значения ошибок после 30 повторных проверок",
col = "Модель",
title = "Оценки качества моделей при перекрёстной проверке",
subtitle = "Оценка производилась на разных подмножествах данных",
caption = "Очевидно, что пятая модель превосходит остальные по точности"
) +
scale_x_continuous(breaks = kn) +
theme(legend.position = "bottom")
ggplot(vals, aes(x = kp, y = b, col = n)) + theme_bw() + facet_wpap(~gr) +
geom_point(size = 4) + geom_line(size = 1.) +
labs(
x = "Количество блоков при перекрёстной проверке",
y = "Усреднённые значения ошибок после 30 повторных проверок",
col = "Модель",
title = "Оценки качества моделей при перекрёстной проверке",
subtitle = "Оценка производилась на разных подмножествах данных",
caption = "Очевидно, что пятая модель превосходит остальные по точности"
) +
scale_x_continuous(breaks = kn) +
theme(legend.position = "bottom")
ggplot(vals, aes(x = kp, y = b, col = n)) + theme_bw() + facet_wrap(~gr) +
geom_point(size = 4) + geom_line(size = 1.) +
labs(
x = "Количество блоков при перекрёстной проверке",
y = "Усреднённые значения ошибок после 30 повторных проверок",
col = "Модель",
title = "Оценки качества моделей при перекрёстной проверке",
subtitle = "Оценка производилась на разных подмножествах данных",
caption = "Очевидно, что пятая модель превосходит остальные по точности"
) +
scale_x_continuous(breaks = kn) +
theme(legend.position = "bottom")
m
n14=nls(RM~100*MRM/(a[Action]+b*exp(-c[CountGroup]*Count))+d*(MRM/Index)^6,data=data %>% filter(Count<8),start = list(a=rep(52,3),b=42,c=rep(0.0555,3),d=0))
ShowSummary(n14)
system.time(cv.my2(data, n14, list(a=rep(52,3),b=42,c=rep(0.0555,3),d=0), 10, 30))
cv.my2(data, n14, list(a=rep(52,3),b=42,c=rep(0.0555,3),d=0), 10, 30)
cv.my2(data %>% filter(Count<8), n14, list(a=rep(52,3),b=42,c=rep(0.0555,3),d=0), 10, 30)
cv.my2(data %>% filter(Count<8), n14, list(a=rep(52,3),b=42,c=rep(0.0555,3),d=0), 10, 30)
cv.my2(data %>% filter(Count<8), n14, list(a=rep(52,3),b=42,c=rep(0.0555,2),d=0), 10, 30)
cv.my2(data %>% filter(Count<8), n14, list(a=rep(52,3),b=42,c=rep(0.0555,3),d=0), 10, 30)
n14=nls(RM~100*MRM/(a[Action]+b*exp(-c[CountGroup]*Count))+d*(MRM/Index)^6,data,start = list(a=rep(52,3),b=42,c=rep(0.0555,3),d=0))
ShowSummary(n14)
cv.my2(data %>% filter(Count<8), n14, list(a=rep(52,3),b=42,c=rep(0.1,3),d=0), 10, 30)
ggplot(vals, aes(x = kp, y = b, col = n)) + theme_bw() + facet_wrap(~gr) +
geom_point(size = 4) + geom_line(size = 1.) +
labs(
x = "Количество блоков при перекрёстной проверке",
y = "Усреднённые значения ошибок после 30 повторных проверок",
col = "Модель",
title = "Оценки качества моделей при перекрёстной проверке",
subtitle = "Оценка производилась на разных подмножествах данных",
caption = "Очевидно, что пятая модель превосходит остальные по точности"
) +
scale_x_continuous(breaks = kn) +
theme(legend.position = "bottom")
m
val
vals
View(vals)
vals = data.frame(
kp = rep(kp, length(lst)),
b = as.numeric(m),
gr = factor(rep(gr, length(lst))),
n = factor(paste0('n',rep(1:14, length(kn) * length(ct)) %>% sort()))
) %>%
tbl_df()
ggplot(vals, aes(x = kp, y = b, col = n)) + theme_bw() + facet_wrap(~gr) +
geom_point(size = 4) + geom_line(size = 1.) +
labs(
x = "Количество блоков при перекрёстной проверке",
y = "Усреднённые значения ошибок после 30 повторных проверок",
col = "Модель",
title = "Оценки качества моделей при перекрёстной проверке",
subtitle = "Оценка производилась на разных подмножествах данных",
caption = "Очевидно, что пятая модель превосходит остальные по точности"
) +
scale_x_continuous(breaks = kn) +
theme(legend.position = "bottom")
cv.my2(data %>% filter(Count<8), n14, list(a=rep(52,3),b=42,c=rep(0.1,3),d=0), 20, 30)
cv.my2(data %>% filter(Count<8), n14, list(a=rep(52,3),b=42,c=rep(0.1,3),d=0), 40, 30)
#cv for nls including errors sample
cv.my2 = function(df = data,
fit,
start,
k = 10,
repets = 1) {
sm = 0
r = 0
RM = df$RM
repeat {
b = T
while (b) {
val = tryCatch({
b = F
blocks = sample.int(k, nrow(df), replace = T)
future.apply::future_sapply(seq(k), function(i) {
ft = nls(
formula = fit$call$formula,
data = df[blocks != i,],
start = start
)
sum((RM[blocks == i] - predict(ft, df[blocks == i,])) ^ 2) %>% return()
}) %>% sum()
},
error = function(cond) {
print(cond)
b = T
})
}
sm = sm + val / k
r = r + 1
if (r == repets) {
break
}
}
return(sm / repets)
}
cv.my2(data %>% filter(Count<8), n14, list(a=rep(52,3),b=42,c=rep(0.1,3),d=0), 10, 30)
cv.my2(data %>% filter(Count<8), n14, list(a=rep(52,3),b=42,c=rep(1,3),d=0), 10, 30)
cv.my2(data %>% filter(Count<8), n14, list(a=rep(52,3),b=42,c=rep(10,3),d=0), 10, 30)
cv.my2(data %>% filter(Count<8), n14, list(a=rep(52,3),b=42,c=rep(0,3),d=0), 10, 30)
cv.my2(data %>% filter(Count<8), n14, list(a=rep(52,3),b=42,c=rep(0.055,3),d=0), 10, 30)
cv.my2(data %>% filter(Count<8), n14, list(a=rep(52,3),b=42,c=rep(0.0055,3),d=0), 10, 30)
cv.my2(data %>% filter(Count<8), n14, list(a=rep(32,3),b=42,c=rep(0.0055,3),d=0), 10, 30)
cv.my2(data %>% filter(Count<8), n14, list(a=rep(32,3),b=42,c=rep(0.055,3),d=0), 10, 30)
cv.my2(data %>% filter(Count<8), n14, list(a=rep(2,3),b=2,c=rep(0.055,3),d=0), 10, 30)
cv.my2(data %>% filter(Count<8), n14, list(a=rep(2,3),b=2,c=rep(0.5,3),d=0), 10, 30)
cv.my2(data %>% filter(Count<8), n14, list(a=rep(2,3),b=2,c=rep(5,3),d=0), 10, 30)
cv.my2(data %>% filter(Count<8), n14, list(a=rep(2,3),b=2,c=rep(-5,3),d=0), 10, 30)
cv.my2(data %>% filter(Count<8), n14, list(a=rep(2,3),b=2,c=rep(-0.5,3),d=0), 10, 30)
#cv for nls including errors sample
cv.my2 = function(df = data,
fit,
start,
k = 10,
repets = 1) {
sm = 0
r = 0
RM = df$RM
repeat {
b = T
while (b) {
val = tryCatch({
b = F
blocks = sample.int(k, nrow(df), replace = T)
future.apply::future_sapply(seq(k), function(i) {
ft = nls(
formula = fit$call$formula,
data = df[blocks != i,],
start = start
)
sum((RM[blocks == i] - predict(ft, df[blocks == i,])) ^ 2) %>% return()
}) %>% sum()
},
error = function(cond) {
# print(cond)
b = T
})
}
sm = sm + val / k
r = r + 1
if (r == repets) {
break
}
}
return(sm / repets)
}
m[m<100]=NA
vals = data.frame(
kp = rep(kp, length(lst)),
b = as.numeric(m),
gr = factor(rep(gr, length(lst))),
n = factor(paste0('n',rep(1:14, length(kn) * length(ct)) %>% sort()))
) %>%
tbl_df()
ggplot(vals, aes(x = kp, y = b, col = n)) + theme_bw() + facet_wrap(~gr) +
geom_point(size = 4) + geom_line(size = 1.) +
labs(
x = "Количество блоков при перекрёстной проверке",
y = "Усреднённые значения ошибок после 30 повторных проверок",
col = "Модель",
title = "Оценки качества моделей при перекрёстной проверке",
subtitle = "Оценка производилась на разных подмножествах данных",
caption = "Очевидно, что пятая модель превосходит остальные по точности"
) +
scale_x_continuous(breaks = kn) +
theme(legend.position = "bottom")
ggplot(vals %>% filter(gr=="2-10"), aes(x = kp, y = b, col = n)) + theme_bw() +
geom_point(size = 4) + geom_line(size = 1.) +
labs(
x = "Количество блоков при перекрёстной проверке",
y = "Усреднённые значения ошибок после 30 повторных проверок",
col = "Модель",
title = "Оценки качества моделей при перекрёстной проверке",
subtitle = "Оценка производилась на разных подмножествах данных",
caption = "Очевидно, что пятая модель превосходит остальные по точности"
) +
scale_x_continuous(breaks = kn) +
theme(legend.position = "bottom")
ggplot(vals %>% filter(gr=="2-10"), aes(x = kp, y = b, col = n)) + theme_bw() +
geom_point(size = 4) + geom_line(size = 1.) +
labs(
x = "Количество блоков при перекрёстной проверке",
y = "Усреднённые значения ошибок после 30 повторных проверок",
col = "Модель",
title = "Оценки качества моделей при перекрёстной проверке",
subtitle = "Оценка производилась на разных подмножествах данных",
caption = "Очевидно, что пятая модель превосходит остальные по точности"
) +
scale_x_continuous(breaks = kn) +
theme(legend.position = "right")
(ggplot(vals %>% filter(gr=="2-10"), aes(x = kp, y = b, col = n)) + theme_bw() +
geom_point(size = 4) + geom_line(size = 1.) +
labs(
x = "Количество блоков при перекрёстной проверке",
y = "Усреднённые значения ошибок после 30 повторных проверок",
col = "Модель",
title = "Оценки качества моделей при перекрёстной проверке",
subtitle = "Оценка производилась на разных подмножествах данных",
caption = "Очевидно, что пятая модель превосходит остальные по точности"
) +
scale_x_continuous(breaks = kn) +
theme(legend.position = "right")) %>% plotly()
(ggplot(vals %>% filter(gr=="2-10"), aes(x = kp, y = b, col = n)) + theme_bw() +
geom_point(size = 4) + geom_line(size = 1.) +
labs(
x = "Количество блоков при перекрёстной проверке",
y = "Усреднённые значения ошибок после 30 повторных проверок",
col = "Модель",
title = "Оценки качества моделей при перекрёстной проверке",
subtitle = "Оценка производилась на разных подмножествах данных",
caption = "Очевидно, что пятая модель превосходит остальные по точности"
) +
scale_x_continuous(breaks = kn) +
theme(legend.position = "right")) %>% ggplotly()
kn = c(5, 6, 7, 8, 9, 10, 11, 12,13,14,15,16,17,18,19,20)
ct = c(8, 11)
gr = rep(c('2-10', '2-7'), length(kn)) %>% sort(decreasing = T)
m = matrix(nrow = length(kn) * length(ct), ncol = 4)
lst = list(n8,n14,b3,b5)
sts=list(
list(coef = 0.0333, vk = rep(1,3),s=rep(1,3)),
list(a=rep(52,3),b=42,c=rep(0.0555,3),d=0),
NULL,
NULL
)
for (i in 1:length(lst)) {
model = lst[[i]]
for (j in 1:length(ct)) {
dt = data %>% filter(Count < ct[j])
getval.mean = function(k, count) {
cv.my3(dt, model, sts[[i]], k,count)
}
beg = (j - 1) * length(kn)
for (s in 1:length(kn)) {
m[beg + s, i] = getval.mean(kn[s], 30)
}
#print(m)
}
}
#cv for lm or nls including errors
cv.my3 = function(df = data,
fit,
start=NULL,
k = 10,
repets = 1) {
sm = 0
r = 0
RM = df$RM
repeat {
b = T
while (b) {
val = tryCatch({
b = F
blocks = sample.int(k, nrow(df), replace = T)
if(is.null(start)){
future.apply::future_sapply(seq(k), function(i) {
ft = lm(
formula = fit$call$formula,
data = df[blocks != i,]
)
sum((RM[blocks == i] - predict(ft, df[blocks == i,])) ^ 2) %>% return()
}) %>% sum()
}else{
future.apply::future_sapply(seq(k), function(i) {
ft = nls(
formula = fit$call$formula,
data = df[blocks != i,],
start = start
)
sum((RM[blocks == i] - predict(ft, df[blocks == i,])) ^ 2) %>% return()
}) %>% sum()
}
},
error = function(cond) {
b = T
})
}
sm = sm + val / k
r = r + 1
if (r == repets) {
break
}
}
return(sm / repets)
}
kn = c(5, 6, 7, 8, 9, 10, 11, 12,13,14,15,16,17,18,19,20)
ct = c(8, 11)
gr = rep(c('2-10', '2-7'), length(kn)) %>% sort(decreasing = T)
m = matrix(nrow = length(kn) * length(ct), ncol = 4)
lst = list(n8,n14,b3,b5)
sts=list(
list(coef = 0.0333, vk = rep(1,3),s=rep(1,3)),
list(a=rep(52,3),b=42,c=rep(0.0555,3),d=0),
NULL,
NULL
)
for (i in 1:length(lst)) {
model = lst[[i]]
for (j in 1:length(ct)) {
dt = data %>% filter(Count < ct[j])
getval.mean = function(k, count) {
cv.my3(dt, model, sts[[i]], k,count)
}
beg = (j - 1) * length(kn)
for (s in 1:length(kn)) {
m[beg + s, i] = getval.mean(kn[s], 30)
}
#print(m)
}
}
b5 = lm(RM ~ I((MRM / Index) ^ 6) + MRM:CountGroup + MRM:Action + MRM:CountGroup:Count - 1,
data)
b5 = lm(RM ~ I((MRM / Index) ^ 6) + MRM:CountGroup + MRM:Action + MRM:CountGroup:Count - 1,
data)
7
5465
b5 = lm(RM ~ I((MRM / Index) ^ 6) + MRM:CountGroup + MRM:Action + MRM:CountGroup:Count - 1,
data)
b3 = lm(RM ~ MRM:Count:CountGroup + MRM:Action - 1, data) #%>% all()
kn = c(5, 6, 7, 8, 9, 10, 11, 12,13,14,15,16,17,18,19,20)
ct = c(8, 11)
gr = rep(c('2-10', '2-7'), length(kn)) %>% sort(decreasing = T)
m = matrix(nrow = length(kn) * length(ct), ncol = 4)
lst = list(n8,n14,b3,b5)
sts=list(
list(coef = 0.0333, vk = rep(1,3),s=rep(1,3)),
list(a=rep(52,3),b=42,c=rep(0.0555,3),d=0),
NULL,
NULL
)
for (i in 1:length(lst)) {
model = lst[[i]]
for (j in 1:length(ct)) {
dt = data %>% filter(Count < ct[j])
getval.mean = function(k, count) {
cv.my3(dt, model, sts[[i]], k,count)
}
beg = (j - 1) * length(kn)
for (s in 1:length(kn)) {
m[beg + s, i] = getval.mean(kn[s], 30)
}
#print(m)
}
}
colnames(m) = c("n8","n14","b3","b5")
kp = rep(kn, length(ct))
#m[m<100]=NA
vals = data.frame(
kp = rep(kp, length(lst)),
b = as.numeric(m),
gr = factor(rep(gr, length(lst))),
n = factor(c("n8","n14","b3","b5"))
) %>%
tbl_df()
(ggplot(vals %>% filter(gr=="2-10"), aes(x = kp, y = b, col = n)) + theme_bw() +
geom_point(size = 4) + geom_line(size = 1.) +
labs(
x = "Количество блоков при перекрёстной проверке",
y = "Усреднённые значения ошибок после 30 повторных проверок",
col = "Модель",
title = "Оценки качества моделей при перекрёстной проверке"
) +
scale_x_continuous(breaks = kn) +
theme(legend.position = "right")) %>% ggplotly()
m
vals = data.frame(
kp = rep(kp, length(lst)),
b = as.numeric(m),
gr = factor(rep(gr, length(lst))),
n = factor(
c("n8" %>% rep(length(ct)*length(nk)),
"n14"%>% rep(length(ct)*length(nk)),
"b3"%>% rep(length(ct)*length(nk)),
"b5"%>% rep(length(ct)*length(nk)))
)
) %>%
tbl_df()
vals = data.frame(
kp = rep(kp, length(lst)),
b = as.numeric(m),
gr = factor(rep(gr, length(lst))),
n = factor(
c("n8" %>% rep(length(ct)*length(kn)),
"n14"%>% rep(length(ct)*length(kn)),
"b3"%>% rep(length(ct)*length(kn)),
"b5"%>% rep(length(ct)*length(kn)))
)
) %>%
tbl_df()
(ggplot(vals %>% filter(gr=="2-10"), aes(x = kp, y = b, col = n)) + theme_bw() +
geom_point(size = 4) + geom_line(size = 1.) +
labs(
x = "Количество блоков при перекрёстной проверке",
y = "Усреднённые значения ошибок после 30 повторных проверок",
col = "Модель",
title = "Оценки качества моделей при перекрёстной проверке"
) +
scale_x_continuous(breaks = kn) +
theme(legend.position = "right")) %>% ggplotly()
library(caret)
tr = trainControl(
method = "repeatedcv",
number = 10,
#p = 0.75,
repeats = 1,
verboseIter = T,
returnResamp = "all",
savePredictions = T,
summaryFunction = defaultSummary
)
d2=data %>% select(MRM,Count,Weight,Height,Index,Action,CountGroup,IndexGroup,BodyType,Experience) %>%
mutate_all(as.numeric) %>%
mutate(pow=MRM*Count,add=(MRM/Index)^6)
# 5.16
ft = train(
y=data$RM,
x = d2,
method = "penalized",
metric =  "RMSE",
maximize = FALSE,
trControl = tr
)
ft %>% predict(d2) %>% Show()
#5.24
ft = train(
y=data$RM,
x = d2,
method = "rqlasso",
metric =  "RMSE",
maximize = FALSE,
trControl = tr
)
ft %>% predict(d2) %>% Show()
