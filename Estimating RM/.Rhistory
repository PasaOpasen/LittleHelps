ErrorPercent=abs(err)/df$RM*100,
df[,c(3:15)]) %>% tbl_df() %>% select(-Count,-Mail,-Experience, IndexGroup)%>% arrange(-ERROR,-ErrorPercent,Weight) %>%
filter(ERROR>1)%>% View()
cat("\n")
rg=range(err)#;print(err);print(rg)
if(rg[1]<0)cat("------------> Наибольшая ошибка в большую сторону:",-rg[1],"\n")
if(rg[2]>0)cat("------------> Наибольшая ошибка в меньшую сторону:",rg[2],"\n")
s=sum(abs(err)/df$RM*100>maxerror)
len=length(err)
cat("Модель ошиблась более чем на",maxerror,"% в",s,"случаях из",len,"(",s/len*100,"%)\n")
s=sum(abs(err)>maxerror)
cat("Модель ошиблась более чем на",maxerror,"кг в",s,"случаях из",len,"(",s/len*100,"%)\n")
cat("----------------> Статистика по ошибкам в процентах:\n")
(abs(df$RM-vals)/df$RM*100) %>% summary() %>% print()
cat("-------------------> Среднеквадратичная ошибка:", Error(vals,df$RM),"\n")
}
ShowErrors=function(model,power.coef=1,sum.coef=0){
Show(predict(model,data)*power.coef+sum.coef)
cat("Оценка кросс-валидации для всего набора данных",
boot::cv.glm(data,glm(formula = model$call$formula,data=data),K=10)$delta[1],"\n")
cat("Оценка кросс-валидации для не более чем 10 повторений",
boot::cv.glm(data %>% filter(Count<11),glm(formula = model$call$formula,data=data %>% filter(Count<11)),K=10)$delta[1],"\n")
cat("Оценка кросс-валидации для не более чем 6 повторений",
boot::cv.glm(data %>% filter(Count<7),glm(formula = model$call$formula,data=data %>% filter(Count<7)),K=10)$delta[1],"\n")
}
ResAn=function(res){
p=ggplot(data %>% mutate(res=res),aes(x=CountGroup,y=res))+
geom_boxplot()+labs(x="Группа повторений",y="Остатки (цель - предсказание)",title="Распределения остатков в зависимости от группы повторений")+theme_bw()
print(p)
(p+facet_grid(vars(Action))) %>% print()
(p+facet_grid(vars(BodyType),vars(Action)))%>% print()
return(0)
}
#из этого графика можно сделать вывод, что модель неплохо работает на диапазоне 2-3, но на диапазоне 13-20 ошибка какая-то сильно отличающаяся от тенденции уменьшения ошибок, так что этот диапазон надо бы и вообще убрать, так как там уже играют роль свойства красных волокон, не говорящие о силе
ResAn(data$RM-data$MRM*(1+0.0333*data$Count))
ResVal=function(vals)ResAn(data$RM-vals)
#ResGraf=function(model)ResVal(predict(model,data))
mysummary=function(mdl){
cat("-----> ОБЩАЯ ИНФОРМАЦИЯ О МОДЕЛИ:\n");cat("\n")
gvlma::gvlma(mdl) %>% summary();cat("\n")
cat("-----> БАЗОВЫЕ ГРАФИКИ:\n");cat("\n")
par(mfrow=c(2,2))
plot(mdl)
par(mfrow=c(1,1)) ;cat("\n")
cat("-----> ТЕСТ НА НОРМАЛЬНОСТЬ РАСПРЕДЕЛЕНИЯ ОСТАТКОВ\n");cat("\n")
shapiro.test(mdl$residuals) %>% print();cat("\n")
qqPlot(mdl,main="Q-Q plot")
cat("-----> ФАКТОР ИНФЛЯЦИИ ДИСПЕРСИЙ:\n");cat("\n")
vif(mdl)%>% print();cat("\n")
cat("-----> ТЕСТ НА АВТОКОРРЕЛЯЦИЮ:\n");cat("\n")
durbinWatsonTest(mdl) %>% print();cat("\n")   #тест на автокорреляцию
# cat("-----> ТЕСТ НА ОДНОРОДНОСТЬ ДИСПЕРСИИ:\n");cat("\n")
# ncvTest(mdl)%>% print();cat("\n")    #однородность дисперсии
cat("-----> ТЕСТ НА ВЫБРОСЫ И ВЛИЯТЕЛЬНЫЕ НАБЛЮДЕНИЯ:\n");cat("\n")
outs=outlierTest(mdl)
outs%>% print()
influ=influencePlot(mdl,main="Диаграмма влияния",sub="Размеры кругов пропорциональны расстояниям Кука")
influ %>% print()
cat("-----> ВЫБРОСЫ И ВЛИЯТЕЛЬНЫЕ НАБЛЮДЕНИЯ:\n");cat("\n")
data[c(outs$p %>% names(),influ %>% rownames()) %>% as.numeric(),] %>% unique() %>%
select(-Mail) %>% arrange(-RM,-Count) %>% print();cat("\n")
}
all=function(modelka){
modelka %>% ShowErrors()
modelka %>% predict(data) %>% ResVal()
modelka %>% mysummary()
}
data %<>% mutate(Body2=ifelse(BodyType=="Эндоморф","Endo","NonEndo") %>% factor(),
Action2=ifelse(Action=="Жим","Up","Down") %>% factor())
data %<>%filter(Count<11)
b5=lm(RM ~ I((MRM/Index)^6) + MRM:CountGroup + MRM:Action + MRM:CountGroup:Count - 1,data)
#Многоповторный через многоповторный####
mrm=function(RM, count){
s=function(MRM) abs(RM-f(MRM=MRM,Count=count, Action = 'Присед')[1]) %>% return()
optim(par=c(0.8*RM),
fn=s,
lower=0.6*RM,
upper = RM,
method="Brent")$par %>% return()
}
#mrm(150,3)
vec=seq(100,300,length.out = 81)
m=matrix(nrow=length(vec),ncol=10)
m[,1]=vec
for(i in 2:10){
for(j in 1:length(vec))
m[j,i]=mrm(m[j,1],i)
}
colnames(m)=paste(1:10, 'reps') %>% as.character()
m %>% round(2) %>% tbl_df()
action.levels=levels(data$Action)
count.levels=levels(data$CountGroup)
f=function(MRM,Count,Action='Жим',Weight=70,Height=170){
if(Count<2){
Count=2
} else if(Count>10){
Count=10
}
act=factor(Action,levels =globalenv()$action.levels)
up=c(4,8,11)
lv=globalenv()$count.levels
cg=lv[Count<up] %>% first() %>% factor(levels=lv)
#print(environment()$action.levels)
#print(MRM)
#print(Count)
#print(act)
#print(cg)
#print(Weight/(0.01*Height)^2)
df=data.frame(MRM=MRM,
Count=Count,
Action=act,
CountGroup=cg,
Index=Weight/(0.01*Height)^2)
#df %>% print()
predict(globalenv()$b5,
df,
se.fit = T,
interval = "confidence",
level=0.999)[[1]] %>% return()
}
vec=seq(100,300,length.out = 81)
m=matrix(nrow=length(vec),ncol=10)
m[,1]=vec
for(i in 2:10){
for(j in 1:length(vec))
m[j,i]=mrm(m[j,1],i)
}
colnames(m)=paste(1:10, 'reps') %>% as.character()
m %>% round(2) %>% tbl_df()
summary(b5)
anova(lm(formula = RM ~ I((MRM/Index)^6) + MRM:CountGroup + MRM:Action +
MRM:CountGroup:Count - 1, data = data),lm(formula = RM ~ MRM:CountGroup + MRM:Action +
MRM:CountGroup:Count - 1, data = data))
anova(lm(formula = RM ~ I((MRM/Index)^6) + MRM:CountGroup + MRM:Action +
+         MRM:CountGroup:Count - 1, data = data),lm(formula = RM ~ MRM:CountGroup + MRM:Action +
MRM:CountGroup:Count - 1, data = data))
kn=c(5,6,7,8,9,10,11,12)
ct=c(21,50)
gr=rep(c('11-20','>20'),length(kn)) %>% sort(decreasing = T)
m=matrix(nrow=length(kn)*length(ct),ncol=5)
lst=list(b1,b2,b3,b4,b5)
b4=lm(RM ~ MRM:Action + MRM:I(Count^2) + Action2:I(MRM/Weight) + MRM:Count:CountGroup - 1,data)
b3=lm(RM~MRM:Count:CountGroup+MRM:Action-1,data) #%>% all()
b2=lm(RM~MRM:Count:CountGroup+MRM:CountGroup-1,data); b2%>% all()
b1=lm(RM~MRM+MRM:Count-1,data)
kn=c(5,6,7,8,9,10,11,12)
ct=c(21,50)
gr=rep(c('11-20','>20'),length(kn)) %>% sort(decreasing = T)
m=matrix(nrow=length(kn)*length(ct),ncol=5)
lst=list(b1,b2,b3,b4,b5)
kn=c(5,6,7,8,9,10,11,12)
ct=c(21,50)
gr=rep(c('11-20','>20'),length(kn)) %>% sort(decreasing = T)
m=matrix(nrow=length(kn)*length(ct),ncol=5)
lst=list(b1,b2,b3,b4,b5)
for(i in 1:5){
model=lst[[i]]
for(j in 1:length(ct)){
dt=data.backup %>% filter(Count<ct[j])
gl=glm(formula = model$call$formula,data= dt)
getval=function(k){
boot::cv.glm(dt, gl,K=k)$delta[1] %>% return()
}
getval.mean=function(k,count){
map_dbl(1:count,function(x)getval(k)) %>% mean() %>% return()
}
beg=(j-1)*length(kn)
for(s in 1:length(kn)){
m[beg+s,i]= getval.mean(kn[s],30)
}
#print(m)
}
}
colnames(m)=paste0('b',1:5)
kp=rep(kn,length(ct))
vals=data.frame(kp=rep(kp,5),
b=as.numeric(m),
gr=factor(rep(gr,5)),
n=factor(rep(colnames(m),length(kn)*length(ct)) %>% sort())) %>%
tbl_df()
ggplot(vals,aes(x=kp,y=b,col=n))+theme_bw()+facet_grid(vars(gr))+
geom_point(size=4)+geom_line(size=1.)+
labs(x="Количество блоков при перекрёстной проверке",
y="Усреднённые значения ошибок после 30 повторных проверок",
col="Модель",
title="Оценки качества моделей при перекрёстной проверке",
subtitle = "Оценка производилась на разных подмножествах данных",
caption = "Очевидно, что пятая модель превосходит остальные по точности")+
scale_x_continuous(breaks = kn)+
theme(legend.position = "bottom")
coefficients(b5)
cf=coefficients(b5)
cf
mrm=function(RM, count){
s=function(MRM) abs(RM-f(MRM=MRM,Count=count, Action = 'Присед')[1]) %>% return()
optim(par=c(0.8*RM),
fn=s,
lower=0.6*RM,
upper = RM,
method="Brent")$par %>% return()
}
mrm(150,3)
Rprof(tmp <- tempfile())
mrm(150,3)
Rprof(NULL)
summaryRprof(tmp)
mrm=function(RM, count){
s=function(MRM) abs(RM-f(MRM=MRM,Count=count, Action = 'Присед')[1]) %>% return()
optim(par=c(0.8*RM),
fn=s,
lower=0.7*RM,
upper = RM,
method="Brent")$par %>% return()
}
Rprof(tmp <- tempfile())
mrm(150,3)
Rprof(NULL)
summaryRprof(tmp)
Rprof(tmp <- tempfile())
mrm(150,3)
Rprof(NULL)
summaryRprof(tmp)
mrm2=function(RM,Count,Action,Weight=70,Height=170){
s=function(MRM) abs(RM-f(MRM=MRM,Count=count, Action = 'Присед')[1]) %>% return()
uniroot(s,c(0.7,0.99)*RM) %>% return()
}
Rprof(tmp <- tempfile())
mrm2(150,3)
Rprof(NULL)
summaryRprof(tmp)
mrm2=function(RM,count,Action,Weight=70,Height=170){
s=function(MRM) abs(RM-f(MRM=MRM,Count=count, Action = 'Присед')[1]) %>% return()
uniroot(s,c(0.7,0.99)*RM) %>% return()
}
Rprof(tmp <- tempfile())
mrm2(150,3)
Rprof(NULL)
summaryRprof(tmp)
mrm2=function(RM,count,Action,Weight=70,Height=170){
s=function(MRM) abs(RM-f(MRM=MRM,Count=count, Action = Action)[1]) %>% return()
uniroot(s,c(0.7,0.99)*RM) %>% return()
}
mrm2(150,3)
mrm2=function(RM,count,Action='Жим',Weight=70,Height=170){
s=function(MRM) abs(RM-f(MRM=MRM,Count=count, Action = Action)[1]) %>% return()
uniroot(s,c(0.7,0.99)*RM) %>% return()
}
mrm2(150,3)
mrm2=function(RM,count,Action='Жим',Weight=70,Height=170){
s=function(MRM) RM-f(MRM=MRM,Count=count, Action = Action)[1] %>% return()
uniroot(s,c(0.7,0.99)*RM) %>% return()
}
mrm2(150,3)
mrm2=function(RM,count,Action='Присед',Weight=70,Height=170){
s=function(MRM) RM-f(MRM=MRM,Count=count, Action = Action)[1] %>% return()
uniroot(s,c(0.7,0.99)*RM) %>% return()
}
mrm2(150,3)
mrm(150,3)
mrm=function(RM, count){
s=function(MRM) abs(RM-f(MRM=MRM,Count=count, Action = 'Присед')[1]) %>% return()
optim(par=c(0.8*RM),
fn=s,
lower=0.7*RM,
upper = RM,
method="Brent")$par %>% return()
}
Rprof(tmp <- tempfile())
mrm(150,3)
Rprof(NULL)
summaryRprof(tmp)
mrm2=function(RM,count,Action='Присед',Weight=70,Height=170){
s=function(MRM) RM-f(MRM=MRM,Count=count, Action = Action)[1] %>% return()
uniroot(s,c(0.7,0.99)*RM)$root %>% return()
}
Rprof(tmp <- tempfile())
mrm2(150,3)
Rprof(NULL)
summaryRprof(tmp)
Sys.time()
t=Sys.time()
vec=seq(100,300,length.out = 81)
m=matrix(nrow=length(vec),ncol=10)
m[,1]=vec
for(i in 2:10){
for(j in 1:length(vec))
m[j,i]=mrm(m[j,1],i)
}
colnames(m)=paste(1:10, 'reps') %>% as.character()
m %>% round(2) %>% tbl_df()
t-Sys.time()
t=Sys.time()
vec=seq(100,300,length.out = 81)
m=matrix(nrow=length(vec),ncol=10)
m[,1]=vec
for(i in 2:10){
for(j in 1:length(vec))
m[j,i]=mrm2(m[j,1],i)
}
colnames(m)=paste(1:10, 'reps') %>% as.character()
m %>% round(2) %>% tbl_df()
Sys.time()-t
mrm2=function(RM,count,Action='Присед',Weight=70,Height=170){
s=function(MRM) RM-f(MRM=MRM,Count=count, Action = Action)[1] %>% return()
uniroot(s,c(0.74,0.99)*RM)$root %>% return()
}
Rprof(tmp <- tempfile())
mrm2(150,3)
Rprof(NULL)
summaryRprof(tmp)
t=Sys.time()
vec=seq(100,300,length.out = 81)
m=matrix(nrow=length(vec),ncol=10)
m[,1]=vec
for(i in 2:10){
for(j in 1:length(vec))
m[j,i]=mrm2(m[j,1],i)
}
colnames(m)=paste(1:10, 'reps') %>% as.character()
m %>% round(2) %>% tbl_df()
Sys.time()-t
mrm2=function(RM,count,Action='Присед',Weight=70,Height=170){
s=function(MRM) RM-f(MRM=MRM,Count=count, Action = Action)[1] %>% return()
uniroot(s,c(0.5,0.99)*RM)$root %>% return()
}
Rprof(tmp <- tempfile())
mrm2(150,3)
Rprof(NULL)
summaryRprof(tmp)
t=Sys.time()
vec=seq(100,300,length.out = 81)
m=matrix(nrow=length(vec),ncol=10)
m[,1]=vec
for(i in 2:10){
for(j in 1:length(vec))
m[j,i]=mrm(m[j,1],i)
}
colnames(m)=paste(1:10, 'reps') %>% as.character()
m %>% round(2) %>% tbl_df()
Sys.time()-t
t=Sys.time()
vec=seq(100,300,length.out = 81)
m=matrix(nrow=length(vec),ncol=10)
m[,1]=vec
for(i in 2:10){
for(j in 1:length(vec))
m[j,i]=mrm2(m[j,1],i)
}
colnames(m)=paste(1:10, 'reps') %>% as.character()
m %>% round(2) %>% tbl_df()
Sys.time()-t
cf
mrm3=function(RM,count,Action='Присед',Weight=70,Height=170){
ctg=3
if(count<7){ctg=2}
if(count<4){ctg=1}
act=1
if(Action=="Тяга"){
act=1+cf[5]}else if(Action=="Присед"){act=1+cf[6]}
polyroot(c(-RM,cf[1+ctg]+count*cf[6+ctg]+act,0,0,0,0,cf[1]/Weight*(0.01*Height)^2))
}
mrm3(150,3)
mrm3=function(RM,count,Action='Жим',Weight=70,Height=170){
ctg=3
if(count<7){ctg=2}
if(count<4){ctg=1}
act=1
if(Action=="Тяга"){
act=1+cf[5]}else if(Action=="Присед"){act=1+cf[6]}
polyroot(c(-RM,cf[1+ctg]+count*cf[6+ctg]+act,0,0,0,0,cf[1]/Weight*(0.01*Height)^2))
}
mrm3(150,3)
mrm3=function(RM,count,Action='Жим',Weight=70,Height=170){
ctg=3
if(count<7){ctg=2}
if(count<4){ctg=1}
act=0
if(Action=="Тяга"){
act=1+cf[5]}else if(Action=="Присед"){act=1+cf[6]}
polyroot(c(-RM,cf[1+ctg]+count*cf[6+ctg]+act,0,0,0,0,cf[1]/Weight*(0.01*Height)^2))
}
mrm3(150,3)
mrm3=function(RM,count,Action='Жим',Weight=70,Height=170){
ctg=3
if(count<7){ctg=2}
if(count<4){ctg=1}
act=0
if(Action=="Тяга"){
act=1+cf[5]}else if(Action=="Присед"){act=1+cf[6]}
polyroot(c(-RM,cf[1+ctg]+count*cf[6+ctg]+act,0,0,0,0,cf[1]*(0.01*Height)^2/Weight))
}
mrm3(150,3)
са
cf
mrm3=function(RM,count,Action='Жим',Weight=70,Height=170){
ctg=3
if(count<7){ctg=2}
if(count<4){ctg=1}
print(ctg)
act=0
if(Action=="Тяга"){
act=1+cf[5]}else if(Action=="Присед"){act=1+cf[6]}
polyroot(c(-RM,cf[1+ctg]+count*cf[6+ctg]+act,0,0,0,0,cf[1]*(0.01*Height)^2/Weight))
}
mrm3(150,3)
cf
mrm3=function(RM,count,Action='Жим',Weight=70,Height=170){
ctg=3
if(count<7){ctg=2}
if(count<4){ctg=1}
print(ctg)
act=0
if(Action=="Тяга"){
act=1+cf[5]}else if(Action=="Присед"){act=1+cf[6]}
polyroot(c(-RM,1+cf[1+ctg]+count*cf[6+ctg]+act,0,0,0,0,cf[1]*(0.01*Height)^2/Weight))
}
mrm3(150,3)
mrm3=function(RM,count,Action='Жим',Weight=70,Height=170){
ctg=3
if(count<7){ctg=2}
if(count<4){ctg=1}
print(ctg)
act=0
if(Action=="Тяга"){
act=1+cf[5]}else if(Action=="Присед"){act=1+cf[6]}
polyroot(c(-RM,1+cf[1+ctg]+count*(1+cf[6+ctg])+act,0,0,0,0,cf[1]*(0.01*Height)^2/Weight))
}
mrm3(150,3)
cf
mrm2(150,3)
mrm3=function(RM,count,Action='Жим',Weight=70,Height=170){
ctg=3
if(count<7){ctg=2}
if(count<4){ctg=1}
print(ctg)
act=0
if(Action=="Тяга"){
act=1+cf[5]}else if(Action=="Присед"){act=1+cf[6]}
polyroot(c(-RM,cf[1+ctg]+count*cf[6+ctg]+act,0,0,0,0,cf[1]*((0.01*Height)^2/Weight)^6))
}
mrm3(150,3)
mrm3=function(RM,count,Action='Присед',Weight=70,Height=170){
ctg=3
if(count<7){ctg=2}
if(count<4){ctg=1}
print(ctg)
act=0
if(Action=="Тяга"){
act=cf[5]}else if(Action=="Присед"){act=cf[6]}
polyroot(c(-RM,cf[1+ctg]+count*cf[6+ctg]+act,0,0,0,0,cf[1]*((0.01*Height)^2/Weight)^6))
}
mrm3(150,3)
mrm2(150,3)
Rprof(tmp <- tempfile())
mrm2(150,3)
Rprof(NULL)
summaryRprof(tmp)
Rprof(tmp <- tempfile())
mrm3(150,3)
Rprof(NULL)
summaryRprof(tmp)
mrm3=function(RM,count,Action='Присед',Weight=70,Height=170){
ctg=3
if(count<7){ctg=2}
if(count<4){ctg=1}
act=0
if(Action=="Тяга"){
act=cf[5]}else if(Action=="Присед"){act=cf[6]}
polyroot(c(-RM,cf[1+ctg]+count*cf[6+ctg]+act,0,0,0,0,cf[1]*((0.01*Height)^2/Weight)^6)) %>% Re()
}
mrm3(150,3)
mrm3=function(RM,count,Action='Присед',Weight=70,Height=170){
ctg=3
if(count<7){ctg=2}
if(count<4){ctg=1}
act=0
if(Action=="Тяга"){
act=cf[5]}else if(Action=="Присед"){act=cf[6]}
polyroot(c(-RM,cf[1+ctg]+count*cf[6+ctg]+act,0,0,0,0,cf[1]*((0.01*Height)^2/Weight)^6))[1] %>% Re()
}
t=Sys.time()
vec=seq(100,300,length.out = 81)
m=matrix(nrow=length(vec),ncol=10)
m[,1]=vec
for(i in 2:10){
for(j in 1:length(vec))
m[j,i]=mrm3(m[j,1],i)
}
colnames(m)=paste(1:10, 'reps') %>% as.character()
m %>% round(2) %>% tbl_df()
Sys.time()-t
save(f,count.levels,action.levels,cf,mrm3,b5,file="entire_data.rdata")
save(f,count.levels,action.levels,cf,mrm3,file="Functions.rdata")
mrm3(100,1:10)
v=sapply(2:10, function(x) mrm3(100,x))
v
shiny::runApp('RMbyMRMestimating')
runApp()
runApp('RMbyMRMestimating')
runApp('RMbyMRMestimating')
runApp('RMbyMRMestimating')
runApp('RMbyMRMestimating')
data.frame(1:10,c(1,2:10))
runApp('RMbyMRMestimating')
runApp('RMbyMRMestimating')
runApp('RMbyMRMestimating')
runApp('RMbyMRMestimating')
runApp()
shiny::runApp('RMbyMRMestimating')
install.packages(c("caret", "DT", "foreign", "lattice", "ModelMetrics", "nlme", "nnet", "pROC", "Rcpp", "survival"))
install.packages("rsconnect")
shiny::runApp('RMbyMRMestimating')
