f=function(MRM,Count,Action='Жим',Weight=70,Height=170){
if(Count<2){
Count=2
} else if(Count>10){
Count=10
}
act=factor(Action,levels = levels(data$Action))
up=c(4,8,11)
lv=levels(data$CountGroup)
cg=lv[Count<up] %>% first() %>% factor(levels=lv)
df=data.frame(MRM,
Count,
Action=act,
CountGroup=cg,
Index=Weight/(0.01*Height)^2)
predict(b5,df,se.fit = T,interval = "confidence",level=0.999)[[1]] %>% return()
}
runApp('RMbyMRMestimating')
#Загрузка данных####
library(tidyverse)
library(magrittr)
library(ggformula)
library(ggthemes)
library(tidyquant)
library(ggvis)
library(plotrix)
library(car)
#library(DAAG)
library(leaps)
library(plotly)
data=read_tsv("data(rus).tsv",
skip=1,col_names = F,na="",
col_types = "fddnfffnnnff",
comment="#"
) %>% tbl_df()
colnames(data)=c("Date","RM","MRM","Count","Action","Sex","Experience","Age","Weight","Height","BodyType","Mail")
data %<>%#filter(Count<=20) %>%
arrange(MRM,Count,Weight) %>%  mutate(
CountGroup=cut(Count,breaks = c(1,3,6,10,20,40)),
AgeGroup=cut(Age,breaks = c(1,19,27,35,70)),
Experience=factor(Experience,levels = c("До двух лет","2-3 года","4-5 лет","6-10 лет","11-15 лет" ,"больше 15 лет"),ordered = T),
Index=Weight/(0.01*Height)^2,
IndexGroup=cut(Index,breaks = c(0,16,18.5,24.99,30,35,40,60))
)%>% select(-Date)#,-Mail) %>% filter(Count>1,MRM<RM)
levels(data$CountGroup)=c("2-3","4-6","7-10","11-20",">20")
levels(data$AgeGroup)=c("<20","20-27","28-35",">35")
levels(data$IndexGroup)=c("выраженный дефицит","дефицит","норма","избыток","ожирение1","ожирение2","ожирение3")
ex=data$Experience %>% as.numeric()
ex[ex==6]=5
ex %<>%factor()
levels(ex)=c("До двух лет","2-3 года","4-5 лет","6-10 лет","больше 10 лет")
data %<>%mutate(Experience=factor(ex,ordered = T))
allrows=1:nrow(data)
maxerror=5
#уникальные записи (где один от каждого человека берётся только одна запись)
#объяснить, по каким признакам людей считать одинаковыми
data.unique=data %>% select(AgeGroup,Height,BodyType,Experience,Sex,IndexGroup) %>% unique()
#функции
getparam=function(vec){
ln=length(levels(vec))
x=numeric(ln)
ns=character(ln)
for(i in seq(ln)){
x[i]=sum(vec==levels(vec)[i])/length(vec)
ns[i]=paste0(levels(vec)[i]," (",round(x[i]*100,2),"%)")
}
return(list(x=x,ns=ns))
}
getPIE=function(vec,main=""){
lst=getparam(vec)
pie(x=lst$x,labels=lst$ns,main=main)
}
getFan=function(vec,main=""){
pr=getparam(vec)
fan.plot(pr$x,labels=pr$ns,main=main)
}
data.backup=data
runApp('RMbyMRMestimating')
save(data,"data.rdata")
save(data,file="data.rdata")
runApp('RMbyMRMestimating')
runApp('RMbyMRMestimating')
shiny::runApp('RMbyMRMestimating')
load("data.rdata")
load("b5_fit.rdata")
load("Functions.rdata")
runApp('RMbyMRMestimating')
runApp('RMbyMRMestimating')
shiny::runApp('RMbyMRMestimating')
runApp('RMbyMRMestimating')
runApp('RMbyMRMestimating')
runApp('RMbyMRMestimating')
load("data.rdata")
load("b5_fit.rdata")
load("Functions.rdata")
action.levels=levels(data$Action)
count.levels=levels(data$CountGroup)
f=function(MRM,Count,Action='Жим',Weight=70,Height=170){
if(Count<2){
Count=2
} else if(Count>10){
Count=10
}
act=factor(Action,levels = action.levels)
up=c(4,8,11)
cg=count.levels[Count<up] %>% first() %>% factor(levels=count.levels)
df=data.frame(MRM,
Count,
Action=act,
CountGroup=cg,
Index=Weight/(0.01*Height)^2)
predict(b5,df,se.fit = T,interval = "confidence",level=0.999)[[1]] %>% return()
}
save(f,count.levels,action.levels,mrm,file="Functions.rdata")
runApp('RMbyMRMestimating')
runApp('RMbyMRMestimating')
shiny::runApp('RMbyMRMestimating')
runApp('RMbyMRMestimating')
load("Functions.rdata")
runApp('RMbyMRMestimating')
load("b5_fit.rdata")
runApp('RMbyMRMestimating')
shiny::runApp('RMbyMRMestimating')
runApp('RMbyMRMestimating')
load("b5_fit.rdata")
load("Functions.rdata")
save(f,count.levels,action.levels,mrm,b5,file="entire_data.rdata")
runApp('RMbyMRMestimating')
runApp('RMbyMRMestimating')
ld=load("entire_data.rdata")
ld
ld[[f]]
ld[f]
str(ld)
runApp('RMbyMRMestimating')
runApp('RMbyMRMestimating')
shiny::runApp('RMbyMRMestimating')
runApp('RMbyMRMestimating')
globalenv(f)
runApp('RMbyMRMestimating')
load("entire_data.rdata")
globalenv(f)
globalenv()
f
location(f)
environment()
runApp('RMbyMRMestimating')
runApp()
runApp('RMbyMRMestimating')
runApp('RMbyMRMestimating')
e = new.env()
name <- load("entire_data.rdata", envir = e)
e
e$f()
e$f
runApp('RMbyMRMestimating')
rm(f)
runApp('RMbyMRMestimating')
runApp('RMbyMRMestimating')
load("entire_data.rdata")
action.levels
count.levels
f=function(MRM,Count,Action='Жим',Weight=70,Height=170){
if(Count<2){
Count=2
} else if(Count>10){
Count=10
}
action.levels=c("Жим" ,   "Тяга" ,  "Присед")
count.levels=c("2-3"  , "4-6" ,  "7-10"  ,"11-20" ,">20" )
count.levels=levels(data$CountGroup)
act=factor(Action,levels = action.levels)
up=c(4,8,11)
cg=count.levels[Count<up] %>% first() %>% factor(levels=count.levels)
df=data.frame(MRM,
Count,
Action=act,
CountGroup=cg,
Index=Weight/(0.01*Height)^2)
predict(b5,df,se.fit = T,interval = "confidence",level=0.999)[[1]] %>% return()
}
save(f,count.levels,action.levels,mrm,b5,file="entire_data.rdata")
runApp('RMbyMRMestimating')
env.profile()
t=environment()
t
f=function(MRM,Count,Action='Жим',Weight=70,Height=170){
if(Count<2){
Count=2
} else if(Count>10){
Count=10
}
count.levels=levels(data$CountGroup)
act=factor(Action,levels =environment()$action.levels)
up=c(4,8,11)
cg=environment()$count.levels[Count<up] %>% first() %>% factor(levels=environment()$count.levels)
df=data.frame(MRM,
Count,
Action=act,
CountGroup=cg,
Index=Weight/(0.01*Height)^2)
predict(environment()$b5,df,se.fit = T,interval = "confidence",level=0.999)[[1]] %>% return()
}
save(f,count.levels,action.levels,mrm,b5,file="entire_data.rdata")
runApp('RMbyMRMestimating')
environment()
environment()$f
f=function(MRM,Count,Action='Жим',Weight=70,Height=170){
if(Count<2){
Count=2
} else if(Count>10){
Count=10
}
act=factor(Action,levels =environment()$action.levels)
up=c(4,8,11)
cg=environment()$count.levels[Count<up] %>% first() %>% factor(levels=environment()$count.levels)
df=data.frame(MRM,
Count,
Action=act,
CountGroup=cg,
Index=Weight/(0.01*Height)^2)
predict(environment()$b5,df,se.fit = T,interval = "confidence",level=0.999)[[1]] %>% return()
}
save(f,count.levels,action.levels,mrm,b5,file="entire_data.rdata")
runApp('RMbyMRMestimating')
f(MRM=1,Count=2)
f=function(MRM,Count,Action='Жим',Weight=70,Height=170){
if(Count<2){
Count=2
} else if(Count>10){
Count=10
}
act=factor(Action,levels =environment()$action.levels)
up=c(4,8,11)
lv=environment()$count.levels
cg=lv[Count<up] %>% first() %>% factor(levels=lv)
df=data.frame(MRM,
Count,
Action=act,
CountGroup=cg,
Index=Weight/(0.01*Height)^2)
predict(environment()$b5,df,se.fit = T,interval = "confidence",level=0.999)[[1]] %>% return()
}
f(MRM=1,Count=2)
MRM=1
Count=2
Action="Жим"
if(Count<2){
Count=2
} else if(Count>10){
Count=10
}
act=factor(Action,levels =environment()$action.levels)
up=c(4,8,11)
lv=environment()$count.levels
cg=lv[Count<up] %>% first() %>% factor(levels=lv)
df=data.frame(MRM,
Count,
Action=act,
CountGroup=cg,
Index=Weight/(0.01*Height)^2)
Weight=70
Height=170
if(Count<2){
Count=2
} else if(Count>10){
Count=10
}
act=factor(Action,levels =environment()$action.levels)
up=c(4,8,11)
lv=environment()$count.levels
cg=lv[Count<up] %>% first() %>% factor(levels=lv)
df=data.frame(MRM,
Count,
Action=act,
CountGroup=cg,
Index=Weight/(0.01*Height)^2)
predict(environment()$b5,df,se.fit = T,interval = "confidence",level=0.999)[[1]]
f=function(MRM,Count,Action='Жим',Weight=70,Height=170){
if(Count<2){
Count=2
} else if(Count>10){
Count=10
}
act=factor(Action,levels =environment()$action.levels)
up=c(4,8,11)
lv=environment()$count.levels
cg=lv[Count<up] %>% first() %>% factor(levels=lv)
df=data.frame(MRM,
Count,
Action=act,
CountGroup=cg,
Index=Weight/(0.01*Height)^2)
predict(environment()$b5,df,se.fit = T,interval = "confidence",level=0.999)[[1]] %>% return()
}
f(100,2)
f(100,2,"Жим")
if(Count<2){
Count=2
} else if(Count>10){
Count=10
}
act=factor(Action,levels =environment()$action.levels)
up=c(4,8,11)
lv=environment()$count.levels
cg=lv[Count<up] %>% first() %>% factor(levels=lv)
df=data.frame(MRM,
Count,
Action=act,
CountGroup=cg,
Index=Weight/(0.01*Height)^2)
f=function(MRM,Count,Action='Жим',Weight=70,Height=170){
if(Count<2){
Count=2
} else if(Count>10){
Count=10
}
act=factor(Action,levels =environment()$action.levels)
up=c(4,8,11)
lv=environment()$count.levels
cg=lv[Count<up] %>% first() %>% factor(levels=lv)
df=data.frame(MRM=MRM,
Count=Count,
Action=act,
CountGroup=cg,
Index=Weight/(0.01*Height)^2)
predict(environment()$b5,
df,
se.fit = T,
interval = "confidence",
level=0.999)[[1]] %>% return()
}
f(1,2)
f(MRM=10,Count=2)
cg
act
Weight/(0.01*Height)^2
f=function(MRM,Count,Action='Жим',Weight=70,Height=170){
if(Count<2){
Count=2
} else if(Count>10){
Count=10
}
act=factor(Action,levels =environment()$action.levels)
up=c(4,8,11)
lv=environment()$count.levels
cg=lv[Count<up] %>% first() %>% factor(levels=lv)
df=data.frame(MRM=MRM,
Count=Count,
Action=act,
CountGroup=cg,
Index=Weight/(0.01*Height)^2)
df %>% print()
predict(environment()$b5,
df,
se.fit = T,
interval = "confidence",
level=0.999)[[1]] %>% return()
}
f(1,2)
f=function(MRM,Count,Action='Жим',Weight=70,Height=170){
if(Count<2){
Count=2
} else if(Count>10){
Count=10
}
act=factor(Action,levels =environment()$action.levels)
up=c(4,8,11)
lv=environment()$count.levels
cg=lv[Count<up] %>% first() %>% factor(levels=lv)
print(MRM,Count,act,cg,Weight/(0.01*Height)^2)
df=data.frame(MRM=MRM,
Count=Count,
Action=act,
CountGroup=cg,
Index=Weight/(0.01*Height)^2)
df %>% print()
predict(environment()$b5,
df,
se.fit = T,
interval = "confidence",
level=0.999)[[1]] %>% return()
}
f(1,3)
f=function(MRM,Count,Action='Жим',Weight=70,Height=170){
if(Count<2){
Count=2
} else if(Count>10){
Count=10
}
act=factor(Action,levels =environment()$action.levels)
up=c(4,8,11)
lv=environment()$count.levels
cg=lv[Count<up] %>% first() %>% factor(levels=lv)
print(MRM)
print(Count)
print(act)
print(cg)
print(Weight/(0.01*Height)^2)
df=data.frame(MRM=MRM,
Count=Count,
Action=act,
CountGroup=cg,
Index=Weight/(0.01*Height)^2)
df %>% print()
predict(environment()$b5,
df,
se.fit = T,
interval = "confidence",
level=0.999)[[1]] %>% return()
}
f(1,2)
environment()$action.levels
f=function(MRM,Count,Action='Жим',Weight=70,Height=170){
if(Count<2){
Count=2
} else if(Count>10){
Count=10
}
act=factor(Action,levels =environment()$action.levels)
up=c(4,8,11)
lv=environment()$count.levels
cg=lv[Count<up] %>% first() %>% factor(levels=lv)
print(environment()$action.levels)
print(MRM)
print(Count)
print(act)
print(cg)
print(Weight/(0.01*Height)^2)
df=data.frame(MRM=MRM,
Count=Count,
Action=act,
CountGroup=cg,
Index=Weight/(0.01*Height)^2)
df %>% print()
predict(environment()$b5,
df,
se.fit = T,
interval = "confidence",
level=0.999)[[1]] %>% return()
}
f(1,2)
globalenv()
f=function(MRM,Count,Action='Жим',Weight=70,Height=170){
if(Count<2){
Count=2
} else if(Count>10){
Count=10
}
act=factor(Action,levels =globalenv()$action.levels)
up=c(4,8,11)
lv=globalenv()$count.levels
cg=lv[Count<up] %>% first() %>% factor(levels=lv)
print(environment()$action.levels)
print(MRM)
print(Count)
print(act)
print(cg)
print(Weight/(0.01*Height)^2)
df=data.frame(MRM=MRM,
Count=Count,
Action=act,
CountGroup=cg,
Index=Weight/(0.01*Height)^2)
df %>% print()
predict(environment()$b5,
df,
se.fit = T,
interval = "confidence",
level=0.999)[[1]] %>% return()
}
f(1,2)
f=function(MRM,Count,Action='Жим',Weight=70,Height=170){
if(Count<2){
Count=2
} else if(Count>10){
Count=10
}
act=factor(Action,levels =globalenv()$action.levels)
up=c(4,8,11)
lv=globalenv()$count.levels
cg=lv[Count<up] %>% first() %>% factor(levels=lv)
print(environment()$action.levels)
#print(MRM)
#print(Count)
#print(act)
#print(cg)
#print(Weight/(0.01*Height)^2)
df=data.frame(MRM=MRM,
Count=Count,
Action=act,
CountGroup=cg,
Index=Weight/(0.01*Height)^2)
#df %>% print()
predict(globalenv()$b5,
df,
se.fit = T,
interval = "confidence",
level=0.999)[[1]] %>% return()
}
save(f,count.levels,action.levels,mrm,b5,file="entire_data.rdata")
runApp('RMbyMRMestimating')
runApp('RMbyMRMestimating')
library(shiny)
runApp('RMbyMRMestimating')
[]()
[]()
[]()
[]()
[]()
[]()
[]()
