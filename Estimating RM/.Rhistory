n14=nls(RM~100*MRM/(a[Action]+b*exp(-c[CountGroup]*Count))+d*(MRM/Index)^6,data,start = list(a=rep(52,3),b=42,c=rep(0.0555,3),d=0))
library(caret)
tr = trainControl(
method = "repeatedcv",
number = 10,
#p = 0.75,
repeats = 1,
verboseIter = T,
returnResamp = "all",
savePredictions = T,
summaryFunction = defaultSummary
)
d2=data %>% select(MRM,Count,Weight,Height,Index,Action,CountGroup,IndexGroup) %>%
mutate_all(as.numeric) %>%
mutate(pow=MRM*Count,add=(MRM/Index)^6)
d3=d2 %>% mutate(b5=predict(b5,data),n14=predict(n14,data))
mths=c("ridge","lasso","blassoAveraged","enet","monmlp")
tbm=c('blackboost','bstTree','rpart','rpart1SE','rpart2','ctree','xgbDART','xgbTree','M5','gbm','nodeHarvest')
mars=c('bagEarth','bagEarthGCV','earth','gcvEarth','brnn')
rf=c('cforest','parRF','qrf','ranger','rf','extraTrees','RRF','RRFglobal')
cvs=sapply(mths, function(ft){
t=Sys.time()
tt= train(
y=data$RM,
x = d3,
method = ft,
metric =  "RMSE",
maximize = FALSE,
trControl = tr
)
t=Sys.time()-t
return(list(value=tt$control$seeds[[1+10*1]],time=unclass(t)[[1]]))
})
print(cvs)
cvs
t(cvs)
cvs %>% tbl_df()
cvs %>% t() %>% tbl_df()
str(csv)
str(cvs)
cvs[[1]]
cvs[[2]]
cvs$dimnames
dimnames(cvs)
dim(cvs)
seq(3,dm[1]*dm[2],step=2)
dm=dim(cvs)
seq(3,dm[1]*dm[2],step=2)
seq(3,dm[1]*dm[2],by=2)
rs=c(cvs[[1]],cvs[[2]])
dm=dim(cvs)
for(i in seq(3,dm[1]*dm[2],by=2)){
rs=rbind(rs,c(cvs[[i]],cvs[[i+1]]))
}
dm=dimnames(cvs)
colnames(rs)=dm[[1]]
rownames(rs)=dm[[2]]
rs
rs %>% tbl_df()
rs %>% as.data.frame()
rs %>% as.data.frame() %>% as_tibble()
rs %<>% as.data.frame()
rs[order(rs$value,rs$time),]
cvs.print=function(method.array,n=10,reps=10){
tr = trainControl(
method = "repeatedcv",
number = n,
repeats = reps,
verboseIter = T,
returnResamp = "all",
savePredictions = T,
summaryFunction = defaultSummary
)
cvs=sapply(method.array, function(ft){
t=Sys.time()
tt= train(
y=data$RM,
x = d3,
method = ft,
metric =  "RMSE",
maximize = FALSE,
trControl = tr
)
t=Sys.time()-t
return(list(value=tt$control$seeds[[1+n*reps]],time=unclass(t)[[1]]))
})
rs=c(cvs[[1]],cvs[[2]])
dm=dim(cvs)
for(i in seq(3,dm[1]*dm[2],by=2)){
rs=rbind(rs,c(cvs[[i]],cvs[[i+1]]))
}
dm=dimnames(cvs)
colnames(rs)=dm[[1]]
rownames(rs)=dm[[2]]
rs %<>% as.data.frame()
rs[order(rs$value,rs$time),] %>% print()
}
cvs.print(tbm,10,1)
mars=c('bagEarth','bagEarthGCV','earth','gcvEarth','brnn')
cvs.print(mars,10,1)
rf=c('cforest','parRF','qrf','ranger','rf','extraTrees','RRF','RRFglobal')
cvs.print(rf,10,1)
unlink('Regression-model-for-estimating-RM_cache', recursive = TRUE)
ft = train(
y=data$RM,
x = d3,
method = "RRFglobal",
metric =  "RMSE",
maximize = FALSE,
trControl = trainControl(
method = "repeatedcv",
number = 10,
#p = 0.75,
repeats = 1,
verboseIter = F,
returnResamp = "all",
savePredictions = T,
summaryFunction = defaultSummary
)
)
ft = train(
y=data$RM,
x = d3,
method = "ridge",
metric =  "RMSE",
maximize = FALSE,
trControl = trainControl(
method = "repeatedcv",
number = 10,
#p = 0.75,
repeats = 1,
verboseIter = F,
returnResamp = "all",
savePredictions = T,
summaryFunction = defaultSummary
)
)
ft = train(
y=data$RM,
x = d3,
method = "ridge",
metric =  "RMSE",
maximize = FALSE,
trControl = trainControl(
method = "repeatedcv",
number = 10,
#p = 0.75,
repeats = 2,
verboseIter = F,
returnResamp = "all",
savePredictions = T,
summaryFunction = defaultSummary
)
)
ft = train(
y=data$RM,
x = d3,
method = "ridge",
metric =  "RMSE",
maximize = FALSE,
trControl = trainControl(
method = "repeatedcv",
number = 10,
#p = 0.75,
repeats = 2,
verboseIter = F,
returnResamp = "none",
savePredictions = T,
summaryFunction = defaultSummary
)
)
ft
ft$control$seeds
ft = train(
y=data$RM,
x = d3,
method = "ridge",
metric =  "RMSE",
maximize = FALSE,
trControl = trainControl(
method = "adaptive_cv",
number = 10,
#p = 0.75,
repeats = 2,
verboseIter = F,
returnResamp = "none",
savePredictions = T,
summaryFunction = defaultSummary
)
)
ft %>% predict(d3) %>% Show()
ft = train(
y=data$RM,
x = d3,
method = "ridge",
metric =  "RMSE",
maximize = FALSE,
trControl = trainControl(
method = "repeatedcv",
number = 10,
#p = 0.75,
repeats = 2,
verboseIter = F,
returnResamp = "none",
savePredictions = T,
summaryFunction = defaultSummary
)
)
ft$control$seeds
ft = train(
y=data$RM,
x = d3,
method = "ridge",
metric =  "RMSE",
maximize = FALSE,
trControl = trainControl(
method = "repeatedcv",
number = 10,
#p = 0.75,
repeats = 2,
verboseIter = F,
returnResamp = "none",
savePredictions = T,
summaryFunction = defaultSummary
)
)
ft$control$seeds
ft = train(
y=data$RM,
x = d3,
method = "xgbDART",
metric =  "RMSE",
maximize = FALSE,
trControl = trainControl(
method = "repeatedcv",
number = 10,
#p = 0.75,
repeats = 2,
verboseIter = F,
returnResamp = "none",
savePredictions = T,
summaryFunction = defaultSummary
)
)
ft$control$seeds[[1+10*2]]
ft %>% predict(d3) %>% Show()
ае
ft
plot(ft)
print(ft)
ft$results
ft$modelInfo
ft$metric
ft$control
ft$finalModel
save(ft,file="xgb.rdata")
View(d3)
tmp=d3[52,]
tmp
data$RM[52,]
data$RM[52]
ft %>% predict(tmp)
tmp$Count=3
ft %>% predict(tmp)
tmp
tmp$Count=2
ft %>% predict(tmp)
ft$control$seeds
ft = train(
y=data$RM,
x = d3,
method = "monmlp",
metric =  "RMSE",
maximize = FALSE,
trControl = trainControl(
method = "repeatedcv",
number = 10,
#p = 0.75,
repeats = 2,
verboseIter = F,
returnResamp = "none",
savePredictions = T,
summaryFunction = defaultSummary
)
)
ft$control$seeds[[1+10*2]]
ft = train(
y=data$RM,
x = d3,
method = "monmlp",
metric =  "RMSE",
maximize = FALSE,
trControl = trainControl(
method = "repeatedcv",
number = 10,
#p = 0.75,
repeats = 2,
verboseIter = F,
returnResamp = "none",
savePredictions = T,
summaryFunction = defaultSummary
)
)
ft$control$seeds[[1+10*2]]
names(caret::getModelInfo())
ls(ft)
ft$results$RMSE
ft$results
ft$finalModel
ft$results$RMSE
ft %>% predict(d3) %>% Show()
ft = train(
y=data$RM,
x = d3,
method = "enet",
metric =  "RMSE",
maximize = FALSE,
trControl = trainControl(
method = "repeatedcv",
number = 10,
#p = 0.75,
repeats = 2,
verboseIter = F,
returnResamp = "none",
savePredictions = T,
summaryFunction = defaultSummary
)
)
ft$results$RMSE
ft %>% predict(d3) %>% Show()
trtr=trainControl(
method = "repeatedcv",
number = 10,
#p = 0.75,
repeats = 2,
verboseIter = F,
returnResamp = "none",
savePredictions = T,
summaryFunction = defaultSummary
)
ft1 = train(
y=data$RM,
x = d3,
method = "enet",
metric =  "RMSE",
maximize = FALSE,
trControl = trtr
)
# 4.90
ft2 = train(
y=data$RM,
x = d3,
method = "ridge",
metric =  "RMSE",
maximize = FALSE,
trControl = trtr
)
#4.89
ft3 = train(
y=data$RM,
x = d3,
method = "lasso",
metric =  "RMSE",
maximize = FALSE,
trControl = trtr
)
results <- resamples(list(LVQ=ft1, GBM=ft2, SVM=ft3))
trtr=trainControl(
method = "repeatedcv",
number = 10,
#p = 0.75,
repeats = 2,
verboseIter = F,
returnResamp = "final",
savePredictions = T,
summaryFunction = defaultSummary
)
ft1 = train(
y=data$RM,
x = d3,
method = "enet",
metric =  "RMSE",
maximize = FALSE,
trControl = trtr
)
# 4.90
ft2 = train(
y=data$RM,
x = d3,
method = "ridge",
metric =  "RMSE",
maximize = FALSE,
trControl = trtr
)
#4.89
ft3 = train(
y=data$RM,
x = d3,
method = "lasso",
metric =  "RMSE",
maximize = FALSE,
trControl = trtr
)
results <- resamples(list(LVQ=ft1, GBM=ft2, SVM=ft3))
# summarize the distributions
summary(results)
# boxplots of results
bwplot(results)
# dot plots of results
dotplot(results)
results <- resamples(list('LVQ'=ft1, GBM=ft2, SVM=ft3))
# boxplots of results
bwplot(results)
results <- resamples(list('LVQ'=ft1, 'GBM'=ft2, 'SVM'=ft3))
# boxplots of results
bwplot(results)
results
cvs.print2=function(method.array,n=10,reps=10){
tr = trainControl(
method = "repeatedcv",
number = n,
repeats = reps,
verboseIter = F,
returnResamp = "final",
savePredictions = T,
summaryFunction = defaultSummary
)
aa=list()
cvs=for(ft in method.array){
aa[[ft]]= train(
y=data$RM,
x = d3,
method = ft,
metric =  "RMSE",
maximize = FALSE,
trControl = tr
)
}
results=resamples(aa)
# summarize the distributions
summary(results) %>% print()
# boxplots of results
bwplot(results)%>% print()
# dot plots of results
dotplot(results)%>% print()
}
rf=c('cforest','parRF','qrf','ranger','rf','extraTrees','RRF','RRFglobal')
cvs.print2(rf,10,1)
results <- resamples(list('LVQ'=ft1, 'GBM'=ft2, 'SVM'=ft3),modelNames = c("MAE","RMSE"))
# boxplots of results
bwplot(results)
# dot plots of results
dotplot(results)
results
str(results)
results <- resamples(list('LVQ'=ft1, 'GBM'=ft2, 'SVM'=ft3),metrics = c("MAE","RMSE"))
# dot plots of results
dotplot(results)
с('blassoAveraged','earth','bagEarthGCV','M5','bagEarth','gcvEarth','ridge','enet','monmlp','lasso','brnn')
c('blassoAveraged','earth','bagEarthGCV','M5','bagEarth','gcvEarth','ridge','enet','monmlp','lasso','brnn')
trtr=trainControl(
method = "repeatedcv",
number = 10,
#p = 0.75,
repeats = 2,
verboseIter = F,
returnResamp = "final",
savePredictions = T,
summaryFunction = defaultSummary
)
ft1 = train(
y=data$RM,
x = d3,
method = "bagEarthGCV",
metric =  "RMSE",
maximize = FALSE,
trControl = trtr
)
ft %>% predict(d3) %>% Show()
ft1 = train(
y=data$RM,
x = d3,
method = "bagEarthGCV",
metric =  "RMSE",
maximize = FALSE,
trControl = trtr,
tuneLength = 20
)
ft %>% predict(d3) %>% Show()
ft1 %>% predict(d3) %>% Show()
modelLookup("bagEarthGCV")
ft1 = train(
y=data$RM,
x = d3,
method = "bagEarthGCV",
metric =  "RMSE",
maximize = FALSE,
trControl = trtr,
tuneLength = 40
)
ft1 %>% predict(d3) %>% Show()
modelLookup("M5")
ft1 = train(
y=data$RM,
x = d3,
method = "M5",
metric =  "RMSE",
maximize = FALSE,
trControl = trtr,
tuneLength = 20
)
ft1 %>% predict(d3) %>% Show()
