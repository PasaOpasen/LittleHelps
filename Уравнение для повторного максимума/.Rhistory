theme_bw()
ggplot(tb,aes(x=d,y=val))+
geom_hline(yintercept = 141,size=1.,linetype="dashed",alpha=0.8)+
geom_hline(yintercept = vc[length(vc)],size=1.,linetype="dashed",alpha=0.8)+
geom_xspline(size=1,spline_shape = -0.3,linetype="dotdash",col="green",alpha=0.9)+
geom_point(aes(col=day),size=4)+
annotate("text", x = 21, y = 141.7, label = "Начальные результаты") +
annotate("text", x = 17, y = 155.7, label = "Итоговые результаты") +
annotate("text", x = tb$d+0.4, y = tb$val-ifelse(seq(tb$d)%%8!=0,0.8,0.3), label = lb) +
labs(title='Динамика простого цикла (три прохода)',
subtitle="Использование модели помогает отследить прогрессию нагрузок",
x="Номер тренировки",
y="Требуемое усилие",
caption="Не используйте такой цикл больше 2-3 проходов подряд, он может привести к перетренированности") +
guides(color=guide_legend(title="Тип дня"))+
theme_bw()
ggplot(tb,aes(x=d,y=val))+
geom_hline(yintercept = 141,size=1.,linetype="dashed",alpha=0.8)+
geom_hline(yintercept = vc[length(vc)],size=1.,linetype="dashed",alpha=0.8)+
geom_xspline(size=1,spline_shape = -0.3,linetype="dotdash",col="green",alpha=0.9)+
geom_point(aes(col=day),size=4)+
annotate("text", x = 21, y = 141.7, label = "Начальные результаты") +
annotate("text", x = 17, y = 155.7, label = "Итоговые результаты") +
annotate("text", x = tb$d+0.4, y = tb$val-ifelse(seq(tb$d)%%8!=0,0.8,0.3), label = lb) +
labs(title='Динамика простого цикла (три прохода)',
subtitle="Использование модели помогает отследить прогрессию нагрузок",
x="Номер тренировки",
y="Требуемое усилие",
caption="Не используйте такой цикл больше 2-3 проходов подряд, он может привести к перетренированности") +
guides(color=guide_legend(title="Тип дня"))+
theme_bw()+ guides(color=FALSE)
#Загрузка данных####
library(tidyverse)
library(magrittr)
library(ggformula)
data=read_tsv("data.tsv",
skip=1,col_names = F,na="",
col_types = "fddnfffnnnff"
) %>% tbl_df()
colnames(data)=c("Date","SM","Val","Count","Type","Sex","Experience","Age","Weight","High","Body","Mail")
data %<>% mutate(CountGroup=cut(Count,breaks = c(1,3,6,9,12,20,30)),ValCoef=Val/Weight,SMcoef=SM/Weight)
allrows=1:nrow(data)
#Функция ошибок####
Error=function(target,weight)
{
s=(target-weight)^2 %>% sum()
return(sqrt(s/length(weight)))
}
Show=function(model,df=data){
vals=predict(model,df)
cbind(value=vals,Target=df$SM,
ERROR=abs(df$SM-vals),
ErrorPercent=abs(df$SM-vals)/df$SM*100,
df[,c(3:11,13)]) %>% tbl_df()%>% arrange(ERROR,ErrorPercent,Count,Weight) %>% print()
cat("\n")
rg=range(df$SM-vals)
if(rg[1]<0)cat("-------------------> Наибольшая ошибка в большую сторону:",-rg[1],"\n")
if(rg[2]>0)cat("-------------------> Наибольшая ошибка в меньшую сторону:",rg[2],"\n")
cat("-------------------> Среднеквадратичная ошибка:",Error(vals,df$SM),"\n")
}
#начальная
Show(data$Val*(1+0.0333*data$Count))
Show=function(vals,df=data){
#vals=predict(model,df)
cbind(value=vals,Target=df$SM,
ERROR=abs(df$SM-vals),
ErrorPercent=abs(df$SM-vals)/df$SM*100,
df[,c(3:11,13)]) %>% tbl_df()%>% arrange(ERROR,ErrorPercent,Count,Weight) %>% print()
cat("\n")
rg=range(df$SM-vals)
if(rg[1]<0)cat("-------------------> Наибольшая ошибка в большую сторону:",-rg[1],"\n")
if(rg[2]>0)cat("-------------------> Наибольшая ошибка в меньшую сторону:",rg[2],"\n")
cat("-------------------> Среднеквадратичная ошибка:",Error(vals,df$SM),"\n")
}
#оптимизация чисто коэффициента c поправкой на его группу
md=lm(I(SM/Val-1)~Val:Count:CountGroup,data)
summary(md)
Show((predict(md,data %>% select(Val,Count,CountGroup))+1)*data$Val)
install.packages("boot")
#оптимизация чисто коэффициента c поправкой на его группу
md=lm(I(SM/Val-1)~Val:Count:CountGroup,data)
summary(md)
Show((predict(md,data %>% select(Val,Count,CountGroup))+1)*data$Val)
boot::cv.glm(data, md, K = 5)
#оптимизация чисто коэффициента c поправкой на его группу
md=lm(I(SM/Val-1)~Val:Count:CountGroup,data)
summary(md)
Show((predict(md,data %>% select(Val,Count,CountGroup))+1)*data$Val)
boot::cv.glm(data=data, md, K = 5)
boot::cv.glm(data=data, md, K = 7)
boot::cv.glm(data=data, glmfit=md)
boot::cv.glm(data=data, glmfit=md,K=2)
boot::cv.glm(data=data, glmfit=md,K=16)
boot::cv.glm(data=data, glmfit=md,K=19)
boot::cv.glm(data=data, glmfit=md,K=n)
#оптимизация чисто коэффициента c поправкой на его группу
md=glm(I(SM/Val-1)~Val:Count:CountGroup,data)
#оптимизация чисто коэффициента c поправкой на его группу
md=glm(I(SM/Val-1)~Val:Count:CountGroup,data=data)
#оптимизация чисто коэффициента c поправкой на его группу
md=glm(I(SM/Val-1)~Val:Count:CountGroup,data,family="gaussian")
#оптимизация чисто коэффициента c поправкой на его группу
md=lm(I(SM/Val-1)~Val:Count:CountGroup,data)
#оптимизация чисто коэффициента c поправкой на его группу
md=lm(I(SM/Val-1)~Val:Count:CountGroup,data)
#Загрузка данных####
library(tidyverse)
library(magrittr)
library(ggformula)
data=read_tsv("data.tsv",
skip=1,col_names = F,na="",
col_types = "fddnfffnnnff"
) %>% tbl_df()
colnames(data)=c("Date","SM","Val","Count","Type","Sex","Experience","Age","Weight","High","Body","Mail")
data %<>% mutate(CountGroup=cut(Count,breaks = c(1,3,6,9,12,20,30)),ValCoef=Val/Weight,SMcoef=SM/Weight)
allrows=1:nrow(data)
#Функция ошибок####
Error=function(target,weight)
{
s=(target-weight)^2 %>% sum()
return(sqrt(s/length(weight)))
}
Show=function(vals,df=data){
#vals=predict(model,df)
cbind(value=vals,Target=df$SM,
ERROR=abs(df$SM-vals),
ErrorPercent=abs(df$SM-vals)/df$SM*100,
df[,c(3:11,13)]) %>% tbl_df()%>% arrange(ERROR,ErrorPercent,Count,Weight) %>% print()
cat("\n")
rg=range(df$SM-vals)
if(rg[1]<0)cat("-------------------> Наибольшая ошибка в большую сторону:",-rg[1],"\n")
if(rg[2]>0)cat("-------------------> Наибольшая ошибка в меньшую сторону:",rg[2],"\n")
cat("-------------------> Среднеквадратичная ошибка:",Error(vals,df$SM),"\n")
}
#начальная
Show(data$Val*(1+0.0333*data$Count))
md=lm(I(SM/Val-1)~Val:Count:CountGroup,data)
summary(md)
Show((predict(md,data %>% select(Val,Count,CountGroup))+1)*data$Val)
boot::cv.glm(data=data, glmfit=md,K=n)
boot::cv.glm(data=data, glmfit=md,K=6)
colnames(data)=c("Date","SM","Val","Count","Type","Sex","Experience","Age","Weight","High","Body","Mail")
data %<>% mutate(CountGroup=cut(Count,breaks = c(1,3,6,9,12,20)))
allrows=1:nrow(data)
data=read_tsv("data.tsv",
skip=1,col_names = F,na="",
col_types = "fddnfffnnnff"
) %>% tbl_df()
colnames(data)=c("Date","SM","Val","Count","Type","Sex","Experience","Age","Weight","High","Body","Mail")
data %<>% mutate(CountGroup=cut(Count,breaks = c(1,3,6,9,12,20)))
allrows=1:nrow(data)
View(data)
data %<>% mutate(CountGroup=cut(Count,breaks = c(1,3,6,12,20,30)))
View(data)
data %<>% mutate(CountGroup=cut(Count,breaks = c(1,3,6,12,20,30)))%>% select(-Date,-Mail)
View(data)
levels(data$CountGroup)
levels(data$CountGroup)=c("2-3","4-6","7-12","13-20",">20")
View(data)
summary(data)
psych::describe(data)
pairs(data)
GGally::ggpairs(data)
GGally::ggpairs(data%>% select(-Count))
GGally::ggpairs(data%>% select(-Count),title="Графики взаимодействий между переменными в выборке",
lower = list(continuous = "points", combo = "dot_no_facet"))
data %<>%select(-Age,-Experience)
GGally::ggpairs(data%>% select(-Count),title="Графики взаимодействий между переменными в выборке",
lower = list(continuous = "points", combo = "dot_no_facet"))
GGally::ggpairs(data%>% select(-Count),title="Графики взаимодействий между переменными в выборке",
lower = list(continuous = "points", combo = "facethist"))
GGally::ggpairs(data%>% select(-Count),title="Графики взаимодействий между переменными в выборке",
lower = list(continuous = "points", combo = "denstrip"))
GGally::ggpairs(data%>% select(-Count),title="Графики взаимодействий между переменными в выборке",
lower = list(continuous = "points", combo = "blank"))
obj=ggplot(data %>% select(-Count))+theme_bw()
obj+geom_bar(aes(x=CountGroup))
obj+geom_boxplot(aes(x=CountGroup))
obj+geom_boxplot(aes(x=CountGroup,y=SM/Val))
obj+geom_boxplot(aes(x=CountGroup,y=SM/Val))+
labs(title = "",x="Диапазон повторений",y="Отношение повторного максимума к многоповторному",caption = "")
obj+geom_boxplot(aes(x=CountGroup,y=SM/Val))+
labs(title = "Отношение повторного максимума к многоповторному в зависимости от числа повторений",
x="Диапазон повторений",y="Отношение повторного максимума к многоповторному",
caption = "Каждый диапазон повторений действует по своим законам и нуждается в собственной версии модели")+
theme_classic()
obj+geom_boxplot(aes(x=CountGroup,y=SM/Val))+
labs(title = "Отношение повторного максимума к многоповторному в зависимости от числа повторений",
x="Диапазон повторений",y="Отношение повторного максимума к многоповторному",
caption = "Каждый диапазон повторений действует по своим законам \n и нуждается в собственной версии модели")+
theme_classic()
obj+geom_boxplot(aes(x=CountGroup,y=SM/Val))+
labs(title = "Отношение повторного максимума к многоповторному в зависимости от числа повторений",
x="Диапазон повторений",y="Отношение повторного максимума к многоповторному",
caption = "Каждый диапазон повторений действует по своим законам \n и нуждается в собственной версии модели")+
theme_dark()
obj+geom_boxplot(aes(x=CountGroup,y=SM/Val))+
labs(title = "Отношение повторного максимума к многоповторному в зависимости от числа повторений",
x="Диапазон повторений",y="Отношение повторного максимума к многоповторному",
caption = "Каждый диапазон повторений действует по своим законам \n и нуждается в собственной версии модели")+
theme_get()
obj+geom_boxplot(aes(x=CountGroup,y=SM/Val))+
labs(title = "Отношение повторного максимума к многоповторному в зависимости от числа повторений",
x="Диапазон повторений",y="Отношение повторного максимума к многоповторному",
caption = "Каждый диапазон повторений действует по своим законам \n и нуждается в собственной версии модели")+
theme_replace()
obj+geom_boxplot(aes(x=CountGroup,y=SM/Val))+
labs(title = "Отношение повторного максимума к многоповторному в зависимости от числа повторений",
x="Диапазон повторений",y="Отношение повторного максимума к многоповторному",
caption = "Каждый диапазон повторений действует по своим законам \n и нуждается в собственной версии модели")+
theme_update()
install.packages("ggthemes")
obj+geom_boxplot(aes(x=CountGroup,y=SM/Val))+
labs(title = "Отношение повторного максимума к многоповторному в зависимости от числа повторений",
x="Диапазон повторений",y="Отношение повторного максимума к многоповторному",
caption = "Каждый диапазон повторений действует по своим законам \n и нуждается в собственной версии модели")+
theme_tq()
library(ggthemes)
obj+geom_boxplot(aes(x=CountGroup,y=SM/Val))+
labs(title = "Отношение повторного максимума к многоповторному в зависимости от числа повторений",
x="Диапазон повторений",y="Отношение повторного максимума к многоповторному",
caption = "Каждый диапазон повторений действует по своим законам \n и нуждается в собственной версии модели")+
theme_tq()
library(tidyquant)
install.packages("tidyquant")
obj+geom_boxplot(aes(x=CountGroup,y=SM/Val))+
labs(title = "Отношение повторного максимума к многоповторному в зависимости от числа повторений",
x="Диапазон повторений",y="Отношение повторного максимума к многоповторному",
caption = "Каждый диапазон повторений действует по своим законам \n и нуждается в собственной версии модели")+
theme_tq()
library(tidyquant)
obj+geom_boxplot(aes(x=CountGroup,y=SM/Val))+
labs(title = "Отношение повторного максимума к многоповторному в зависимости от числа повторений",
x="Диапазон повторений",y="Отношение повторного максимума к многоповторному",
caption = "Каждый диапазон повторений действует по своим законам \n и нуждается в собственной версии модели")+
theme_tq()
library(ggvis)
data %>% ggvis(x=:~CountGroup,y:=~SM/Val) %>% layer_boxplots()
library(ggvis)
data %>% ggvis(x:=~CountGroup,y:=~SM/Val) %>% layer_boxplots()
View(data)
bx=obj+geom_boxplot(aes(x=CountGroup,y=SM/Val))+
labs(title = "Отношение повторного максимума к многоповторному в зависимости от числа повторений",
x="Диапазон повторений",y="Отношение повторного максимума к многоповторному",
caption = "Каждый диапазон повторений действует по своим законам \n и нуждается в собственной версии модели")+
theme_tq()
bx+facet_grid(~Body)
bx+facet_grid(~Body)+theme_bw()
bx+facet_grid(~Body)+theme_bw()+labs(x="x")
bx+facet_grid(~Type)+theme_bw()+labs(caption="caption")
bx+facet_grid(~Sex)+theme_bw()+labs(caption="caption")
getPIE=function(vec,main=""){
ln=length(levels(vec))
x=numeric(ln)
ns=character(ln)
for(i in seq(ln)){
x[i]=sum(vec==levels(vec)[i])/length(vec)
ns[i]=paste0(levels(vec)[i]," (",round(x[i]*100,2),"%)")
}
pie(x=x,labels=ns,main=main)
}
getPIE(data$Body)
getPIE(data$CountGroup)
getPIE(data$Experience)
getPIE(factor(data$Count))
data=read_tsv("data.tsv",
skip=1,col_names = F,na="",
col_types = "fddnfffnnnff"
) %>% tbl_df()
colnames(data)=c("Date","SM","Val","Count","Type","Sex","Experience","Age","Weight","High","Body","Mail")
data %<>% mutate(
CountGroup=cut(Count,breaks = c(1,3,6,12,20,30),labels = c("2-3","4-6","7-12","13-20",">20"))
)%>% select(-Date,-Mail)
levels(data$CountGroup)=
allrows=1:nrow(data
)
View(data)
getPIE(data$Sex)
data %<>%select(-Age,-Experience)
pairs(data %>% select(-Count))
GGally::ggpairs(data%>% select(-Count),title="Диаграмы взаимодействий между переменными в выборке",
lower = list(continuous = "points", combo = "blank"))
GGally::ggpairs(data%>% select(-Count),title="Диаграмы взаимодействий между переменными в выборке",
lower = list(continuous = "density", combo = "blank"))
GGally::ggpairs(data%>% select(-Count),title="Диаграмы взаимодействий между переменными в выборке",
lower = list(continuous = "cor", combo = "blank",discrete="facetbar"))
GGally::ggpairs(data%>% select(-Count),title="Диаграмы взаимодействий между переменными в выборке",
lower = list(continuous = "smooth_loess", combo = "blank",discrete="ratio"))
GGally::ggpairs(data%>% select(-Count),title="Диаграмы взаимодействий между переменными в выборке",
lower = list(continuous = "smooth_loess", combo = "box",discrete="blank"))
GGally::ggpairs(data%>% select(-Count),title="Диаграмы взаимодействий между переменными в выборке",
lower = list(continuous = "smooth_loess", combo = "box",discrete="ratio"))
GGally::ggpairs(data%>% select(-Count),title="Диаграмы взаимодействий между переменными в выборке",
lower = list(continuous = "smooth_loess", combo = "box"))
library(tidyverse)
library(magrittr)
library(ggformula)
library(ggalt)
#простой цикл####
mx=function(vals,count){
t=vals*(1+0.0333*count)
t[count==1]=vals[count==1]
s=t[length(t)]*(1+runif(1,0.,0.005))
return(c(t,s))
}
x=c(100,120,115,105,130,120,125)
y=c(10,4,6,10,3,6,5)
vc=c(mx(x,y),mx(x+4,y),mx(x+9,y))
lb=paste0(c(x,vc[8],x+4,vc[16],x+9,vc[24]) %>% round(),"x",c(y,1,y,1,y,1))
tb=tibble(d=1:length(vc),val=vc) %>% mutate(day=factor(ifelse(d%%(length(x)+1)==0,"проходка","тренировка")))
ggplot(tb,aes(x=d,y=val))+
geom_hline(yintercept = 141,size=1.,linetype="dashed",alpha=0.8)+
geom_hline(yintercept = vc[length(vc)],size=1.,linetype="dashed",alpha=0.8)+
geom_xspline(size=1,spline_shape = -0.3,linetype="dotdash",col="green",alpha=0.9)+
geom_point(aes(col=day),size=4)+
annotate("text", x = 21, y = 141.7, label = "Начальные результаты") +
annotate("text", x = 17, y = 155.7, label = "Итоговые результаты") +
annotate("text", x = tb$d+0.4, y = tb$val-ifelse(seq(tb$d)%%8!=0,0.8,0.3), label = lb) +
labs(title='Динамика простого цикла (три прохода)',
subtitle="Использование модели помогает отследить прогрессию нагрузок",
x="Номер тренировки",
y="Требуемое усилие",
caption="Не используйте такой цикл больше 2-3 проходов подряд, он может привести к перетренированности") +
guides(color=guide_legend(title="Тип дня"))+
theme_bw()+theme(legend.position = c(0.85,0.25))#+ guides(color=FALSE)
ggplot(tb,aes(x=d,y=val))+
geom_hline(yintercept = 141,size=1.,linetype="dashed",alpha=0.8)+
geom_hline(yintercept = vc[length(vc)],size=1.,linetype="dashed",alpha=0.8)+
geom_xspline(size=1,spline_shape = -0.3,linetype="dotdash",col="green",alpha=0.9)+
geom_point(aes(col=day),size=4)+
annotate("text", x = 21, y = 141.7, label = "Начальные результаты") +
annotate("text", x = 17, y = 155.7, label = "Итоговые результаты") +
annotate("text", x = tb$d+0.4, y = tb$val-ifelse(seq(tb$d)%%8!=0,0.8,0.3), label = lb) +
labs(title='Динамика простого цикла (три прохода)',
subtitle="Использование модели помогает отследить прогрессию нагрузок",
x="Номер тренировки",
y="Требуемое усилие",
caption="Не используйте такой цикл больше 2-3 проходов подряд, он может привести к перетренированности") +
guides(color=guide_legend(title="Тип дня"))+
theme_bw()+theme(legend.position = c(0.9,0.2))#+ guides(color=FALSE)
ggplot(tb,aes(x=d,y=val))+
geom_hline(yintercept = 141,size=1.,linetype="dashed",alpha=0.8)+
geom_hline(yintercept = vc[length(vc)],size=1.,linetype="dashed",alpha=0.8)+
geom_xspline(size=1,spline_shape = -0.3,linetype="dotdash",col="green",alpha=0.9)+
geom_point(aes(col=day),size=4)+
annotate("text", x = 21, y = 141.7, label = "Начальные результаты") +
annotate("text", x = 17, y = 155.7, label = "Итоговые результаты") +
annotate("text", x = tb$d+0.4, y = tb$val-ifelse(seq(tb$d)%%8!=0,0.8,0.3), label = lb) +
labs(title='Динамика простого цикла (три прохода)',
subtitle="Использование модели помогает отследить прогрессию нагрузок",
x="Номер тренировки",
y="Требуемое усилие",
caption="Не используйте такой цикл больше 2-3 проходов подряд, он может привести к перетренированности") +
guides(color=guide_legend(title="Тип дня"))+
theme_bw()+theme(legend.position = c(0.85,0.15))#+ guides(color=FALSE)
#Загрузка данных####
library(tidyverse)
library(magrittr)
library(ggformula)
library(ggthemes)
library(tidyquant)
library(ggvis)
data=read_tsv("data.tsv",
skip=1,col_names = F,na="",
col_types = "fddnfffnnnff"
) %>% tbl_df()
colnames(data)=c("Date","SM","Val","Count","Type","Sex","Experience","Age","Weight","High","Body","Mail")
data %<>% mutate(
CountGroup=cut(Count,breaks = c(1,3,6,12,20,30))
)%>% select(-Date,-Mail)
levels(data$CountGroup)=c("2-3","4-6","7-12","13-20",">20")
allrows=1:nrow(data)
data%>% filter(Sex=="Мужчина") %>%select(Body)
data%>% filter(Sex=="Мужчина") %>%select(Body) %>% table()
chisq.test(data%>% filter(Sex=="Мужчина") %>%select(Body) %>% table())
prop.test(data%>% filter(Sex=="Мужчина") %>%select(Body) %>% table())
data %<>%select(-Age,-Experience)
pairs(data %>% select(-Count))
GGally::ggpairs(data%>% select(-Count),title="Диаграмы взаимодействий между переменными в выборке",
lower = list(continuous = "smooth_loess", combo = "box"))
#оптимизация чисто коэффициента c поправкой на его группу
md=lm(I(SM/Val-1)~Val:Count:CountGroup,data)
summary(md)
Show((predict(md,data %>% select(Val,Count,CountGroup))+1)*data$Val)
boot::cv.glm(data=data, glmfit=md,K=6)
#Функция ошибок####
Error=function(target,weight)
{
s=(target-weight)^2 %>% sum()
return(sqrt(s/length(weight)))
}
Show=function(vals,df=data){
#vals=predict(model,df)
cbind(value=vals,Target=df$SM,
ERROR=abs(df$SM-vals),
ErrorPercent=abs(df$SM-vals)/df$SM*100,
df[,c(3:11,13)]) %>% tbl_df()%>% arrange(ERROR,ErrorPercent,Count,Weight) %>% print()
cat("\n")
rg=range(df$SM-vals)
if(rg[1]<0)cat("-------------------> Наибольшая ошибка в большую сторону:",-rg[1],"\n")
if(rg[2]>0)cat("-------------------> Наибольшая ошибка в меньшую сторону:",rg[2],"\n")
cat("-------------------> Среднеквадратичная ошибка:",Error(vals,df$SM),"\n")
}
#оптимизация чисто коэффициента c поправкой на его группу
md=lm(I(SM/Val-1)~Val:Count:CountGroup,data)
summary(md)
Show((predict(md,data %>% select(Val,Count,CountGroup))+1)*data$Val)
#начальная
Show(data$Val*(1+0.0333*data$Count))
#Функция ошибок####
Error=function(target,weight)
{
s=(target-weight)^2 %>% sum()
return(sqrt(s/length(weight)))
}
Show=function(vals,df=data){
#vals=predict(model,df)
cbind(value=vals,Target=df$SM,
ERROR=abs(df$SM-vals),
ErrorPercent=abs(df$SM-vals)/df$SM*100,
df[,c(3:11,13)]) %>% tbl_df()%>% arrange(ERROR,ErrorPercent,Count,Weight) %>% print()
cat("\n")
rg=range(df$SM-vals)
if(rg[1]<0)cat("-------------------> Наибольшая ошибка в большую сторону:",-rg[1],"\n")
if(rg[2]>0)cat("-------------------> Наибольшая ошибка в меньшую сторону:",rg[2],"\n")
cat("-------------------> Среднеквадратичная ошибка:",Error(vals,df$SM),"\n")
}
#начальная
Show(data$Val*(1+0.0333*data$Count))
#Загрузка данных####
library(tidyverse)
library(magrittr)
library(ggformula)
library(ggthemes)
library(tidyquant)
library(ggvis)
data=read_tsv("data.tsv",
skip=1,col_names = F,na="",
col_types = "fddnfffnnnff"
) %>% tbl_df()
colnames(data)=c("Date","SM","Val","Count","Type","Sex","Experience","Age","Weight","High","Body","Mail")
data %<>% mutate(
CountGroup=cut(Count,breaks = c(1,3,6,12,20,30))
)%>% select(-Date,-Mail)
levels(data$CountGroup)=c("2-3","4-6","7-12","13-20",">20")
allrows=1:nrow(data)
#Функция ошибок####
Error=function(target,weight)
{
s=(target-weight)^2 %>% sum()
return(sqrt(s/length(weight)))
}
Show=function(vals,df=data){
#vals=predict(model,df)
cbind(value=vals,Target=df$SM,
ERROR=abs(df$SM-vals),
ErrorPercent=abs(df$SM-vals)/df$SM*100,
df[,c(3:11,13)]) %>% tbl_df()%>% arrange(ERROR,ErrorPercent,Count,Weight) %>% print()
cat("\n")
rg=range(df$SM-vals)
if(rg[1]<0)cat("-------------------> Наибольшая ошибка в большую сторону:",-rg[1],"\n")
if(rg[2]>0)cat("-------------------> Наибольшая ошибка в меньшую сторону:",rg[2],"\n")
cat("-------------------> Среднеквадратичная ошибка:",Error(vals,df$SM),"\n")
}
#начальная
Show(data$Val*(1+0.0333*data$Count))
View(data)
View(data)
#Функция ошибок####
Error=function(target,weight)
{
s=(target-weight)^2 %>% sum()
return(sqrt(s/length(weight)))
}
Show=function(vals,df=data){
#vals=predict(model,df)
cbind(value=vals,Target=df$SM,
ERROR=abs(df$SM-vals),
ErrorPercent=abs(df$SM-vals)/df$SM*100,
df[,c(3:11)]) %>% tbl_df()%>% arrange(ERROR,ErrorPercent,Count,Weight) %>% print()
cat("\n")
rg=range(df$SM-vals)
if(rg[1]<0)cat("-------------------> Наибольшая ошибка в большую сторону:",-rg[1],"\n")
if(rg[2]>0)cat("-------------------> Наибольшая ошибка в меньшую сторону:",rg[2],"\n")
cat("-------------------> Среднеквадратичная ошибка:",Error(vals,df$SM),"\n")
}
#начальная
Show(data$Val*(1+0.0333*data$Count))
#оптимизация чисто коэффициента c поправкой на его группу
md=lm(I(SM/Val-1)~Val:Count:CountGroup,data)
summary(md)
#надо глянуть это:
md=lm(I(SM/Val-1)~Count:CountGroup,data)
summary(md)
md=lm(I(SM-Val)~Val:Count:CountGroup,data)
summary(md)
#Val+Val*Count с поправкой на группу
md=lm(SM~Val:Count:CountGroup+Val:CountGroup-1,data)
summary(md)
md=lm(SM~Val-1+Val:Count:CountGroup,data)
summary(md)
md=lm(I(SM/Val-1)~Val:Count:CountGroup-1,data)
summary(md)
Show((predict(md,data %>% select(Val,Count,CountGroup))+1)*data$Val)
md=lm(SM~Val+Val:Count:CountGroup-1,data)
summary(md)
Show(predict(md,data[3:4]))
Show(predict(md,data %>% select(Val,Count,CountGroup)))
car::vif(md)
#Val+Val*Count с поправкой на группу
md=lm(SM~Val:Count:CountGroup+Val:CountGroup-1,data)
car::vif(md)
