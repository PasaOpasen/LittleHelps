IndexGroup=cut(Index,breaks = c(0,18.5,25,30,35,40))
)%>% select(-Date)#,-Mail) %>% filter(Count>1,Val<SM)
levels(data$CountGroup)=c("2-3","4-6","7-10","11-20",">20")
levels(data$AgeGroup)=c("<20","20-27","28-35",">35")
ex=data$Experience %>% as.numeric()
ex[ex==6]=5
ex %<>%factor()
levels(ex)=c("До двух лет","2-3 года","4-5 лет","6-10 лет","больше 10 лет")
data %<>%mutate(Experience=factor(ex,ordered = T))
allrows=1:nrow(data)
maxerror=2
summary(data)
View(data)
#Загрузка данных####
library(tidyverse)
library(magrittr)
library(ggformula)
library(ggthemes)
library(tidyquant)
library(ggvis)
library(plotrix)
library(car)
#library(DAAG)
library(leaps)
data=read_tsv("data.tsv",
skip=1,col_names = F,na="",
col_types = "fddnfffnnnff",
comment="#"
) %>% tbl_df()
colnames(data)=c("Date","SM","Val","Count","Type","Sex","Experience","Age","Weight","High","Body","Mail")
data %<>%#filter(Count<=20) %>%
arrange(Val,Count,Weight) %>%  mutate(
CountGroup=cut(Count,breaks = c(1,3,6,10,20,40)),
AgeGroup=cut(Age,breaks = c(1,19,27,35,70)),
Experience=factor(Experience,levels = c("До двух лет","2-3 года","4-5 лет","6-10 лет","11-15 лет" ,"больше 15 лет"),ordered = T),
Index=Weight/(0.01*High)^2,
IndexGroup=cut(Index,breaks = c(0,16,18.5,24.99,30,35,40,60))
)%>% select(-Date)#,-Mail) %>% filter(Count>1,Val<SM)
levels(data$CountGroup)=c("2-3","4-6","7-10","11-20",">20")
levels(data$AgeGroup)=c("<20","20-27","28-35",">35")
levels(data$IndexGroup)=c("выраженный дефицит","дефицит","норма","избыток","ожирение1","ожирение2","ожирение3")
ex=data$Experience %>% as.numeric()
ex[ex==6]=5
ex %<>%factor()
levels(ex)=c("До двух лет","2-3 года","4-5 лет","6-10 лет","больше 10 лет")
data %<>%mutate(Experience=factor(ex,ordered = T))
allrows=1:nrow(data)
maxerror=2
summary(data)
data %$%  table(Body,IndexGroup)
GGally::ggpairs(data%>% select(-Count),title="Диаграмы взаимодействий между переменными в выборке",
lower = list(continuous = "smooth_loess", combo = "box"))
GGally::ggpairs(data%>% select(-Count,-Mail),title="Диаграмы взаимодействий между переменными в выборке",
lower = list(continuous = "smooth_loess", combo = "box"))
data %>% ggplot(aes(x=Val,y=SM,col=CountGroup))+geom_line()+geom_smooth()+theme_bw()
data %>% ggplot(aes(x=Val,y=SM,col=CountGroup))+geom_point()+geom_smooth()+theme_bw()
data %>% ggplot(aes(x=Val,y=SM))+geom_point(aes(col=CountGroup),size=2)+geom_smooth()+theme_bw()
data %>% ggplot(aes(x=Val,y=SM))+geom_smooth()+geom_point(aes(col=CountGroup),size=3)+theme_bw()
#Загрузка данных####
library(tidyverse)
library(magrittr)
library(ggformula)
library(ggthemes)
library(tidyquant)
library(ggvis)
library(plotrix)
library(car)
#library(DAAG)
library(leaps)
data=read_tsv("data.tsv",
skip=1,col_names = F,na="",
col_types = "fddnfffnnnff",
comment="#"
) %>% tbl_df()
colnames(data)=c("Date","SM","Val","Count","Type","Sex","Experience","Age","Weight","High","Body","Mail")
data %<>%#filter(Count<=20) %>%
arrange(Val,Count,Weight) %>%  mutate(
CountGroup=cut(Count,breaks = c(1,3,6,10,20,40)),
AgeGroup=cut(Age,breaks = c(1,19,27,35,70)),
Experience=factor(Experience,levels = c("До двух лет","2-3 года","4-5 лет","6-10 лет","11-15 лет" ,"больше 15 лет"),ordered = T),
Index=Weight/(0.01*High)^2,
IndexGroup=cut(Index,breaks = c(0,16,18.5,24.99,30,35,40,60))
)%>% select(-Date)#,-Mail) %>% filter(Count>1,Val<SM)
levels(data$CountGroup)=c("2-3","4-6","7-10","11-20",">20")
levels(data$AgeGroup)=c("<20","20-27","28-35",">35")
levels(data$IndexGroup)=c("выраженный дефицит","дефицит","норма","избыток","ожирение1","ожирение2","ожирение3")
ex=data$Experience %>% as.numeric()
ex[ex==6]=5
ex %<>%factor()
levels(ex)=c("До двух лет","2-3 года","4-5 лет","6-10 лет","больше 10 лет")
data %<>%mutate(Experience=factor(ex,ordered = T))
allrows=1:nrow(data)
maxerror=2
data %$%  table(Body,IndexGroup)
getparam=function(vec){
ln=length(levels(vec))
x=numeric(ln)
ns=character(ln)
for(i in seq(ln)){
x[i]=sum(vec==levels(vec)[i])/length(vec)
ns[i]=paste0(levels(vec)[i]," (",round(x[i]*100,2),"%)")
}
return(list(x=x,ns=ns))
}
getPIE=function(vec,main=""){
lst=getparam(vec)
pie(x=lst$x,labels=lst$ns,main=main)
}
getFan=function(vec,main=""){
pr=getparam(vec)
fan.plot(pr$x,labels=pr$ns,main=main)
}
View(data)
dt=data %>% select(Weight,High,Body,Experience,Sex)
dt %>% unique()
length(dt)
nrow(dt)
nrow(dt %>% unique())
#уникальные записи (где один от каждого человека берётся только одна запись)
data.unique=data %>% select(Weight,High,Body,Experience,Sex) %>% unique()
#уникальные записи (где один от каждого человека берётся только одна запись)
data.unique=data %>% select(Weight,High,Body,Experience,Sex,IndexGroup) %>% unique()
data.unique %$%  table(Body,IndexGroup)
getPIE(data.unique$Body,main = "Телосложение испытуемых")
chisq.test(data.unique%>% filter(Sex=="Мужчина") %>%select(Body) %>% table())
chisq.test(c(A = 20, B = 15, C = 25))
data.unique%>% filter(Sex=="Мужчина") %>%select(Body) %>% table()
chisq.test(c(A = 15, B = 15, C = 25))
chisq.test(c(A = 15, B = 15, C = 55))
chisq.test(c(A = 15, B = 15, C = 35))
View(data)
#уникальные записи (где один от каждого человека берётся только одна запись)
data.unique=data %>% select(Weight,High,Body,Experience,Sex,IndexGroup,Mail) %>% unique()
View(data.unique)
#уникальные записи (где один от каждого человека берётся только одна запись)
data.unique=data %>% select(High,Body,Experience,Sex,IndexGroup,Mail) %>% unique()
#уникальные записи (где один от каждого человека берётся только одна запись)
#объяснить, по каким признакам людей считать одинаковыми
data.unique=data %>% select(High,Body,Experience,Sex,IndexGroup,Mail) %>% unique()
View(data.unique)
View(data)
#уникальные записи (где один от каждого человека берётся только одна запись)
#объяснить, по каким признакам людей считать одинаковыми
data.unique=data %>% select(AgeGroup,High,Body,Experience,Sex,IndexGroup,Mail) %>% unique()
data.unique %$%  table(Body[as.numeric(Body)>2],IndexGroup[as.numeric(Body)>2])
Body[as.numeric(Body)
]
data.unique$Body
data.unique %$%  table(Body[as.numeric(IndexGroup)>2],IndexGroup[as.numeric(IndexGroup)>2])
#уникальные записи (где один от каждого человека берётся только одна запись)
#объяснить, по каким признакам людей считать одинаковыми
data.unique=data %>% select(AgeGroup,High,Body,Experience,Sex,IndexGroup,Mail) %>% unique()
data.unique %$%  table(Body[as.numeric(IndexGroup)>2],IndexGroup[as.numeric(IndexGroup)>2])
#Загрузка данных####
library(tidyverse)
library(magrittr)
library(ggformula)
library(ggthemes)
library(tidyquant)
library(ggvis)
library(plotrix)
library(car)
#library(DAAG)
library(leaps)
data=read_tsv("data.tsv",
skip=1,col_names = F,na="",
col_types = "fddnfffnnnff",
comment="#"
) %>% tbl_df()
colnames(data)=c("Date","SM","Val","Count","Type","Sex","Experience","Age","Weight","High","Body","Mail")
data %<>%#filter(Count<=20) %>%
arrange(Val,Count,Weight) %>%  mutate(
CountGroup=cut(Count,breaks = c(1,3,6,10,20,40)),
AgeGroup=cut(Age,breaks = c(1,19,27,35,70)),
Experience=factor(Experience,levels = c("До двух лет","2-3 года","4-5 лет","6-10 лет","11-15 лет" ,"больше 15 лет"),ordered = T),
Index=Weight/(0.01*High)^2,
IndexGroup=cut(Index,breaks = c(0,16,18.5,24.99,30,35,40,60))
)%>% select(-Date)#,-Mail) %>% filter(Count>1,Val<SM)
levels(data$CountGroup)=c("2-3","4-6","7-10","11-20",">20")
levels(data$AgeGroup)=c("<20","20-27","28-35",">35")
levels(data$IndexGroup)=c("выраженный дефицит","дефицит","норма","избыток","ожирение1","ожирение2","ожирение3")
ex=data$Experience %>% as.numeric()
ex[ex==6]=5
ex %<>%factor()
levels(ex)=c("До двух лет","2-3 года","4-5 лет","6-10 лет","больше 10 лет")
data %<>%mutate(Experience=factor(ex,ordered = T))
allrows=1:nrow(data)
maxerror=2
#уникальные записи (где один от каждого человека берётся только одна запись)
#объяснить, по каким признакам людей считать одинаковыми
data.unique=data %>% select(AgeGroup,High,Body,Experience,Sex,IndexGroup,Mail) %>% unique()
data.unique %$%  table(Body,IndexGroup)
#Функция ошибок####
Error=function(target,weight) (target-weight)^2 %>% mean() %>% sqrt()
Show=function(vals,df=data){
#vals=predict(model,df)
err=df$SM-vals
cbind(value=vals,Target=df$SM,Set=paste0(df$Val,"*",df$Count),
ERROR=abs(df$SM-vals),
ErrorPercent=abs(err)/df$SM*100,
df[,c(3:11)]) %>% tbl_df() %>% select(-Count, IndexGroup)%>% arrange(-ERROR,-ErrorPercent,Weight) %>%
filter(ERROR>1)%>% print()
cat("\n")
rg=range(err)#;print(err);print(rg)
if(rg[1]<0)cat("------------> Наибольшая ошибка в большую сторону:",-rg[1],"\n")
if(rg[2]>0)cat("------------> Наибольшая ошибка в меньшую сторону:",rg[2],"\n")
s=sum(abs(err)/df$SM*100>maxerror)
len=length(err)
cat("Модель ошиблась более чем на",maxerror,"% в",s,"случаях из",len,"(",s/len*100,"%)\n")
s=sum(abs(err)>maxerror)
cat("Модель ошиблась более чем на",maxerror,"кг в",s,"случаях из",len,"(",s/len*100,"%)\n")
cat("-------------------> Среднеквадратичная ошибка:",Error(vals,df$SM),"\n")
}
ShowErrors=function(model,power.coef=1,sum.coef=0){
Show(predict(model,data)*power.coef+sum.coef)
cat("Оценка кросс-валидации для всего набора данных",
boot::cv.glm(data,glm(formula = md$call$formula,data=data),K=10)$delta[1],"\n")
cat("Оценка кросс-валидации для не более чем 10 повторений",
boot::cv.glm(data %>% filter(Count<11),glm(formula = md$call$formula,data=data %>% filter(Count<11)),K=10)$delta[1],"\n")
cat("Оценка кросс-валидации для не более чем 6 повторений",
boot::cv.glm(data %>% filter(Count<7),glm(formula = md$call$formula,data=data %>% filter(Count<7)),K=10)$delta[1],"\n")
}
ResAn=function(res){
shapiro.test(res) %>% print()
p=ggplot(data %>% mutate(res=res),aes(x=CountGroup,y=res))+
geom_boxplot()+labs(x="Группа повторений",y="Остатки (цель - предсказание)",title="Распределения остатков в зависимости от группы повторений")+theme_bw()
print(p)
(p+facet_grid(vars(Type))) %>% print()
p+facet_grid(vars(Body),vars(Type))
}
#из этого графика можно сделать вывод, что модель неплохо работает на диапазоне 2-3, но на диапазоне 13-20 ошибка какая-то сильно отличающаяся от тенденции уменьшения ошибок, так что этот диапазон надо бы и вообще убрать, так как там уже играют роль свойства красных волокон, не говорящие о силе
ResAn(data$SM-data$Val*(1+0.0333*data$Count))
ResVal=function(vals)ResAn(data$SM-vals)
md=nls(SM~Val^vk*(1+coef*Count)^kk,
data=data,
start = list(coef=0.0333,vk=1.,kk=1.))
Show(predict(md,data))
View(data)
Show=function(vals,df=data){
#vals=predict(model,df)
err=df$SM-vals
cbind(value=vals,Target=df$SM,Set=paste0(df$Val,"*",df$Count),
ERROR=abs(df$SM-vals),
ErrorPercent=abs(err)/df$SM*100,
df[,c(3:15)]) %>% tbl_df() %>% select(-Count, IndexGroup)%>% arrange(-ERROR,-ErrorPercent,Weight) %>%
filter(ERROR>1)%>% print()
cat("\n")
rg=range(err)#;print(err);print(rg)
if(rg[1]<0)cat("------------> Наибольшая ошибка в большую сторону:",-rg[1],"\n")
if(rg[2]>0)cat("------------> Наибольшая ошибка в меньшую сторону:",rg[2],"\n")
s=sum(abs(err)/df$SM*100>maxerror)
len=length(err)
cat("Модель ошиблась более чем на",maxerror,"% в",s,"случаях из",len,"(",s/len*100,"%)\n")
s=sum(abs(err)>maxerror)
cat("Модель ошиблась более чем на",maxerror,"кг в",s,"случаях из",len,"(",s/len*100,"%)\n")
cat("-------------------> Среднеквадратичная ошибка:",Error(vals,df$SM),"\n")
}
ShowErrors=function(model,power.coef=1,sum.coef=0){
Show(predict(model,data)*power.coef+sum.coef)
cat("Оценка кросс-валидации для всего набора данных",
boot::cv.glm(data,glm(formula = md$call$formula,data=data),K=10)$delta[1],"\n")
cat("Оценка кросс-валидации для не более чем 10 повторений",
boot::cv.glm(data %>% filter(Count<11),glm(formula = md$call$formula,data=data %>% filter(Count<11)),K=10)$delta[1],"\n")
cat("Оценка кросс-валидации для не более чем 6 повторений",
boot::cv.glm(data %>% filter(Count<7),glm(formula = md$call$formula,data=data %>% filter(Count<7)),K=10)$delta[1],"\n")
}
md=nls(SM~Val^vk*(1+coef*Count)^kk,
data=data,
start = list(coef=0.0333,vk=1.,kk=1.))
Show(predict(md,data))
md=nls(SM~Val^vk*(1+coef*(Count-1))^kk,
data=data,
start = list(coef=0.0333,vk=1.,kk=1.))
Show(predict(md,data))
md=nls(SM~Val^vk*(1+coef*(Count-1))^(kk*Count),
data=data,
start = list(coef=0.0333,vk=1.,kk=1.))
md=nls(SM~Val^vk*(1+coef*Count)^(kk*Count),
data=data,
start = list(coef=0.0333,vk=1.,kk=1.))
md=nls(SM~Val^vk*(1+coef*Count)^(kk*Count),
data=data,
start = list(coef=0.0333,vk=1.,kk=0.))
md=nls(SM~Val^vk*(1+coef*Count)^(kk*Count),
data=data,
start = list(coef=0.0333,vk=1.,kk=1.2))
md=nls(SM~Val*(1+coef*Count)^(kk*Count),
data=data,
start = list(coef=0.0333,vk=1.,kk=1.2))
md=nls(SM~Val*(1+coef*Count)^(kk*Count),
data=data,
start = list(coef=0.0333,kk=1.2))
md=nls(SM~Val*(1+coef*Count)^(kk*Count),
data=data,
start = list(coef=0.0333,kk=1.0))
md=nls(SM~Val*(1+coef*Count)^(kk*Count),
data=data,
start = list(coef=0.0333,kk=0.006))
md=nls(SM~Val*(1+coef*Count)^(kk*Count),
data=data,
start = list(coef=0.0333,kk=0.6))
md=nls(SM~Val*(1+coef*Count)^(kk*Count),
data=data,
start = list(coef=0.0333,kk=0.06))
md=nls(SM~Val*(1+coef*Count)^(kk*Count),
data=data,
start = list(coef=0.0333,kk=0.8))
md=nls(SM~Val*(1+coef*Count)^(kk*Count),
data=data,
start = list(coef=0.33,kk=0.8))
md=nls(SM~Val*(1+coef*Count)^(Count),
data=data,
start = list(coef=0.33,kk=0.8))
md=nls(SM~Val*(1+coef*Count)^(Count),
data=data,
start = list(coef=0.033,kk=0.8))
md=nls(SM~Val*(1+coef*Count)^(Count-3),
data=data,
start = list(coef=0.033,kk=0.8))
md=nls(SM~Val*(1+coef*Count)^(kk),
data=data,
start = list(coef=0.033,kk=0.8))
Show(predict(md,data))
summary(md)
md=nls(SM~Val*(1+coef*Count)^(kk*sqrt(Count)),
data=data,
start = list(coef=0.033,kk=0.8))
md=nls(SM~Val*(1+coef*Count)^(kk*sqrt(Count)),
data=data,
start = list(coef=0.033,kk=56.8))
md=nls(SM~Val*(1+coef*Count)^(kk*sqrt(Count)),
data=data,
start = list(coef=0.033,kk=5.8))
md=nls(SM~Val*(1+coef*Count)^(kk*sqrt(Count)),
data=data,
start = list(coef=0.033,kk=0.01))
summary(md)
Show(predict(md,data))
md=nls(SM~Val*(1+coef*Count)^(kk*Count),
data=data,
start = list(coef=0.033,kk=0.01))
Show(predict(md,data))
md=nls(SM~Val*(1+coef*Count)^(kk*Count),
data=data,
start = list(coef=0.033,kk=0.1))
md=nls(SM~Val*(1+coef*Count)^(kk*Count),
data=data,
start = list(coef=0.033,kk=0.05))
md=nls(SM~Val*(1+coef*Count)^(kk*Count),
data=data,
start = list(coef=0.033,kk=0.04))
md=nls(SM~Val*(1+coef*Count)^(kk*Count),
data=data,
start = list(coef=0.033,kk=0.02))
md=nls(SM~Val*(1+coef*Count)^(kk*Count),
data=data,
start = list(coef=0.033,kk=0.01))
Show(predict(md,data))
md=nls(SM~Val*(1+coef*Count)^(kk*poly(Count,3)),
data=data,
start = list(coef=0.033,kk=0.01))
md=nls(SM~Val*(1+coef*Count)^(kk+Count*t),
data=data,
start = list(coef=0.033,kk=0.01,t=1))
md=nls(SM~Val*(1+coef*Count)^(kk+Count*t),
data=data,
start = list(coef=0.033,kk=0.01,t=0))
summary(md)
Show(predict(md,data))
data %>% ggplot(aes(x=factor(Count),y=SM/Val-1))+geom_boxplot()+theme_bw()
#data %>% ggplot(aes(x=CountGroup,y=SM/Val))+geom_boxplot()+theme_bw()
data %>% ggplot(aes(x=factor(Count),y=(SM/Val-1)/Count))+geom_boxplot()+theme_bw()
data %>% ggplot(aes(x=factor(Count),y=100*Val/SM))+geom_boxplot()+coord_flip()+theme_bw()
data %>% group_by(factor(Count)) %>% summarise(mean=t.test(100*Val/SM)$estimate)
data %>% filter(Count<=15) %>% group_by(factor(Count)) %>% summarise(mean=t.test(100*Val/SM)$estimate)
data %>% filter(Count<=15) %>% group_by(factor(Count)) %>% summarise(mean=t.test(100*Val/SM)$conf.int)
data %>% mutate(perc=100*Val/SM) %>% filter(Count<=15) %>%
group_by(factor(Count)) %>%
summarise(mean=t.test(perc)$estimate,down=t.test(perc)$conf.int[1])
data %>% mutate(perc=100*Val/SM) %>% filter(Count<=15) %>%
group_by(factor(Count)) %>%
summarise(mean=t.test(perc)$estimate,
down=t.test(perc)$conf.int[1],
up=t.test(perc)$conf.int[2])
#По этому соотношению надо бы выбросы удалить
data %>% ggplot(aes(x=factor(Count),y=100*Val/SM))+geom_boxplot()+coord_flip()+theme_bw()+
annotate("text", x = Count, y = 141.7, label = "Начальные результаты")
#По этому соотношению надо бы выбросы удалить
data %>% ggplot(aes(x=factor(Count),y=100*Val/SM))+geom_boxplot()+coord_flip()+theme_bw()+
annotate("text", x = factor(Count), y = 141.7, label = "Начальные результаты")
#По этому соотношению надо бы выбросы удалить
data %>% ggplot(aes(x=factor(Count),y=100*Val/SM))+geom_boxplot()+coord_flip()+theme_bw()+
annotate("text", x=10, y = 141.7, label = "Начальные результаты")
#По этому соотношению надо бы выбросы удалить
data %>% ggplot(aes(x=factor(Count),y=100*Val/SM))+geom_boxplot()+coord_flip()+theme_bw()+
annotate("text", x=10, y = mean(100*Val/SM), label = "Начальные результаты")
#По этому соотношению надо бы выбросы удалить
data %>% ggplot(aes(x=factor(Count),y=100*Val/SM))+geom_boxplot()+coord_flip()+theme_bw()#+
data %>% mutate(perc=100*Val/SM) %>% filter(Count<=15) %>%
group_by(factor(Count)) %>%
summarise(mean=t.test(perc)$estimate,
down=t.test(perc)$conf.int[1],
up=t.test(perc)$conf.int[2])
#как насчёт какой-то такой модели?
lm(Val/SM~Count,data) %>% summary()
md=lm(sqrt(SM)~Val+Val:Count-1,data)
summary(md)
#как насчёт какой-то такой модели?
lm(Val/SM~Count,data) %>% summary()
lm(Val/SM~Count,data) %>% plot()
lm(Val/SM~Count+I(Count^2),data) %>% plot()
#как насчёт какой-то такой модели?
lm(Val/SM~Count+I(Count^2),data) %>% summary()
3.4%%1.1
#как насчёт какой-то такой модели?
lm(Val%%Weight/SM%%Weight~Count+I(Count^2),data) %>% summary()
()
#как насчёт какой-то такой модели?
lm(Val/SM~Count+I(Count^2)+I(Val/Weight),data) %>% summary()
lm(Val/SM~Count+I(Count^2)+I(Val/Weight),data) %>% plot()
lm(Val/SM~Count:CountGroup,data) %>% summary()
View(data)
View(data)
#Загрузка данных####
library(tidyverse)
library(magrittr)
library(ggformula)
library(ggthemes)
library(tidyquant)
library(ggvis)
library(plotrix)
library(car)
#library(DAAG)
library(leaps)
data=read_tsv("data.tsv",
skip=1,col_names = F,na="",
col_types = "fddnfffnnnff",
comment="#"
) %>% tbl_df()
colnames(data)=c("Date","SM","Val","Count","Type","Sex","Experience","Age","Weight","High","Body","Mail")
data %<>%#filter(Count<=20) %>%
arrange(Val,Count,Weight) %>%  mutate(
CountGroup=cut(Count,breaks = c(1,3,6,10,20,40)),
AgeGroup=cut(Age,breaks = c(1,19,27,35,70)),
Experience=factor(Experience,levels = c("До двух лет","2-3 года","4-5 лет","6-10 лет","11-15 лет" ,"больше 15 лет"),ordered = T),
Index=Weight/(0.01*High)^2,
IndexGroup=cut(Index,breaks = c(0,16,18.5,24.99,30,35,40,60))
)%>% select(-Date)#,-Mail) %>% filter(Count>1,Val<SM)
levels(data$CountGroup)=c("2-3","4-6","7-10","11-20",">20")
levels(data$AgeGroup)=c("<20","20-27","28-35",">35")
levels(data$IndexGroup)=c("выраженный дефицит","дефицит","норма","избыток","ожирение1","ожирение2","ожирение3")
ex=data$Experience %>% as.numeric()
ex[ex==6]=5
ex %<>%factor()
levels(ex)=c("До двух лет","2-3 года","4-5 лет","6-10 лет","больше 10 лет")
data %<>%mutate(Experience=factor(ex,ordered = T))
allrows=1:nrow(data)
maxerror=2
#Функция ошибок####
Error=function(target,weight) (target-weight)^2 %>% mean() %>% sqrt()
Show=function(vals,df=data){
#vals=predict(model,df)
err=df$SM-vals
cbind(value=vals,Target=df$SM,Set=paste0(df$Val,"*",df$Count),
ERROR=abs(df$SM-vals),
ErrorPercent=abs(err)/df$SM*100,
df[,c(3:15)]) %>% tbl_df() %>% select(-Count, IndexGroup)%>% arrange(-ERROR,-ErrorPercent,Weight) %>%
filter(ERROR>1)%>% print()
cat("\n")
rg=range(err)#;print(err);print(rg)
if(rg[1]<0)cat("------------> Наибольшая ошибка в большую сторону:",-rg[1],"\n")
if(rg[2]>0)cat("------------> Наибольшая ошибка в меньшую сторону:",rg[2],"\n")
s=sum(abs(err)/df$SM*100>maxerror)
len=length(err)
cat("Модель ошиблась более чем на",maxerror,"% в",s,"случаях из",len,"(",s/len*100,"%)\n")
s=sum(abs(err)>maxerror)
cat("Модель ошиблась более чем на",maxerror,"кг в",s,"случаях из",len,"(",s/len*100,"%)\n")
cat("-------------------> Среднеквадратичная ошибка:",Error(vals,df$SM),"\n")
}
ShowErrors=function(model,power.coef=1,sum.coef=0){
Show(predict(model,data)*power.coef+sum.coef)
cat("Оценка кросс-валидации для всего набора данных",
boot::cv.glm(data,glm(formula = md$call$formula,data=data),K=10)$delta[1],"\n")
cat("Оценка кросс-валидации для не более чем 10 повторений",
boot::cv.glm(data %>% filter(Count<11),glm(formula = md$call$formula,data=data %>% filter(Count<11)),K=10)$delta[1],"\n")
cat("Оценка кросс-валидации для не более чем 6 повторений",
boot::cv.glm(data %>% filter(Count<7),glm(formula = md$call$formula,data=data %>% filter(Count<7)),K=10)$delta[1],"\n")
}
ResAn=function(res){
shapiro.test(res) %>% print()
p=ggplot(data %>% mutate(res=res),aes(x=CountGroup,y=res))+
geom_boxplot()+labs(x="Группа повторений",y="Остатки (цель - предсказание)",title="Распределения остатков в зависимости от группы повторений")+theme_bw()
print(p)
(p+facet_grid(vars(Type))) %>% print()
p+facet_grid(vars(Body),vars(Type))
}
#из этого графика можно сделать вывод, что модель неплохо работает на диапазоне 2-3, но на диапазоне 13-20 ошибка какая-то сильно отличающаяся от тенденции уменьшения ошибок, так что этот диапазон надо бы и вообще убрать, так как там уже играют роль свойства красных волокон, не говорящие о силе
ResAn(data$SM-data$Val*(1+0.0333*data$Count))
ResVal=function(vals)ResAn(data$SM-vals)
#как насчёт какой-то такой модели?
lm(Val/SM~Count+I(Count^2)+I(Val/Weight),data) %>% summary()
lm(Val/SM~Count+I(Count^2)+I(Val/Weight),data) %>% plot()
lm(Val/SM~Count:CountGroup,data) %>% summary()
#как насчёт какой-то такой модели?
lm(Val/SM~Count+I(Count^2)+I(Val/Weight),data) %>% summary()
gr=data$CountGroup %>% as.numeric()
cors=function(inds)cor(data$SM[inds],data$Val[inds])
cors(gr==4)
cors(gr<2)
cors(gr==5)
md=lm(SM~Val:Count:CountGroup+Val:CountGroup+Val+Val:Count-1,data)
ShowErrors(md)
