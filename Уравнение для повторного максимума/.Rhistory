for(i in seq(ln)){
x[i]=sum(vec==levels(vec)[i])/length(vec)
ns[i]=paste0(levels(vec)[i]," (",round(x[i]*100,2),"%)")
}
return(list(x=x,ns=ns))
}
getPIE=function(vec,main=""){
lst=getparam(vec)
pie(x=lst$x,labels=lst$ns,main=main)
}
getFan=function(vec,main=""){
pr=getparam(vec)
fan.plot(pr$x,labels=pr$ns,main=main)
}
getPIE(data$Sex,main = "Пол испытуемых")
getPIE(data$Body,main = "Телосложение испытуемых")
chisq.test(data%>% filter(Sex=="Мужчина") %>%select(Body) %>% table())
getPIE(data$CountGroup,main = "Диапазон повторений")
getPIE(data$Experience,main = "Опыт тренировок")
getFan(cut(data$Age,breaks=c(0,20,30,40,100)))
byCountGroup=ggplot(data,aes(y=SM/Val,col=Sex))+facet_wrap(~CountGroup)+theme_bw()
byCountGroup+geom_point(aes(x=Age))
#есть ли значимые различия в разных возрастных группах для фиксированного диапазона
aov(SM/Val~Experience,data %>% filter(CountGroup=="2-3")) %>% summary()
#Функция ошибок####
Error=function(target,weight)
{
s=(target-weight)^2 %>% sum()
return(sqrt(s/length(weight)))
}
Show=function(vals,df=data){
#vals=predict(model,df)
err=df$SM-vals
cbind(value=vals,Target=df$SM,
ERROR=abs(df$SM-vals),
ErrorPercent=abs(err)/df$SM*100,
df[,c(3:11)]) %>% tbl_df()%>% arrange(ERROR,ErrorPercent,Count,Weight) %>%
filter(ERROR>1)%>% print()
cat("\n")
rg=range(err)
if(rg[1]<0)cat("------------> Наибольшая ошибка в большую сторону:",-rg[1],"\n")
if(rg[2]>0)cat("------------> Наибольшая ошибка в меньшую сторону:",rg[2],"\n")
s=sum(abs(err)/df$SM*100>maxerror)
len=length(err)
cat("Модель ошиблась более чем на",maxerror,"% в",s,"случаях из",len,"(",s/len*100,"%)\n")
s=sum(abs(err)>maxerror)
cat("Модель ошиблась более чем на",maxerror,"кг в",s,"случаях из",len,"(",s/len*100,"%)\n")
cat("-------------------> Среднеквадратичная ошибка:",Error(vals,df$SM),"\n")
}
ResAn=function(res){
shapiro.test(res) %>% print()
p=ggplot(data %>% mutate(res=res),aes(x=CountGroup,y=res))+
geom_boxplot()+theme_bw()
print(p)
p=ggplot(data %>% mutate(res=res),aes(x=CountGroup,y=res))+
geom_boxplot() +facet_grid(vars(Body),vars(Type))+theme_bw()
p
}
ResAn(data$SM-data$Val*(1+0.0333*data$Count))
ResVal=function(vals)ResAn(data$SM-vals)
#начальная
Show(data$Val*(1+0.0333*data$Count))
#оптимизация чисто коэффициента c поправкой на его группу
md=lm(I(SM/Val-1)~Val:Count:CountGroup-1,data)
summary(md)
Show((predict(md,data %>% select(Val,Count,CountGroup))+1)*data$Val)
#Val+Val*Count с поправкой на группу
md=lm(SM~Val:Count:CountGroup+Val:CountGroup-1,data)
summary(md)
Show(predict(md,data %>% select(Val,Count,CountGroup)))
car::vif(md)
md=step(md,
direction = "forward",
scope = (~
Val:Body+Val:Count:Body+
Val:Experience+Val:Count:Experience+
Val:Count:CountGroup:Body+Val:CountGroup:Body+
I(Val*Weight/(High-100))+
I((Val-100)/Val)+poly(Val/Weight,2)
))
summary(md)
Show(predict(md,data))
summary(data)
md=step(md,
direction = "forward",
scope = (~
Val:Body+Val:Count:Body+
Val:Experience+Val:Count:Experience+
Val:Count:CountGroup:Body+Val:CountGroup:Body+
I(Val*Weight/(High-100))+
I((Val-100)/Val)+poly(Val/Weight,2)
))
md=step(md,
direction = "forward",
scope = (~
Val:Body+Val:Count:Body+
Val:Experience+Val:Count:Experience+
#Val:Count:CountGroup:Body+Val:CountGroup:Body+
I(Val*Weight/(High-100))+
I((Val-100)/Val)+poly(Val/Weight,2)
))
#Val+Val*Count с поправкой на группу
md=lm(SM~Val:Count:CountGroup+Val:CountGroup-1,data)
summary(md)
Show(predict(md,data %>% select(Val,Count,CountGroup)))
md=step(md,
direction = "forward",
scope = (~
#Val:Body+Val:Count:Body+
#Val:Experience+Val:Count:Experience+
#Val:Count:CountGroup:Body+Val:CountGroup:Body+
I(Val*Weight/(High-100))+
I((Val-100)/Val)+poly(Val/Weight,2)
))
#Val+Val*Count с поправкой на группу
md=lm(SM~Val:Count:CountGroup+Val:CountGroup-1,data)
md=step(md,
direction = "both",
scope = (~
Val:Body+Val:Count:Body+
Val:Experience+Val:Count:Experience+
Val:Count:CountGroup:Body+Val:CountGroup:Body+
I(Val*Weight/(High-100))+
I((Val-100)/Val)+poly(Val/Weight,2)
))
md=lm(SM~Val+Val:Count-1+Val:Body:Count+Val:Experience:Count+
Val:Body+#Val:Sex+
Val:Experience+
I(Val*Weight/(High-100))+
I((Val-100)/Val)+poly(Val/Weight,2)
,data)
summary(md)
Show(predict(md,data%>% select(Val,Count,Weight,High,Body,Sex,Experience
)))
#Функция ошибок####
Error=function(target,weight) (target-weight)^2 %>% mean() %>% sqrt()
Show=function(vals,df=data){
#vals=predict(model,df)
err=df$SM-vals
cbind(value=vals,Target=df$SM,
ERROR=abs(df$SM-vals),
ErrorPercent=abs(err)/df$SM*100,
df[,c(3:11)]) %>% tbl_df()%>% arrange(-ERROR,-ErrorPercent,Count,Weight) %>%
filter(ERROR>1)%>% print()
cat("\n")
rg=range(err)
if(rg[1]<0)cat("------------> Наибольшая ошибка в большую сторону:",-rg[1],"\n")
if(rg[2]>0)cat("------------> Наибольшая ошибка в меньшую сторону:",rg[2],"\n")
s=sum(abs(err)/df$SM*100>maxerror)
len=length(err)
cat("Модель ошиблась более чем на",maxerror,"% в",s,"случаях из",len,"(",s/len*100,"%)\n")
s=sum(abs(err)>maxerror)
cat("Модель ошиблась более чем на",maxerror,"кг в",s,"случаях из",len,"(",s/len*100,"%)\n")
cat("-------------------> Среднеквадратичная ошибка:",Error(vals,df$SM),"\n")
}
md=lm(SM~Val+Val:Count-1+Val:Body:Count+Val:Experience:Count+
Val:Body+#Val:Sex+
Val:Experience+
I(Val*Weight/(High-100))+
I((Val-100)/Val)+poly(Val/Weight,2)
,data)
summary(md)
Show(predict(md,data%>% select(Val,Count,Weight,High,Body,Sex,Experience
)))
data=read_tsv("data.tsv",
skip=1,col_names = F,na="",
col_types = "fddnfffnnnff"
) %>% tbl_df()
colnames(data)=c("Date","SM","Val","Count","Type","Sex","Experience","Age","Weight","High","Body","Mail")
data %<>% mutate(
CountGroup=cut(Count,breaks = c(1,3,7,12,20,50))
)%>% select(-Date,-Mail) %>% filter(Count>1,Val<SM)
levels(data$CountGroup)=c("2-3","4-7","8-12","13-20",">20")
allrows=1:nrow(data)
maxerror=2
#Val+Val*Count с поправкой на группу
md=lm(SM~Val:Count:CountGroup+Val:CountGroup-1,data)
summary(md)
Show(predict(md,data %>% select(Val,Count,CountGroup)))
md=lm(SM~Val+Val:Count-1+Val:Body:Count+Val:Experience:Count+
Val:Body+#Val:Sex+
Val:Experience+
I(Val*Weight/(High-100))+
I((Val-100)/Val)+poly(Val/Weight,2)
,data)
summary(md)
Show(predict(md,data%>% select(Val,Count,Weight,High,Body,Sex,Experience
)))
md=step(md,direction = "both")
md=lm(SM~Val+Val:Count-1+Val:Body:Count+Val:Experience:Count+
Val:Body+Val:Count:CountGroup+Val:CountGroup+#Val:Sex
Val:Experience+
I(Val*Weight/(High-100))+
I((Val-100)/Val)+poly(Val/Weight,2)
,data)
summary(md)
Show(predict(md,data%>% select(Val,Count,Weight,High,Body,Sex,Experience
)))
Show(predict(md,data))
md=step(md,direction = "both")
Show(predict(md,data%>% select(Val,Count,Weight,High,Body,Sex,Experience)))
Show(predict(md,data))
md=step(md,direction = "both")
Show(predict(md,data))
Show=function(vals,df=data){
#vals=predict(model,df)
err=df$SM-vals
cbind(value=vals,Target=df$SM,Set=paste(df$Val,"*",df$Count),
ERROR=abs(df$SM-vals),
ErrorPercent=abs(err)/df$SM*100,
df[,c(3:11)]) %>% tbl_df()%>% arrange(-ERROR,-ErrorPercent,Count,Weight) %>%
filter(ERROR>1)%>% print()
cat("\n")
rg=range(err)
if(rg[1]<0)cat("------------> Наибольшая ошибка в большую сторону:",-rg[1],"\n")
if(rg[2]>0)cat("------------> Наибольшая ошибка в меньшую сторону:",rg[2],"\n")
s=sum(abs(err)/df$SM*100>maxerror)
len=length(err)
cat("Модель ошиблась более чем на",maxerror,"% в",s,"случаях из",len,"(",s/len*100,"%)\n")
s=sum(abs(err)>maxerror)
cat("Модель ошиблась более чем на",maxerror,"кг в",s,"случаях из",len,"(",s/len*100,"%)\n")
cat("-------------------> Среднеквадратичная ошибка:",Error(vals,df$SM),"\n")
}
Show(predict(md,data))
plot(md)
#Загрузка данных####
library(tidyverse)
library(magrittr)
library(ggformula)
library(ggthemes)
library(tidyquant)
library(ggvis)
library(plotrix)
data=read_tsv("data.tsv",
skip=1,col_names = F,na="",
col_types = "fddnfffnnnff"
) %>% tbl_df()
colnames(data)=c("Date","SM","Val","Count","Type","Sex","Experience","Age","Weight","High","Body","Mail")
data %<>% mutate(
CountGroup=cut(Count,breaks = c(1,3,7,12,20,50))
)%>% select(-Date,-Mail) %>% filter(Count>1,Val<SM)
levels(data$CountGroup)=c("2-3","4-7","8-12","13-20",">20")
allrows=1:nrow(data)
maxerror=2
md=lm(SM~Val+Val:Count-1+Val:Body:Count+Val:Experience:Count+
Val:Body+Val:Count:CountGroup+Val:CountGroup+#Val:Sex
Val:Experience+
I(Val*Weight/(High-100))+
I((Val-100)/Val)+poly(Val/Weight,2)
,data)
summary(md)
md=step(md,direction = "both")
Show(predict(md,data))
#Загрузка данных####
library(tidyverse)
library(magrittr)
library(ggformula)
library(ggthemes)
library(tidyquant)
library(ggvis)
library(plotrix)
data=read_tsv("data.tsv",
skip=1,col_names = F,na="",
col_types = "fddnfffnnnff"
) %>% tbl_df()
colnames(data)=c("Date","SM","Val","Count","Type","Sex","Experience","Age","Weight","High","Body","Mail")
data %<>% mutate(
CountGroup=cut(Count,breaks = c(1,3,7,12,20,50))
)%>% select(-Date,-Mail) %>% filter(Count>1,Val<SM)
levels(data$CountGroup)=c("2-3","4-7","8-12","13-20",">20")
allrows=1:nrow(data)
maxerror=2
#Val+Val*Count с поправкой на группу
md=lm(SM~Val:Count:CountGroup+Val:CountGroup-1,data)
library(car)
qqPlot(md)
qqPlot(md,main="Q-Q plot")
durbinWatsonTest(md)#тест на автокорреляцию
crPlots(md)
ncv.test(md)
ncvTest(md)
install.packages("gvlma")
gvlma::gvlma(md) %>% summary()
ncvTest(md)#однородность дисперсии
gvlma::gvlma(md) %>% summary()
vif(md)
vif(lm(prestige ~ income + education, data=Duncan))
#оптимизация чисто коэффициента c поправкой на его группу
md=lm(I(SM/Val-1)~Val:Count:CountGroup-1,data)
vif(md)
#оптимизация чисто коэффициента
md=nls(SM~Val*(1+coef*Count),
data=data,
start = list(coef=0.0333))
vif(md)
#Загрузка данных####
library(tidyverse)
library(magrittr)
library(ggformula)
library(ggthemes)
library(tidyquant)
library(ggvis)
library(plotrix)
library(car)
data=read_tsv("data.tsv",
skip=1,col_names = F,na="",
col_types = "fddnfffnnnff"
) %>% tbl_df()
colnames(data)=c("Date","SM","Val","Count","Type","Sex","Experience","Age","Weight","High","Body","Mail")
data %<>% mutate(
CountGroup=cut(Count,breaks = c(1,3,7,12,20,50))
)%>% select(-Date,-Mail) %>% filter(Count>1,Val<SM)
levels(data$CountGroup)=c("2-3","4-7","8-12","13-20",">20")
allrows=1:nrow(data)
maxerror=2
ggplot(data,aes(x=CountGroup))+geom_col()
ggplot(data,aes(x=CountGroup))+geom_bar()
ggplot(data,aes(x=CountGroup))+geom_bar()+theme_classic()+labs(title="Диапазон повторений",x="Диапазон повторений",y="Количество")
ggplot(data,aes(x=Experience))+geom_bar()+theme_classic()+labs(title="Распределение по опыту тренировок",x="Опыт тренировок",y="Количество")
data=read_tsv("data.tsv",
skip=1,col_names = F,na="",
col_types = "fddnfffnnnff"
) %>% tbl_df()
colnames(data)=c("Date","SM","Val","Count","Type","Sex","Experience","Age","Weight","High","Body","Mail")
data %<>% mutate(
CountGroup=cut(Count,breaks = c(1,3,7,12,20,50)),
AgeGroup=cut(Age,breaks = c(1,20,27,35,45,70))
)%>% select(-Date,-Mail) %>% filter(Count>1,Val<SM)
levels(data$CountGroup)=c("2-3","4-7","8-12","13-20",">20")
allrows=1:nrow(data)
maxerror=2
summary(data)
data=read_tsv("data.tsv",
skip=1,col_names = F,na="",
col_types = "fddnfffnnnff"
) %>% tbl_df()
colnames(data)=c("Date","SM","Val","Count","Type","Sex","Experience","Age","Weight","High","Body","Mail")
data %<>% mutate(
CountGroup=cut(Count,breaks = c(1,3,7,12,20,50)),
AgeGroup=cut(Age,breaks = c(1,19,27,35,70))
)%>% select(-Date,-Mail) %>% filter(Count>1,Val<SM)
levels(data$AgeGroup)
data=read_tsv("data.tsv",
skip=1,col_names = F,na="",
col_types = "fddnfffnnnff"
) %>% tbl_df()
colnames(data)=c("Date","SM","Val","Count","Type","Sex","Experience","Age","Weight","High","Body","Mail")
data %<>% mutate(
CountGroup=cut(Count,breaks = c(1,3,7,12,20,50)),
AgeGroup=cut(Age,breaks = c(1,19,27,35,70))
)%>% select(-Date,-Mail) %>% filter(Count>1,Val<SM)
levels(data$CountGroup)=c("2-3","4-7","8-12","13-20",">20")
levels(data$AgeGroup)=c("<20","20-27","28-35",">35")
allrows=1:nrow(data)
maxerror=2
summary(data)
ggplot(data,aes(x=AgeGroup))+geom_bar()+theme_classic()+labs(title="Распределение по возрасту",x="Возрастная группа",y="Количество")
#Val+Val*Count с поправкой на группу
md=lm(SM~Val:Count:CountGroup+Val:CountGroup-1,data)
summary(md)
#Функция ошибок####
Error=function(target,weight) (target-weight)^2 %>% mean() %>% sqrt()
Show=function(vals,df=data){
#vals=predict(model,df)
err=df$SM-vals
cbind(value=vals,Target=df$SM,Set=paste0(df$Val,"*",df$Count),
ERROR=abs(df$SM-vals),
ErrorPercent=abs(err)/df$SM*100,
df[,c(3:11)]) %>% tbl_df() %>% select(-Count)%>% arrange(-ERROR,-ErrorPercent,Count,Weight) %>%
filter(ERROR>1)%>% print()
cat("\n")
rg=range(err)
if(rg[1]<0)cat("------------> Наибольшая ошибка в большую сторону:",-rg[1],"\n")
if(rg[2]>0)cat("------------> Наибольшая ошибка в меньшую сторону:",rg[2],"\n")
s=sum(abs(err)/df$SM*100>maxerror)
len=length(err)
cat("Модель ошиблась более чем на",maxerror,"% в",s,"случаях из",len,"(",s/len*100,"%)\n")
s=sum(abs(err)>maxerror)
cat("Модель ошиблась более чем на",maxerror,"кг в",s,"случаях из",len,"(",s/len*100,"%)\n")
cat("-------------------> Среднеквадратичная ошибка:",Error(vals,df$SM),"\n")
}
ResAn=function(res){
shapiro.test(res) %>% print()
p=ggplot(data %>% mutate(res=res),aes(x=CountGroup,y=res))+
geom_boxplot()+theme_bw()
print(p)
p=ggplot(data %>% mutate(res=res),aes(x=CountGroup,y=res))+
geom_boxplot() +facet_grid(vars(Body),vars(Type))+theme_bw()
p
}
ResAn(data$SM-data$Val*(1+0.0333*data$Count))
ResVal=function(vals)ResAn(data$SM-vals)
#Val+Val*Count с поправкой на группу
md=lm(SM~Val:Count:CountGroup+Val:CountGroup-1,data)
summary(md)
Show(predict(md,data %>% select(Val,Count,CountGroup)))
#Функция ошибок####
Error=function(target,weight) (target-weight)^2 %>% mean() %>% sqrt()
Show=function(vals,df=data){
#vals=predict(model,df)
err=df$SM-vals
cbind(value=vals,Target=df$SM,Set=paste0(df$Val,"*",df$Count),
ERROR=abs(df$SM-vals),
ErrorPercent=abs(err)/df$SM*100,
df[,c(3:11)]) %>% tbl_df() %>% select(-Count)%>% arrange(-ERROR,-ErrorPercent,Weight) %>%
filter(ERROR>1)%>% print()
cat("\n")
rg=range(err)
if(rg[1]<0)cat("------------> Наибольшая ошибка в большую сторону:",-rg[1],"\n")
if(rg[2]>0)cat("------------> Наибольшая ошибка в меньшую сторону:",rg[2],"\n")
s=sum(abs(err)/df$SM*100>maxerror)
len=length(err)
cat("Модель ошиблась более чем на",maxerror,"% в",s,"случаях из",len,"(",s/len*100,"%)\n")
s=sum(abs(err)>maxerror)
cat("Модель ошиблась более чем на",maxerror,"кг в",s,"случаях из",len,"(",s/len*100,"%)\n")
cat("-------------------> Среднеквадратичная ошибка:",Error(vals,df$SM),"\n")
}
md=lm(SM~Val:Count:CountGroup+Val:CountGroup-1,data)
summary(md)
Show(predict(md,data %>% select(Val,Count,CountGroup)))
md=lm(SM~Val:Count:CountGroup+Val:CountGroup-1+Val,data)
summary(md)
Show(predict(md,data %>% select(Val,Count,CountGroup)))
md=lm(SM~Val:Count:CountGroup+Val:CountGroup,data)
summary(md)
Show(predict(md,data %>% select(Val,Count,CountGroup)))
md=lm(SM~Val:Count:CountGroup+Val:CountGroup+Val+Val:Count,data)
summary(md)
Show(predict(md,data %>% select(Val,Count,CountGroup)))
ncvTest(md)#однородность дисперсии
gvlma::gvlma(md) %>% summary()
#Загрузка данных####
library(tidyverse)
library(magrittr)
library(ggformula)
library(ggthemes)
library(tidyquant)
library(ggvis)
library(plotrix)
library(car)
data=read_tsv("data.tsv",
skip=1,col_names = F,na="",
col_types = "fddnfffnnnff"
) %>% tbl_df()
colnames(data)=c("Date","SM","Val","Count","Type","Sex","Experience","Age","Weight","High","Body","Mail")
data %<>% mutate(
CountGroup=cut(Count,breaks = c(1,3,7,12,20,50)),
AgeGroup=cut(Age,breaks = c(1,19,27,35,70))
)%>% select(-Date)#,-Mail) %>% filter(Count>1,Val<SM)
levels(data$CountGroup)=c("2-3","4-7","8-12","13-20",">20")
levels(data$AgeGroup)=c("<20","20-27","28-35",">35")
allrows=1:nrow(data)
maxerror=2
#Функция ошибок####
Error=function(target,weight) (target-weight)^2 %>% mean() %>% sqrt()
Show=function(vals,df=data){
#vals=predict(model,df)
err=df$SM-vals
cbind(value=vals,Target=df$SM,Set=paste0(df$Val,"*",df$Count),
ERROR=abs(df$SM-vals),
ErrorPercent=abs(err)/df$SM*100,
df[,c(3:12)]) %>% tbl_df() %>% select(-Count)%>% arrange(-ERROR,-ErrorPercent,Weight) %>%
filter(ERROR>1)%>% print()
cat("\n")
rg=range(err)
if(rg[1]<0)cat("------------> Наибольшая ошибка в большую сторону:",-rg[1],"\n")
if(rg[2]>0)cat("------------> Наибольшая ошибка в меньшую сторону:",rg[2],"\n")
s=sum(abs(err)/df$SM*100>maxerror)
len=length(err)
cat("Модель ошиблась более чем на",maxerror,"% в",s,"случаях из",len,"(",s/len*100,"%)\n")
s=sum(abs(err)>maxerror)
cat("Модель ошиблась более чем на",maxerror,"кг в",s,"случаях из",len,"(",s/len*100,"%)\n")
cat("-------------------> Среднеквадратичная ошибка:",Error(vals,df$SM),"\n")
}
md=lm(SM~Val:Count:CountGroup+Val:CountGroup+Val+Val:Count,data)
Show(predict(md,data %>% select(Val,Count,CountGroup)))
#оптимизация чисто коэффициента
md=nls(SM~Val*(1+coef*Count),
data=data,
start = list(coef=0.0333))
summary(md)
Show(predict(md,data[3:4]))
data=read_tsv("data.tsv",
skip=1,col_names = F,na="",
col_types = "fddnfffnnnff",
comment="#"
) %>% tbl_df()
data=read_tsv("data.tsv",
skip=1,col_names = F,na="",
col_types = "fddnfffnnnff",
comment="#"
) %>% tbl_df()
Show(predict(md,data[3:4]))
data=read_tsv("data.tsv",
skip=1,col_names = F,na="",
col_types = "fddnfffnnnff",
comment="#"
) %>% tbl_df()
colnames(data)=c("Date","SM","Val","Count","Type","Sex","Experience","Age","Weight","High","Body","Mail")
data %<>% mutate(
CountGroup=cut(Count,breaks = c(1,3,7,12,20,50)),
AgeGroup=cut(Age,breaks = c(1,19,27,35,70))
)%>% select(-Date)#,-Mail) %>% filter(Count>1,Val<SM)
levels(data$CountGroup)=c("2-3","4-7","8-12","13-20",">20")
levels(data$AgeGroup)=c("<20","20-27","28-35",">35")
allrows=1:nrow(data)
maxerror=2
md=nls(SM~Val*(1+coef*Count),
data=data,
start = list(coef=0.0333))
summary(md)
Show(predict(md,data[3:4]))
