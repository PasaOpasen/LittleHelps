getFan=function(vec,main=""){
pr=getparam(vec)
fan.plot(pr$x,labels=pr$ns,main=main)
}
obj=ggplot(data %>% select(-Count))+theme_bw()
bx=obj+geom_boxplot(aes(x=CountGroup,y=RM/MRM))+
labs(title = "Отношение повторного максимума к многоповторному в зависимости от числа повторений",
x="Диапазон повторений",y="Отношение повторного максимума к многоповторному",
caption = "Каждый диапазон повторений действует по своим законам \n и нуждается в собственной версии модели")+
theme_tq()
bx+facet_grid(~BodyType)+theme_bw()+labs(caption="caption")
bx+facet_grid(~BodyType)+theme_bw()+labs(caption="Для числа повторений до 10 тип телосложения не имеет значения")
#bx+facet_grid(~Sex)+theme_bw()+labs(caption="caption")
bx+facet_grid(~Action)+theme_bw()+labs(caption="caption")
bx=ggplot(data)+geom_boxplot(aes(x=CountGroup,y=RM/MRM))+
labs(title = "Отношение повторного максимума к многоповторному в зависимости от числа повторений",
x="Диапазон повторений",y="Отношение повторного максимума к многоповторному",
caption = "Каждый диапазон повторений действует по своим законам \n и нуждается в собственной версии модели")+
theme_tq()
bx
#bx+facet_grid(~Sex)+theme_bw()+labs(caption="caption")
bx+facet_grid(~Action)+theme_bw()+labs(caption="caption")
#bx+facet_grid(~Sex)+theme_bw()+labs(caption="caption")
bx+facet_grid(~Action)+theme_bw()+labs(caption="Присед имеет хорошую выносливость на большом числе повдторений, жим -- на маленьком",
subtitle = "Чем отношение ниже, тем более 'выносливы' мышцы в том или ином диапазоне")
bx+facet_grid(~BodyType)+theme_bw()+labs(caption="Для числа повторений до 10 тип телосложения не имеет значения")
bx+facet_grid(~BodyType)+theme_bw()+labs(caption="Для числа повторений до 10 тип телосложения не имеет значения. На высоком числе повторений эндоморфы менее выносливы")
#по этому графику видно, что повторения делятся на линейные группы, то есть в пределах группы они дают одинаковый прирост
plot(seq(-10,10,length.out=50) %>% map_dbl(function(x)1/(1+exp(-x))) )
data %<>%filter(Count<=20)
plt=ggplot(data)+theme_bw()
plt+geom_density(aes(x=RM))
plt+geom_density(aes(x=RM))+geom_histogram(aes(x=RM),breaks=10)
plt+geom_density(aes(x=RM))+geom_histogram(aes(x=RM),bins=10)
plt+geom_density(aes(x=RM))
plt+geom_density(aes(x=RM))+geom_density(aes(x=MRM))
plt+geom_density(aes(x=RM),fill="green")+geom_density(aes(x=MRM))
plt+geom_density(aes(x=RM),fill="green")+geom_density(aes(x=MRM,fill="blue",alpha=0.5))
plt+geom_density(aes(x=RM),fill="green")+geom_density(aes(x=MRM,fill="red",alpha=0.5))
plt+geom_density(aes(x=RM),fill="green")+geom_density(aes(x=MRM,fill="red",alpha=0.5))+
labs(fill="")
plt+geom_density(aes(x=RM),fill="green")+geom_density(aes(x=MRM,fill="red",alpha=0.5))+
labs(x="RM (зелёное), MRM (красное)",y="ядерная плотность",title = 'Плотность распределения повторного максимума и многоповторного максимума')+
theme(legend.position = 'none')
data %>% summary()
plt+geom_bar(aes(x=factor(Count)))
plt+geom_bar(aes(x=CountGroup,col=BodyType))+coord_flip()
plt+geom_bar(aes(x=CountGroup,fill=BodyType))+coord_flip2()
plt+geom_bar(aes(x=CountGroup,fill=BodyType),position=position_dodge2())
plt+geom_bar(aes(x=CountGroup,fill=BodyType),position=position_dodge2())+theme(legend.position = c(.9,.9))+
labs(x="Диапазон повторений",y="Количество", title = "Количество наблюдений в каждом диапазоне повторений")
plt+geom_bar(aes(x=CountGroup,fill=BodyType),position=position_dodge2())+theme(legend.position = c(.9,.9))+
labs(x="Диапазон повторений",y="Количество", title = "Количество наблюдений в каждом диапазоне повторений",fill="Телосложение")
plt+geom_bar(aes(x=CountGroup,fill=BodyType),position=position_dodge2())+theme(legend.position = c(.85,.9))+
labs(x="Диапазон повторений",y="Количество", title = "Количество наблюдений в каждом диапазоне повторений",fill="Телосложение")
plt+geom_bar(aes(x=IndexGroup,fill=BodyType),position=position_dodge2())+theme(legend.position = c(.85,.9))+
labs(x="Диапазон повторений",y="Количество", title = "Количество наблюдений в каждом диапазоне повторений",fill="Телосложение")
plt+geom_bar(aes(x=AgeGroup,fill=BodyType),position=position_dodge2())+theme(legend.position = c(.85,.9))+
labs(x="Категория по индексу массы тела",y="Количество", title = "Количество наблюдений в каждой категории по индексу массы тела",fill="Телосложение")
plt+geom_bar(aes(x=Action,fill=BodyType),position=position_dodge2())+theme(legend.position = c(.85,.9))+
labs(x="Категория по возрасту",y="Количество", title = "Количество наблюдений в каждой категории по возрасту",fill="Телосложение")
plt+geom_bar(aes(x=Action,fill=BodyType),position=position_dodge2())+theme(legend.position = c(.85,.9))+
labs(x="Движение",y="Количество", title = "Количество наблюдений в каждом движении",fill="Телосложение")
plt+geom_density(aes(x=Age),fill="green")+geom_density(aes(x=Index,fill="red",alpha=0.5))+
labs(x="RM (зелёное), MRM (красное)",y="ядерная плотность",title = 'Плотность распределения повторного максимума и многоповторного максимума')+
theme(legend.position = 'none')
plt+geom_point(aes(x=Weight,y=Height,col=Experience))
plt+geom_point(aes(x=Weight,y=Height,col=Experience),size=2)
plt+geom_point(aes(x=Weight,y=Height,col=Experience),size=2)+facet_grid(vars(Action),vars(BodyType))
plt+geom_point(aes(x=Weight,y=Height,col=AgeGroup,shape=Sex),size=2)+facet_grid(vars(Action),vars(BodyType))
plt+geom_point(aes(x=Weight,y=Height,col=AgeGroup,shape=Sex),size=2.5)+
facet_grid(vars(Action),vars(BodyType))+
labs(x="Вес",y="Рост",shape="Пол",col="Возраст",title = "Зависимость между ростом и весом")
[sapply(data,is.numeric)
sapply(data,is.numeric)
sapply(data[sapply(data,is.numeric)], function(x)shapiro.test(x)$p.value)
density(data$Height)
hist(data$Height)
sapply(data.unique[sapply(data,is.numeric)] %>% filter(Count<=20), function(x)shapiro.test(x)$p.value)
sapply(data.unique[sapply(data.unique,is.numeric)] %>% filter(Count<=20), function(x)shapiro.test(x)$p.value)
data.unique
sapply(data[sapply(data,is.numeric)], function(x)shapiro.test(x)$p.value)
data$Height
data$Height %>% factor() %>% summary()
install.packages("nortest")
library(nortest)
p=data$MRM
ad.test(p)
p %>% cvm.test()
p %>% lillie.test()
p %>% pearson.test()
p %>% sf.test()
qqplot(p)
qqnorm(p)
data$Height %>% qqnorm()
#Загрузка данных####
library(tidyverse)
library(magrittr)
library(ggformula)
library(ggthemes)
library(tidyquant)
library(ggvis)
library(plotrix)
library(car)
#library(DAAG)
library(leaps)
library(plotly)
data=read_tsv("data(rus).tsv",
skip=1,col_names = F,na="",
col_types = "fddnfffnnnff",
comment="#"
) %>% tbl_df()
colnames(data)=c("Date","RM","MRM","Count","Action","Sex","Experience","Age","Weight","Height","BodyType","Mail")
data %<>%#filter(Count<=20) %>%
arrange(MRM,Count,Weight) %>%  mutate(
CountGroup=cut(Count,breaks = c(1,3,6,10,20,40)),
AgeGroup=cut(Age,breaks = c(1,19,27,35,70)),
Experience=factor(Experience,levels = c("До двух лет","2-3 года","4-5 лет","6-10 лет","11-15 лет" ,"больше 15 лет"),ordered = T),
Index=Weight/(0.01*Height)^2,
IndexGroup=cut(Index,breaks = c(0,16,18.5,24.99,30,35,40,60))
)%>% select(-Date)#,-Mail) %>% filter(Count>1,MRM<RM)
levels(data$CountGroup)=c("2-3","4-6","7-10","11-20",">20")
levels(data$AgeGroup)=c("<20","20-27","28-35",">35")
levels(data$IndexGroup)=c("выраженный дефицит","дефицит","норма","избыток","ожирение1","ожирение2","ожирение3")
ex=data$Experience %>% as.numeric()
ex[ex==6]=5
ex %<>%factor()
levels(ex)=c("До двух лет","2-3 года","4-5 лет","6-10 лет","больше 10 лет")
data %<>%mutate(Experience=factor(ex,ordered = T))
allrows=1:nrow(data)
maxerror=2
#уникальные записи (где один от каждого человека берётся только одна запись)
#объяснить, по каким признакам людей считать одинаковыми
data.unique=data %>% select(AgeGroup,Height,BodyType,Experience,Sex,IndexGroup) %>% unique()
#функции
getparam=function(vec){
ln=length(levels(vec))
x=numeric(ln)
ns=character(ln)
for(i in seq(ln)){
x[i]=sum(vec==levels(vec)[i])/length(vec)
ns[i]=paste0(levels(vec)[i]," (",round(x[i]*100,2),"%)")
}
return(list(x=x,ns=ns))
}
getPIE=function(vec,main=""){
lst=getparam(vec)
pie(x=lst$x,labels=lst$ns,main=main)
}
getFan=function(vec,main=""){
pr=getparam(vec)
fan.plot(pr$x,labels=pr$ns,main=main)
}
data %<>%filter(Count<=20)
data %>% summary()
ResAn=function(res){
shapiro.test(res) %>% print()
p=ggplot(data %>% mutate(res=res),aes(x=CountGroup,y=res))+
geom_boxplot()+labs(x="Группа повторений",y="Остатки (цель - предсказание)",title="Распределения остатков в зависимости от группы повторений")+theme_bw()
print(p)
(p+facet_grid(vars(Action))) %>% print()
p+facet_grid(vars(BodyType),vars(Action))
}
#из этого графика можно сделать вывод, что модель неплохо работает на диапазоне 2-3, но на диапазоне 13-20 ошибка какая-то сильно отличающаяся от тенденции уменьшения ошибок, так что этот диапазон надо бы и вообще убрать, так как там уже играют роль свойства красных волокон, не говорящие о силе
ResAn(data$RM-data$MRM*(1+0.0333*data$Count))
ResVal=function(vals)ResAn(data$RM-vals)
md=lm(RM~MRM+MRM:Count:CountGroup-1,data)
Error=function(target,weight) (target-weight)^2 %>% mean() %>% sqrt()
Show=function(vals,df=data){
#vals=predict(model,df)
err=df$RM-vals
cbind(value=vals,Target=df$RM,Set=paste0(df$MRM,"*",df$Count),
ERROR=abs(df$RM-vals),
ErrorPercent=abs(err)/df$RM*100,
df[,c(3:15)]) %>% tbl_df() %>% select(-Count, IndexGroup)%>% arrange(-ERROR,-ErrorPercent,Weight) %>%
filter(ERROR>1)%>% print()
cat("\n")
rg=range(err)#;print(err);print(rg)
if(rg[1]<0)cat("------------> Наибольшая ошибка в большую сторону:",-rg[1],"\n")
if(rg[2]>0)cat("------------> Наибольшая ошибка в меньшую сторону:",rg[2],"\n")
s=sum(abs(err)/df$RM*100>maxerror)
len=length(err)
cat("Модель ошиблась более чем на",maxerror,"% в",s,"случаях из",len,"(",s/len*100,"%)\n")
s=sum(abs(err)>maxerror)
cat("Модель ошиблась более чем на",maxerror,"кг в",s,"случаях из",len,"(",s/len*100,"%)\n")
cat("-------------------> Среднеквадратичная ошибка:",Error(vals,df$RM),"\n")
}
ShowErrors=function(model,power.coef=1,sum.coef=0){
Show(predict(model,data)*power.coef+sum.coef)
cat("Оценка кросс-валидации для всего набора данных",
boot::cv.glm(data,glm(formula = md$call$formula,data=data),K=10)$delta[1],"\n")
cat("Оценка кросс-валидации для не более чем 10 повторений",
boot::cv.glm(data %>% filter(Count<11),glm(formula = md$call$formula,data=data %>% filter(Count<11)),K=10)$delta[1],"\n")
cat("Оценка кросс-валидации для не более чем 6 повторений",
boot::cv.glm(data %>% filter(Count<7),glm(formula = md$call$formula,data=data %>% filter(Count<7)),K=10)$delta[1],"\n")
}
ShowErrors
ShowErrors(md)
qqPlot(md,main="Q-Q plot")
par(mfrow=c(2,2))
plot(md)
par(mfrow=c(1,1))
outlierTest(md)
influencePlot(md,main="Диаграмма влияния",sub="Размеры кругов пропорциональны расстояниям Кука")
gvlma::gvlma(md) %>% summary()
durbinWatsonTest(md)#тест на автокорреляцию
ncvTest(md)#однородность дисперсии
mysummary=function(md){
qqPlot(md,main="Q-Q plot")
durbinWatsonTest(md)#тест на автокорреляцию
ncvTest(md)#однородность дисперсии
gvlma::gvlma(md) %>% summary()
vif(md)
par(mfrow=c(2,2))
plot(md)
par(mfrow=c(1,1))
outlierTest(md)
influencePlot(md,main="Диаграмма влияния",sub="Размеры кругов пропорциональны расстояниям Кука")
}
md %>% mysummary()
mysummary=function(md){
cat("--->\n")
gvlma::gvlma(md) %>% summary()
cat("--->\n")
shapiro.test(res) %>% print()
vif(md)
par(mfrow=c(2,2))
plot(md)
par(mfrow=c(1,1))
qqPlot(md,main="Q-Q plot")
durbinWatsonTest(md)#тест на автокорреляцию
ncvTest(md)#однородность дисперсии
outlierTest(md)
influencePlot(md,main="Диаграмма влияния",sub="Размеры кругов пропорциональны расстояниям Кука")
}
md %>% mysummary()
mysummary=function(md){
cat("-----> ОБЩАЯ ИНФОРМАЦИЯ О МОДЕЛИ:\n")
gvlma::gvlma(md) %>% summary()
cat("-----> БАЗОВЫЕ ГРАФИКИ:\n")
par(mfrow=c(2,2))
plot(md)
par(mfrow=c(1,1))
cat("-----> ТЕСТ НА НОРМАЛЬНОСТЬ РАСПРЕДЕЛЕНИЯ ОСТАТКОВ\n")
shapiro.test(md$residuals) %>% print()
qqPlot(md,main="Q-Q plot")
cat("-----> ФАКТОР ИНФЛЯЦИИ ДИСПЕРСИЙ:\n")
vif(md)
cat("-----> ТЕСТ НА АВТОКОРРЕЛЯЦИЮ:\n")
durbinWatsonTest(md)#тест на автокорреляцию
cat("-----> ТЕСТ НА ОДНОРОДНОСТЬ ДИСПЕРСИИ:\n")
ncvTest(md)#однородность дисперсии
cat("-----> ТЕСТ НА ВЫБРОСЫ:\n")
outlierTest(md)
influencePlot(md,main="Диаграмма влияния",sub="Размеры кругов пропорциональны расстояниям Кука")
}
md %>% mysummary()
mysummary=function(md){
cat("-----> ОБЩАЯ ИНФОРМАЦИЯ О МОДЕЛИ:\n")
gvlma::gvlma(md) %>% summary()
cat("-----> БАЗОВЫЕ ГРАФИКИ:\n")
par(mfrow=c(2,2))
plot(md)
par(mfrow=c(1,1))
cat("-----> ТЕСТ НА НОРМАЛЬНОСТЬ РАСПРЕДЕЛЕНИЯ ОСТАТКОВ\n")
shapiro.test(md$residuals) %>% print()
qqPlot(md,main="Q-Q plot")
cat("-----> ФАКТОР ИНФЛЯЦИИ ДИСПЕРСИЙ:\n")
vif(md)
cat("-----> ТЕСТ НА АВТОКОРРЕЛЯЦИЮ:\n")
durbinWatsonTest(md) %>% print()#тест на автокорреляцию
cat("-----> ТЕСТ НА ОДНОРОДНОСТЬ ДИСПЕРСИИ:\n")
ncvTest(md)%>% print()#однородность дисперсии
cat("-----> ТЕСТ НА ВЫБРОСЫ:\n")
outlierTest(md)%>% print()
influencePlot(md,main="Диаграмма влияния",sub="Размеры кругов пропорциональны расстояниям Кука")
}
md %>% mysummary()
outlierTest(md)
str(outlierTest(md))
outlierTest(md)$name
outlierTest(md)$names
outlierTest(md)$p
outlierTest(md)$p %>% names()
mysummary=function(md){
cat("-----> ОБЩАЯ ИНФОРМАЦИЯ О МОДЕЛИ:\n")
gvlma::gvlma(md) %>% summary()
cat("-----> БАЗОВЫЕ ГРАФИКИ:\n")
par(mfrow=c(2,2))
plot(md)
par(mfrow=c(1,1))
cat("-----> ТЕСТ НА НОРМАЛЬНОСТЬ РАСПРЕДЕЛЕНИЯ ОСТАТКОВ\n")
shapiro.test(md$residuals) %>% print()
qqPlot(md,main="Q-Q plot")
cat("-----> ФАКТОР ИНФЛЯЦИИ ДИСПЕРСИЙ:\n")
vif(md)%>% print()
cat("-----> ТЕСТ НА АВТОКОРРЕЛЯЦИЮ:\n")
durbinWatsonTest(md) %>% print()#тест на автокорреляцию
cat("-----> ТЕСТ НА ОДНОРОДНОСТЬ ДИСПЕРСИИ:\n")
ncvTest(md)%>% print()#однородность дисперсии
cat("-----> ТЕСТ НА ВЫБРОСЫ:\n")
outlierTest(md)%>% print()
data[outlierTest(md)$p %>% names() %>% as.numeric(),] %>% print()
influencePlot(md,main="Диаграмма влияния",sub="Размеры кругов пропорциональны расстояниям Кука")
}
md %>% mysummary()
mysummary=function(md){
cat("-----> ОБЩАЯ ИНФОРМАЦИЯ О МОДЕЛИ:\n")
gvlma::gvlma(md) %>% summary()
cat("-----> БАЗОВЫЕ ГРАФИКИ:\n")
par(mfrow=c(2,2))
plot(md)
par(mfrow=c(1,1))
cat("-----> ТЕСТ НА НОРМАЛЬНОСТЬ РАСПРЕДЕЛЕНИЯ ОСТАТКОВ\n")
shapiro.test(md$residuals) %>% print()
qqPlot(md,main="Q-Q plot")
cat("-----> ФАКТОР ИНФЛЯЦИИ ДИСПЕРСИЙ:\n")
vif(md)%>% print()
cat("-----> ТЕСТ НА АВТОКОРРЕЛЯЦИЮ:\n")
durbinWatsonTest(md) %>% print()#тест на автокорреляцию
cat("-----> ТЕСТ НА ОДНОРОДНОСТЬ ДИСПЕРСИИ:\n")
ncvTest(md)%>% print()#однородность дисперсии
cat("-----> ТЕСТ НА ВЫБРОСЫ:\n")
outlierTest(md)%>% print()
data[outlierTest(md)$p %>% names() %>% as.numeric(),-c(Mail)] %>% print()
influencePlot(md,main="Диаграмма влияния",sub="Размеры кругов пропорциональны расстояниям Кука")
}
md %>% mysummary()
mysummary=function(md){
cat("-----> ОБЩАЯ ИНФОРМАЦИЯ О МОДЕЛИ:\n")
gvlma::gvlma(md) %>% summary()
cat("-----> БАЗОВЫЕ ГРАФИКИ:\n")
par(mfrow=c(2,2))
plot(md)
par(mfrow=c(1,1))
cat("-----> ТЕСТ НА НОРМАЛЬНОСТЬ РАСПРЕДЕЛЕНИЯ ОСТАТКОВ\n")
shapiro.test(md$residuals) %>% print()
qqPlot(md,main="Q-Q plot")
cat("-----> ФАКТОР ИНФЛЯЦИИ ДИСПЕРСИЙ:\n")
vif(md)%>% print()
cat("-----> ТЕСТ НА АВТОКОРРЕЛЯЦИЮ:\n")
durbinWatsonTest(md) %>% print()#тест на автокорреляцию
cat("-----> ТЕСТ НА ОДНОРОДНОСТЬ ДИСПЕРСИИ:\n")
ncvTest(md)%>% print()#однородность дисперсии
cat("-----> ТЕСТ НА ВЫБРОСЫ:\n")
outlierTest(md)%>% print()
data[outlierTest(md)$p %>% names() %>% as.numeric(),-Mail] %>% print()
influencePlot(md,main="Диаграмма влияния",sub="Размеры кругов пропорциональны расстояниям Кука")
}
md %>% mysummary()
mysummary=function(md){
cat("-----> ОБЩАЯ ИНФОРМАЦИЯ О МОДЕЛИ:\n");cat("\n")
gvlma::gvlma(md) %>% summary();cat("\n")
cat("-----> БАЗОВЫЕ ГРАФИКИ:\n");cat("\n")
par(mfrow=c(2,2))
plot(md)
par(mfrow=c(1,1)) ;cat("\n")
cat("-----> ТЕСТ НА НОРМАЛЬНОСТЬ РАСПРЕДЕЛЕНИЯ ОСТАТКОВ\n");cat("\n")
shapiro.test(md$residuals) %>% print();cat("\n")
qqPlot(md,main="Q-Q plot")
cat("-----> ФАКТОР ИНФЛЯЦИИ ДИСПЕРСИЙ:\n");cat("\n")
vif(md)%>% print();cat("\n")
cat("-----> ТЕСТ НА АВТОКОРРЕЛЯЦИЮ:\n");cat("\n")
durbinWatsonTest(md) %>% print();cat("\n")   #тест на автокорреляцию
cat("-----> ТЕСТ НА ОДНОРОДНОСТЬ ДИСПЕРСИИ:\n");cat("\n")
ncvTest(md)%>% print();cat("\n")    #однородность дисперсии
cat("-----> ТЕСТ НА ВЫБРОСЫ:\n");cat("\n")
outlierTest(md)%>% print()
data[outlierTest(md)$p %>% names() %>% as.numeric()] %>% filter(-Mail) %>% print();cat("\n")
influencePlot(md,main="Диаграмма влияния",sub="Размеры кругов пропорциональны расстояниям Кука")
}
md %>% mysummary()
mysummary=function(md){
cat("-----> ОБЩАЯ ИНФОРМАЦИЯ О МОДЕЛИ:\n");cat("\n")
gvlma::gvlma(md) %>% summary();cat("\n")
cat("-----> БАЗОВЫЕ ГРАФИКИ:\n");cat("\n")
par(mfrow=c(2,2))
plot(md)
par(mfrow=c(1,1)) ;cat("\n")
cat("-----> ТЕСТ НА НОРМАЛЬНОСТЬ РАСПРЕДЕЛЕНИЯ ОСТАТКОВ\n");cat("\n")
shapiro.test(md$residuals) %>% print();cat("\n")
qqPlot(md,main="Q-Q plot")
cat("-----> ФАКТОР ИНФЛЯЦИИ ДИСПЕРСИЙ:\n");cat("\n")
vif(md)%>% print();cat("\n")
cat("-----> ТЕСТ НА АВТОКОРРЕЛЯЦИЮ:\n");cat("\n")
durbinWatsonTest(md) %>% print();cat("\n")   #тест на автокорреляцию
cat("-----> ТЕСТ НА ОДНОРОДНОСТЬ ДИСПЕРСИИ:\n");cat("\n")
ncvTest(md)%>% print();cat("\n")    #однородность дисперсии
cat("-----> ТЕСТ НА ВЫБРОСЫ:\n");cat("\n")
outlierTest(md)%>% print()
data[outlierTest(md)$p %>% names() %>% as.numeric()] %>% select(-Mail) %>% print();cat("\n")
influencePlot(md,main="Диаграмма влияния",sub="Размеры кругов пропорциональны расстояниям Кука")
}
md %>% mysummary()
mysummary=function(md){
cat("-----> ОБЩАЯ ИНФОРМАЦИЯ О МОДЕЛИ:\n");cat("\n")
gvlma::gvlma(md) %>% summary();cat("\n")
cat("-----> БАЗОВЫЕ ГРАФИКИ:\n");cat("\n")
par(mfrow=c(2,2))
plot(md)
par(mfrow=c(1,1)) ;cat("\n")
cat("-----> ТЕСТ НА НОРМАЛЬНОСТЬ РАСПРЕДЕЛЕНИЯ ОСТАТКОВ\n");cat("\n")
shapiro.test(md$residuals) %>% print();cat("\n")
qqPlot(md,main="Q-Q plot")
cat("-----> ФАКТОР ИНФЛЯЦИИ ДИСПЕРСИЙ:\n");cat("\n")
vif(md)%>% print();cat("\n")
cat("-----> ТЕСТ НА АВТОКОРРЕЛЯЦИЮ:\n");cat("\n")
durbinWatsonTest(md) %>% print();cat("\n")   #тест на автокорреляцию
cat("-----> ТЕСТ НА ОДНОРОДНОСТЬ ДИСПЕРСИИ:\n");cat("\n")
ncvTest(md)%>% print();cat("\n")    #однородность дисперсии
cat("-----> ТЕСТ НА ВЫБРОСЫ:\n");cat("\n")
outlierTest(md)%>% print()
data[outlierTest(md)$p %>% names() %>% as.numeric()] %>% print();cat("\n")
influencePlot(md,main="Диаграмма влияния",sub="Размеры кругов пропорциональны расстояниям Кука")
}
md %>% mysummary()
mysummary=function(md){
cat("-----> ОБЩАЯ ИНФОРМАЦИЯ О МОДЕЛИ:\n");cat("\n")
gvlma::gvlma(md) %>% summary();cat("\n")
cat("-----> БАЗОВЫЕ ГРАФИКИ:\n");cat("\n")
par(mfrow=c(2,2))
plot(md)
par(mfrow=c(1,1)) ;cat("\n")
cat("-----> ТЕСТ НА НОРМАЛЬНОСТЬ РАСПРЕДЕЛЕНИЯ ОСТАТКОВ\n");cat("\n")
shapiro.test(md$residuals) %>% print();cat("\n")
qqPlot(md,main="Q-Q plot")
cat("-----> ФАКТОР ИНФЛЯЦИИ ДИСПЕРСИЙ:\n");cat("\n")
vif(md)%>% print();cat("\n")
cat("-----> ТЕСТ НА АВТОКОРРЕЛЯЦИЮ:\n");cat("\n")
durbinWatsonTest(md) %>% print();cat("\n")   #тест на автокорреляцию
cat("-----> ТЕСТ НА ОДНОРОДНОСТЬ ДИСПЕРСИИ:\n");cat("\n")
ncvTest(md)%>% print();cat("\n")    #однородность дисперсии
cat("-----> ТЕСТ НА ВЫБРОСЫ:\n");cat("\n")
outlierTest(md)%>% print()
data[outlierTest(md)$p %>% names() %>% as.numeric(),] %>% select(-Mail) %>% print();cat("\n")
influencePlot(md,main="Диаграмма влияния",sub="Размеры кругов пропорциональны расстояниям Кука")
}
md %>% mysummary()
influencePlot(md,main="Диаграмма влияния",sub="Размеры кругов пропорциональны расстояниям Кука") %>% str()
influencePlot(md,main="Диаграмма влияния",sub="Размеры кругов пропорциональны расстояниям Кука")$Hat
influencePlot(md,main="Диаграмма влияния",sub="Размеры кругов пропорциональны расстояниям Кука") %>% names()
influencePlot(md,main="Диаграмма влияния",sub="Размеры кругов пропорциональны расстояниям Кука") %>% colnames()
influencePlot(md,main="Диаграмма влияния",sub="Размеры кругов пропорциональны расстояниям Кука") %>% rownames()
mysummary=function(md){
cat("-----> ОБЩАЯ ИНФОРМАЦИЯ О МОДЕЛИ:\n");cat("\n")
gvlma::gvlma(md) %>% summary();cat("\n")
cat("-----> БАЗОВЫЕ ГРАФИКИ:\n");cat("\n")
par(mfrow=c(2,2))
plot(md)
par(mfrow=c(1,1)) ;cat("\n")
cat("-----> ТЕСТ НА НОРМАЛЬНОСТЬ РАСПРЕДЕЛЕНИЯ ОСТАТКОВ\n");cat("\n")
shapiro.test(md$residuals) %>% print();cat("\n")
qqPlot(md,main="Q-Q plot")
cat("-----> ФАКТОР ИНФЛЯЦИИ ДИСПЕРСИЙ:\n");cat("\n")
vif(md)%>% print();cat("\n")
cat("-----> ТЕСТ НА АВТОКОРРЕЛЯЦИЮ:\n");cat("\n")
durbinWatsonTest(md) %>% print();cat("\n")   #тест на автокорреляцию
cat("-----> ТЕСТ НА ОДНОРОДНОСТЬ ДИСПЕРСИИ:\n");cat("\n")
ncvTest(md)%>% print();cat("\n")    #однородность дисперсии
cat("-----> ТЕСТ НА ВЫБРОСЫ:\n");cat("\n")
outs=outlierTest(md)
outs%>% print()
influ=influencePlot(md,main="Диаграмма влияния",sub="Размеры кругов пропорциональны расстояниям Кука")
influ %>% print()
cat("-----> ВЫБРОСЫ И ВЛИЯТЕЛЬНЫЕ НАБЛЮДЕНИЯ:\n");cat("\n")
data[c(outs$p %>% names(),influ %>% rownames()) %>% as.numeric(),] %>%
select(-Mail) %>% print();cat("\n")
}
md %>% mysummary()
mysummary=function(md){
cat("-----> ОБЩАЯ ИНФОРМАЦИЯ О МОДЕЛИ:\n");cat("\n")
gvlma::gvlma(md) %>% summary();cat("\n")
cat("-----> БАЗОВЫЕ ГРАФИКИ:\n");cat("\n")
par(mfrow=c(2,2))
plot(md)
par(mfrow=c(1,1)) ;cat("\n")
cat("-----> ТЕСТ НА НОРМАЛЬНОСТЬ РАСПРЕДЕЛЕНИЯ ОСТАТКОВ\n");cat("\n")
shapiro.test(md$residuals) %>% print();cat("\n")
qqPlot(md,main="Q-Q plot")
cat("-----> ФАКТОР ИНФЛЯЦИИ ДИСПЕРСИЙ:\n");cat("\n")
vif(md)%>% print();cat("\n")
cat("-----> ТЕСТ НА АВТОКОРРЕЛЯЦИЮ:\n");cat("\n")
durbinWatsonTest(md) %>% print();cat("\n")   #тест на автокорреляцию
cat("-----> ТЕСТ НА ОДНОРОДНОСТЬ ДИСПЕРСИИ:\n");cat("\n")
ncvTest(md)%>% print();cat("\n")    #однородность дисперсии
cat("-----> ТЕСТ НА ВЫБРОСЫ И ВЛИЯТЕЛЬНЫЕ НАБЛЮДЕНИЯ:\n");cat("\n")
outs=outlierTest(md)
outs%>% print()
influ=influencePlot(md,main="Диаграмма влияния",sub="Размеры кругов пропорциональны расстояниям Кука")
influ %>% print()
cat("-----> ВЫБРОСЫ И ВЛИЯТЕЛЬНЫЕ НАБЛЮДЕНИЯ:\n");cat("\n")
data[c(outs$p %>% names(),influ %>% rownames()) %>% as.numeric(),] %>% unique() %>%
select(-Mail) %>% arrange(RM,-Count) %>% print();cat("\n")
}
md %>% mysummary()
shapiro.test(data$RM)
knitr::opts_chunk$set(echo = F,include = TRUE,tidy = TRUE,cache = FALSE,eval = TRUE, message = FALSE,warning = FALSE,fig.align = "center")
rs=data$RM-data$MRM*(1+0.0333*data$Count)
Show(rs)
data$RM-data$MRM*(1+0.0333*data$Count)
Show(data$MRM*(1+0.0333*data$Count))
m1=lm(RM~MRM+MRM:Count,data)
m1 %>% ShowErrors()
m1 %>% predict(data$RM) %>% ResVal()
m1 %>% predict(data) %>% ResVal()
m1 %>% predict(data) %>% ResVal()
m1 %>% mysummary()
m1 %>% predict(data) %>% ResVal()
m1
str(m1)
m1 %>% predict(data)
m1 %>% predict(data) %>% ResVal()
