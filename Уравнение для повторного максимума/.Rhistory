}
return(list(x=x,ns=ns))
}
getPIE=function(vec,main=""){
lst=getparam(vec)
pie(x=lst$x,labels=lst$ns,main=main)
}
getFan=function(vec,main=""){
pr=getparam(vec)
fan.plot(pr$x,labels=pr$ns,main=main)
}
#По этому соотношению надо бы выбросы удалить
data %>% ggplot(aes(x=factor(Count),y=100*MRM/RM))+geom_boxplot()+coord_flip()+theme_bw()#+
data %>% mutate(perc=100*MRM/RM) %>% filter(Count<=15) %>%
group_by(factor(Count)) %>%
summarise(mean=t.test(perc,conf.level = 0.99)$estimate,
down=t.test(perc,conf.level = 0.99)$conf.int[1],
up=t.test(perc,conf.level = 0.99)$conf.int[2])
data %>% mutate(perc=100*MRM/RM) %>% filter(Count<=15) %>%
group_by(factor(Count)) %>%
summarise(mean=t.test(perc,conf.level = 0.99)$estimate,
down=t.test(perc,conf.level = 0.99)$conf.int[1],
up=t.test(perc,conf.level = 0.99)$conf.int[2])
data %>% mutate(perc=100*MRM/RM) %>% filter(Count<=15)
data %>% mutate(perc=100*MRM/RM) %>% filter(Count<=10|Count==12|Count=15|Count==20) %>%
group_by(factor(Count)) %>%
summarise(mean=t.test(perc,conf.level = 0.99)$estimate,
down=t.test(perc,conf.level = 0.99)$conf.int[1],
up=t.test(perc,conf.level = 0.99)$conf.int[2])
data %>% mutate(perc=100*MRM/RM) %>% filter(Count<=10|Count==12|Count==15|Count==20) %>%
group_by(factor(Count)) %>%
summarise(mean=t.test(perc,conf.level = 0.99)$estimate,
down=t.test(perc,conf.level = 0.99)$conf.int[1],
up=t.test(perc,conf.level = 0.99)$conf.int[2])
data %>% mutate(perc=100*MRM/RM) %>% filter(Count<=10|Count==12|Count==15|Count==20) %>%
group_by(factor(Count)) %>%
summarise(mean=t.test(perc,conf.level = 0.99)$estimate,
down=t.test(perc,conf.level = 0.99)$conf.int[1],
up=t.test(perc,conf.level = 0.99)$conf.int[2]) %>%
rename(c("f"))
data %>% mutate(perc=100*MRM/RM) %>% filter(Count<=10|Count==12|Count==15|Count==20) %>%
group_by(factor(Count)) %>%
summarise(mean=t.test(perc,conf.level = 0.99)$estimate,
down=t.test(perc,conf.level = 0.99)$conf.int[1],
up=t.test(perc,conf.level = 0.99)$conf.int[2]) %>%
rename("factor(Count)=Число повторений")
data %>% mutate(perc=100*MRM/RM) %>% filter(Count<=10|Count==12|Count==15|Count==20) %>%
group_by(factor(Count)) %>%
summarise(mean=t.test(perc,conf.level = 0.99)$estimate,
down=t.test(perc,conf.level = 0.99)$conf.int[1],
up=t.test(perc,conf.level = 0.99)$conf.int[2]) %>%
rename("factor(Count)"="Число повторений")
data %>% mutate(perc=100*MRM/RM) %>% filter(Count<=10|Count==12|Count==15|Count==20) %>%
group_by(factor(Count)) %>%
summarise(mean=t.test(perc,conf.level = 0.99)$estimate,
down=t.test(perc,conf.level = 0.99)$conf.int[1],
up=t.test(perc,conf.level = 0.99)$conf.int[2])
data %>% mutate(perc=100*MRM/RM) %>% filter(Count<=10|Count==12|Count==15|Count==20) %>%
group_by(factor(Count)) %>%
summarise(mean=t.test(perc,conf.level = 0.99)$estimate,
down=t.test(perc,conf.level = 0.99)$conf.int[1],
up=t.test(perc,conf.level = 0.99)$conf.int[2]) %>%
rename(!!c("Число повторений","Среднее","Нижнее","Предел"))
data %>% mutate(perc=100*MRM/RM) %>% filter(Count<=10|Count==12|Count==15|Count==20) %>%
group_by(factor(Count)) %>%
summarise(mean=t.test(perc,conf.level = 0.99)$estimate,
down=t.test(perc,conf.level = 0.99)$conf.int[1],
up=t.test(perc,conf.level = 0.99)$conf.int[2]) %>%
rename(!!c(var1="Число повторений",var2="Среднее",var3="Нижнее",var4="Предел"))
df=data %>% mutate(perc=100*MRM/RM) %>% filter(Count<=10|Count==12|Count==15|Count==20) %>%
group_by(factor(Count)) %>%
summarise(mean=t.test(perc,conf.level = 0.99)$estimate,
down=t.test(perc,conf.level = 0.99)$conf.int[1],
up=t.test(perc,conf.level = 0.99)$conf.int[2])
names(df)
df=data %>% mutate(perc=100*MRM/RM) %>% filter(Count<=10|Count==12|Count==15|Count==20) %>%
group_by(factor(Count)) %>%
summarise(mean=t.test(perc,conf.level = 0.99)$estimate,
down=t.test(perc,conf.level = 0.99)$conf.int[1],
up=t.test(perc,conf.level = 0.99)$conf.int[2])
names(df)=c("Число повторений","Среднее","Нижнее","Предел")
df
df=data %>% mutate(perc=100*MRM/RM) %>% filter(Count<=10|Count==12|Count==15|Count==20) %>%
group_by(factor(Count)) %>%
summarise(mean=t.test(perc,conf.level = 0.99)$estimate,
down=t.test(perc,conf.level = 0.99)$conf.int[1],
up=t.test(perc,conf.level = 0.99)$conf.int[2])
names(df)=c("Число повторений","Ожидаемый %","Нижняя граница","Верхняя граница")
df
#По этому соотношению надо бы выбросы удалить
data %>% ggplot(aes(x=factor(Count),y=100*MRM/RM))+geom_boxplot()+coord_flip()+theme_bw()#+
data.ct=data %>% filter(Count<=10|Count==12|Count==15|Count==20|Count==30|Count==35)
#По этому соотношению надо бы выбросы удалить
data.ct %>% ggplot(aes(x=factor(Count),y=100*MRM/RM))+geom_boxplot()+coord_flip()+theme_bw()#+
#По этому соотношению надо бы выбросы удалить
data.ct %>% ggplot(aes(x=factor(Count),y=100*MRM/RM))+geom_boxplot()+coord_flip()+theme_bw()+
labs(x="Число повторений",y="Какой процент составляет МПМ от ПМ")#+
prc+facet_wrap(~BodyType)
#По этому соотношению надо бы выбросы удалить
prc=data.ct %>% ggplot(aes(x=factor(Count),y=100*MRM/RM))+geom_boxplot()+coord_flip()+theme_bw()+
labs(x="Число повторений",y="Какой процент составляет МПМ от ПМ")
prc
prc+facet_wrap(~BodyType)
prc+facet_wrap(BodyType~)
prc+facet_wrap(BodyType~.)
prc+facet_grid(BodyType)
prc+facet_grid(vars(BodyType))
prc+facet_grid(vars(Action))
data.ct=data %>% filter(Count<=10|Count==12)
#По этому соотношению надо бы выбросы удалить
prc=data.ct %>% ggplot(aes(x=factor(Count),y=100*MRM/RM))+geom_boxplot()+coord_flip()+theme_bw()+
labs(x="Число повторений",y="Какой процент составляет МПМ от ПМ")
prc
prc+facet_grid(vars(Action))
prc %>% ggplotly()
(prc+facet_grid(vars(Action))) %>% ggplotly()
prc %>% ggplotly()
cors=sapply(1:10, function(x) data %>% filter(Count==x) %$% cor(RM,MRM))
сщ
cors
plot(cors)
install.packages("devtools")
library("devtools")
install_github("plotly", "ropensci")
paste(2:10,"повторений")
cors=sapply(2:10, function(x) data %>% filter(Count==x) %$% cor(RM,MRM))
names(cors)= paste(2:10,"repeats")
cors
#есть ли разница в проценте в зависимости от чего-то
pvalues=sapply(2:10, function(x) data %>% filter(Count==x) %$% aov(~BodyType,.))
#есть ли разница в проценте в зависимости от чего-то
pvalues=sapply(2:10, function(x) data %>% filter(Count==x) %$% aov(MRM/RM~BodyType,.))
pvalues
pvalues=sapply(2:10, function(x) data %>% filter(Count==x) %$% aov(MRM/RM~BodyType,.)$p.value)
pvalues
pvalues=sapply(2:10, function(x) data %>% filter(Count==x) %$% aov(MRM/RM~BodyType,.) %>% summary())
pvalues
pvalues=sapply(2:10, function(x) data %>% filter(Count==x) %$% aov(MRM/RM~BodyType,.)$Pr)
pvalues
#есть ли разница в проценте в зависимости от чего-то
pvalues=sapply(2:10, function(x) data %>% filter(Count==x) %$% aov(MRM/RM~BodyType,.))
pvalues
pvalues=sapply(2:10, function(x) data %>% filter(Count==x) %$% aov(MRM/RM~BodyType,.)%>% summary())
pvalues
View(pvalues)
pvalues=sapply(2:10, function(x) data %>% filter(Count==x) %$% aov(MRM/RM~BodyType,.)%>% summary()$'Pr(>F)')
pvalues
t=aov(RM~BodyType,data)
t
summary(t)
tt=summary(t)
tt$'p.value'
tt$p.value
tt[5]
tt['Pr']
tt['Pr(>F)']
tt['Pr (>F)']
pvalues=sapply(2:10, function(x) data %>% filter(Count==x) %$% aov(MRM/RM~BodyType,.)%>% summary() %>% .[[1]][["Pr(>F)"]])
pvalues
tt[[1]]
tt[[1][["Pr(>F)"]]]
tt[[1][["Pr(>F)"]]
tt[[1]][["Pr(>F)"]]
#есть ли разница в проценте в зависимости от чего-то
pvalues=sapply(2:10, function(x) data %>% filter(Count==x) %$% aov(MRM/RM~BodyType,.)%>% summary() %>% .[[1]][["Pr(>F)"]][1])
#есть ли разница в проценте в зависимости от чего-то
pvalues=sapply(2:10, function(x) data %>% filter(Count==x) %$% aov(MRM/RM~BodyType,.)%>% summary() %>% .[[1]][["Pr(>F)"]])
#есть ли разница в проценте в зависимости от чего-то
pvalues=sapply(2:10, function(x) data %>% filter(Count==x) %$% aov(MRM/RM~BodyType,.)%>% summary() %$% .[[1]][["Pr(>F)"]])
pvalues
#есть ли разница в проценте в зависимости от чего-то
pvalues=sapply(2:10, function(x) data %>% filter(Count==x) %$% aov(MRM/RM~BodyType,.)%>% summary() %$% .[[1]][["Pr(>F)"]][1])
pvalues
#есть ли разница в проценте в зависимости от чего-то
pvalues=sapply(2:10, function(x) data %>% filter(Count==x) %$% aov(MRM/RM~BodyType,.)%>% summary() %$% .[[1]][["Pr(>F)"]][1])
names(pvalues)=names(cors)
pvalues
#есть ли разница в проценте в зависимости от чего-то
pvalues=sapply(2:10, function(x) data %>% filter(Count==x) %$% aov(MRM/RM~Action,.)%>% summary() %$% .[[1]][["Pr(>F)"]][1])
names(pvalues)=names(cors)
pvalues
pvalues=sapply(2:5, function(x) data %>% filter(Count==x) %$% aov(MRM/RM~Action,.)%>% summary() %$% .[[1]][["Pr(>F)"]][1])
pvalues
pvalues=sapply(2:7, function(x) data %>% filter(Count==x) %$% aov(MRM/RM~Action,.)%>% summary() %$% .[[1]][["Pr(>F)"]][1])
pvalues=sapply(2:6, function(x) data %>% filter(Count==x) %$% aov(MRM/RM~Action,.)%>% summary() %$% .[[1]][["Pr(>F)"]][1])
pvalues
names(pvalues)=names(cors)
pvalues=sapply(2:6, function(x) data %>% filter(Count==x) %$% aov(MRM/RM~AgeGroup,.)%>% summary() %$% .[[1]][["Pr(>F)"]][1])
pvalues=sapply(2:6, function(x) data %>% filter(Count==x) %$% aov(MRM/RM~IndexGroup,.)%>% summary() %$% .[[1]][["Pr(>F)"]][1])
pvalues
pvalues=sapply(2:8, function(x) data %>% filter(Count==x) %$% aov(MRM/RM~IndexGroup,.)%>% summary() %$% .[[1]][["Pr(>F)"]][1])
pvalues=sapply(2:10, function(x) data %>% filter(Count==x) %$% aov(MRM/RM~IndexGroup,.)%>% summary() %$% .[[1]][["Pr(>F)"]][1])
pvalues
names(pvalues)=paste(2:10,"repeats")
pvalues
#есть ли разница в проценте в зависимости от чего-то
cat("p-значения для телосложений\n")
pvalues=sapply(2:10, function(x) data %>% filter(Count==x) %$% aov(MRM/RM~BodyType,.)%>% summary() %$% .[[1]][["Pr(>F)"]][1])
names(pvalues)=names(cors)
pvalues
cat("p-значения для типа движения\n")
pvalues=sapply(2:6, function(x) data %>% filter(Count==x) %$% aov(MRM/RM~Action,.)%>% summary() %$% .[[1]][["Pr(>F)"]][1])
names(pvalues)=paste(2:6,"repeats")
pvalues
cat("p-значения для групп по индексу массы\n")
pvalues=sapply(2:10, function(x) data %>% filter(Count==x) %$% aov(MRM/RM~IndexGroup,.)%>% summary() %$% .[[1]][["Pr(>F)"]][1])
names(pvalues)=paste(2:10,"repeats")
pvalues
4%%3
#Загрузка данных####
library(tidyverse)
library(magrittr)
library(ggformula)
library(ggthemes)
library(tidyquant)
library(ggvis)
library(plotrix)
library(car)
#library(DAAG)
library(leaps)
library(plotly)
data=read_tsv("data(rus).tsv",
skip=1,col_names = F,na="",
col_types = "fddnfffnnnff",
comment="#"
) %>% tbl_df()
colnames(data)=c("Date","RM","MRM","Count","Action","Sex","Experience","Age","Weight","Height","BodyType","Mail")
data %<>%#filter(Count<=20) %>%
arrange(MRM,Count,Weight) %>%  mutate(
CountGroup=cut(Count,breaks = c(1,3,6,10,20,40)),
AgeGroup=cut(Age,breaks = c(1,19,27,35,70)),
Experience=factor(Experience,levels = c("До двух лет","2-3 года","4-5 лет","6-10 лет","11-15 лет" ,"больше 15 лет"),ordered = T),
Index=Weight/(0.01*Height)^2,
IndexGroup=cut(Index,breaks = c(0,16,18.5,24.99,30,35,40,60))
)%>% select(-Date)#,-Mail) %>% filter(Count>1,MRM<RM)
levels(data$CountGroup)=c("2-3","4-6","7-10","11-20",">20")
levels(data$AgeGroup)=c("<20","20-27","28-35",">35")
levels(data$IndexGroup)=c("выраженный дефицит","дефицит","норма","избыток","ожирение1","ожирение2","ожирение3")
ex=data$Experience %>% as.numeric()
ex[ex==6]=5
ex %<>%factor()
levels(ex)=c("До двух лет","2-3 года","4-5 лет","6-10 лет","больше 10 лет")
data %<>%mutate(Experience=factor(ex,ordered = T))
allrows=1:nrow(data)
maxerror=2
#уникальные записи (где один от каждого человека берётся только одна запись)
#объяснить, по каким признакам людей считать одинаковыми
data.unique=data %>% select(AgeGroup,Height,BodyType,Experience,Sex,IndexGroup) %>% unique()
#функции
getparam=function(vec){
ln=length(levels(vec))
x=numeric(ln)
ns=character(ln)
for(i in seq(ln)){
x[i]=sum(vec==levels(vec)[i])/length(vec)
ns[i]=paste0(levels(vec)[i]," (",round(x[i]*100,2),"%)")
}
return(list(x=x,ns=ns))
}
getPIE=function(vec,main=""){
lst=getparam(vec)
pie(x=lst$x,labels=lst$ns,main=main)
}
getFan=function(vec,main=""){
pr=getparam(vec)
fan.plot(pr$x,labels=pr$ns,main=main)
}
GGally::ggcorr(data,label=T,label_round = 2)
data %$% cor(RM,MRM*Count)
GGally::ggcorr(data %>% mutate(MRMdotCount=MRM*Count),label=T,label_round = 2)
data %>% ggplot(aes(x=MRM,y=RM))+geom_RMooth()+geom_point(aes(col=CountGroup),size=3)+theme_bw()
data %>% ggplot(aes(x=MRM,y=RM))+geom_sMooth()+geom_point(aes(col=CountGroup),size=3)+theme_bw()
data %>% ggplot(aes(x=MRM,y=RM))+geom_smooth()+geom_point(aes(col=CountGroup),size=3)+theme_bw()
data %>% ggplot(aes(x=MRM,y=RM))+geom_smooth()+
geom_point(aes(col=CountGroup),size=3)+theme_bw()+
facet_grid(vars(CountGroup))+
labs(x="Многоповторный максимум",y="Повторный максимум")
data %>% ggplot(aes(x=MRM,y=RM))+geom_smooth()+
geom_point(aes(col=CountGroup),size=3)+theme_bw()+
#facet_grid(vars(CountGroup))+
labs(x="Многоповторный максимум",y="Повторный максимум")
data %>% ggplot(aes(x=MRM,y=RM))+geom_smooth()+
geom_point(aes(col=CountGroup),size=3)+theme_bw()+
#facet_grid(vars(CountGroup))+
labs(x="Многоповторный максимум",y="Повторный максимум",
col="Диапазон повторений",
title = "Зависимость повторного максимума от многоповторного")
plt=data %>% ggplot(aes(x=MRM,y=RM))+geom_smooth()+
geom_point(aes(col=CountGroup),size=3)+theme_bw()+
#facet_grid(vars(CountGroup))+
labs(x="Многоповторный максимум",y="Повторный максимум",
col="Диапазон повторений",
title = "Зависимость повторного максимума от многоповторного")
plt+theme(legend.position = c(0.8,0.2))
plt+facet_grid(vars(CountGroup))
byCountGroup=ggplot(data,aes(y=RM/MRM,col=Sex))+facet_wrap(~CountGroup)+theme_bw()
byCountGroup+geom_point(aes(x=Age))
byCountGroup=ggplot(data,aes(y=RM/MRM,col=BodyType))+facet_grid(vars(CountGroup))+theme_bw()
byCountGroup+geom_point(aes(x=Age))
byCountGroup+geom_point(aes(x=Weight))
byCountGroup=ggplot(data,aes(y=(RM/MRM-1)/Count,col=BodyType))+facet_grid(vars(CountGroup))+theme_bw()
byCountGroup+geom_point(aes(x=Age))
ggplot(data,aes(x=Experience,y=RM/MRM))+geom_boxplot()+facet_wrap(~CountGroup)+theme_bw()
ggplot(data,aes(x=Experience,y=RM/MRM))+geom_boxplot()+facet_grid(vars(CountGroup))+theme_bw()
#есть ли значимые различия в разных возрастных группах для фиксированного диапазона
aov(RM/MRM~Experience,data %>% filter(CountGroup=="2-3")) %>% summary()
#есть ли значимые различия в разных возрастных группах для фиксированного диапазона
aov(RM/MRM~Experience,data %>% filter(CountGroup=="2-3")) %>% summary()%$% .[[1]][["Pr(>F)"]][1]
#есть ли значимые различия в разных возрастных группах для фиксированного диапазона
pvalues=data %>% group_by(CountGroup) %>% summarise(pval=aov(RM/MRM~Experience,data  %>% summary()%$% .[[1]][["Pr(>F)"]][1])
#есть ли значимые различия в разных возрастных группах для фиксированного диапазона
pvalues=data %>% group_by(CountGroup) %>% summarise(pval=aov(RM/MRM~Experience,data  %>% summary()%$% .[[1]][["Pr(>F)"]][1]))
aov(RM/MRM~Experience,data %>% filter(CountGroup=="2-3")) %>% summary()%$% .[[1]][["Pr(>F)"]][1]
#есть ли значимые различия в разных возрастных группах для фиксированного диапазона
pvalues=data %>% group_by(CountGroup) %>% summarise(pval=aov(RM/MRM~Experience,data  %>% summary()%$% .[[1]][["Pr(>F)"]][1]))
#есть ли значимые различия в разных возрастных группах для фиксированного диапазона
pvalues=sapply(levels(data$CountGroup),function(x) aov(RM/MRM~Experience,data  %>% summary()%$% .[[1]][["Pr(>F)"]][1]))
#есть ли значимые различия в разных возрастных группах для фиксированного диапазона
pvalues=sapply(levels(data$CountGroup),function(x) aov(RM/MRM~Experience,data %>% filter(CountGroup==x)  %>% summary()%$% .[[1]][["Pr(>F)"]][1]))
levels(data$CountGroup)
#есть ли значимые различия в разных возрастных группах для фиксированного диапазона
pvalues=sapply(levels(data$CountGroup)[1:4],function(x) aov(RM/MRM~Experience,data %>% filter(CountGroup==x)  %>% summary()%$% .[[1]][["Pr(>F)"]][1]))
#есть ли значимые различия в разных возрастных группах для фиксированного диапазона
pvalues=sapply(levels(data$CountGroup)[1:4],function(x) aov(RM/MRM~Experience,data %>% filter(CountGroup==x))%>% summary()%$% .[[1]][["Pr(>F)"]][1])
#есть ли значимые различия в разных возрастных группах для фиксированного диапазона
pvalues=sapply(levels(data$CountGroup),function(x) aov(RM/MRM~Experience,data %>% filter(CountGroup==x))%>% summary()%$% .[[1]][["Pr(>F)"]][1])
pvalues
aov(cor(RM,MRM)~Experience,data %>% filter(CountGroup=="2-3")) %>% summary()%$% .[[1]][["Pr(>F)"]][1]
aov(cor(RM,MRM)~Experience,data %>% filter(CountGroup=="2-3"))
cat('p-значения в зависимости от возрастной группы: \n')
(sapply(levels(data$CountGroup),function(x) aov(RM/MRM~AgeGroup,data %>% filter(CountGroup==x))%>% summary()%$% .[[1]][["Pr(>F)"]][1]))
(sapply(levels(data$CountGroup),function(x) aov(RM/MRM~IndexGroup,data %>% filter(CountGroup==x))%>% summary()%$% .[[1]][["Pr(>F)"]][1]))
ggplot(data,aes(x=AgeGroup,y=RM/MRM))+geom_boxplot()+
facet_grid(vars(CountGroup))+theme_bw()+
labs(x="Опыт тренировок")
ggplot(data,aes(x=IndexGroup,y=RM/MRM))+geom_boxplot()+
facet_grid(vars(CountGroup))+theme_bw()+
labs(x="Возраст")
obj=ggplot(data %>% select(-Count))+theme_bw()
obj+geom_bar(aes(x=CountGroup))
obj+geom_bar(aes(x=BodyType))
obj+geom_point(aes(x=Weight,y=Height,col=BodyType,shape=Experience),size=5)
(sapply(levels(data$CountGroup),function(x) aov(RM/MRM~BodyType,data %>% filter(CountGroup==x))%>% summary()%$% .[[1]][["Pr(>F)"]][1]))
(sapply(levels(data$CountGroup),function(x) aov(RM/MRM~Action,data %>% filter(CountGroup==x))%>% summary()%$% .[[1]][["Pr(>F)"]][1]))
ggplot(data,aes(x=Action,y=RM/MRM))+geom_boxplot()+
facet_grid(vars(CountGroup))+theme_bw()+
labs(x="Движение")
ggplot(data %>% filter(Count<=20),aes(x=Action,y=RM/MRM))+geom_boxplot()+
facet_grid(vars(CountGroup))+theme_bw()+
labs(x="Движение")
obj+geom_boxplot(aes(x=Action,y=RM))
obj+geom_point(aes(x=Weight,y=Height,col=BodyType,shape=Experience),size=5)
obj+geom_point(aes(x=Weight,y=Height,col=BodyType,shape=Experience),size=5)+facet_grid(vars(Action))
obj+geom_point(aes(x=Weight,y=Height,col=BodyType,shape=Experience),size=5)+facet_grid(vars(Action,BodyType))
obj+geom_point(aes(x=Weight,y=Height,col=BodyType,shape=Experience),size=5)+facet_grid(vars(Action),vars(BodyType))
bx=obj+geom_boxplot(aes(x=CountGroup,y=RM/MRM))+
labs(title = "Отношение повторного максимума к многоповторному в зависимости от числа повторений",
x="Диапазон повторений",y="Отношение повторного максимума к многоповторному",
caption = "Каждый диапазон повторений действует по своим законам \n и нуждается в собственной версии модели")+
theme_tq()
bx+facet_grid(~BodyType)+theme_bw()+labs(caption="caption")
bx+facet_grid(~Sex)+theme_bw()+labs(caption="caption")
bx+facet_grid(~Action)+theme_bw()+labs(caption="caption")
#Загрузка данных####
library(tidyverse)
library(magrittr)
library(ggformula)
library(ggthemes)
library(tidyquant)
library(ggvis)
library(plotrix)
library(car)
#library(DAAG)
library(leaps)
library(plotly)
data=read_tsv("data(rus).tsv",
skip=1,col_names = F,na="",
col_types = "fddnfffnnnff",
comment="#"
) %>% tbl_df()
colnames(data)=c("Date","RM","MRM","Count","Action","Sex","Experience","Age","Weight","Height","BodyType","Mail")
data %<>%#filter(Count<=20) %>%
arrange(MRM,Count,Weight) %>%  mutate(
CountGroup=cut(Count,breaks = c(1,3,6,10,20,40)),
AgeGroup=cut(Age,breaks = c(1,19,27,35,70)),
Experience=factor(Experience,levels = c("До двух лет","2-3 года","4-5 лет","6-10 лет","11-15 лет" ,"больше 15 лет"),ordered = T),
Index=Weight/(0.01*Height)^2,
IndexGroup=cut(Index,breaks = c(0,16,18.5,24.99,30,35,40,60))
)%>% select(-Date)#,-Mail) %>% filter(Count>1,MRM<RM)
levels(data$CountGroup)=c("2-3","4-6","7-10","11-20",">20")
levels(data$AgeGroup)=c("<20","20-27","28-35",">35")
levels(data$IndexGroup)=c("выраженный дефицит","дефицит","норма","избыток","ожирение1","ожирение2","ожирение3")
ex=data$Experience %>% as.numeric()
ex[ex==6]=5
ex %<>%factor()
levels(ex)=c("До двух лет","2-3 года","4-5 лет","6-10 лет","больше 10 лет")
data %<>%mutate(Experience=factor(ex,ordered = T))
allrows=1:nrow(data)
maxerror=2
#уникальные записи (где один от каждого человека берётся только одна запись)
#объяснить, по каким признакам людей считать одинаковыми
data.unique=data %>% select(AgeGroup,Height,BodyType,Experience,Sex,IndexGroup) %>% unique()
#функции
getparam=function(vec){
ln=length(levels(vec))
x=numeric(ln)
ns=character(ln)
for(i in seq(ln)){
x[i]=sum(vec==levels(vec)[i])/length(vec)
ns[i]=paste0(levels(vec)[i]," (",round(x[i]*100,2),"%)")
}
return(list(x=x,ns=ns))
}
getPIE=function(vec,main=""){
lst=getparam(vec)
pie(x=lst$x,labels=lst$ns,main=main)
}
getFan=function(vec,main=""){
pr=getparam(vec)
fan.plot(pr$x,labels=pr$ns,main=main)
}
obj=ggplot(data %>% select(-Count))+theme_bw()
bx=obj+geom_boxplot(aes(x=CountGroup,y=RM/MRM))+
labs(title = "Отношение повторного максимума к многоповторному в зависимости от числа повторений",
x="Диапазон повторений",y="Отношение повторного максимума к многоповторному",
caption = "Каждый диапазон повторений действует по своим законам \n и нуждается в собственной версии модели")+
theme_tq()
bx+facet_grid(~BodyType)+theme_bw()+labs(caption="caption")
bx+facet_grid(~BodyType)+theme_bw()+labs(caption="Для числа повторений до 10 тип телосложения не имеет значения")
#bx+facet_grid(~Sex)+theme_bw()+labs(caption="caption")
bx+facet_grid(~Action)+theme_bw()+labs(caption="caption")
bx=ggplot(data)+geom_boxplot(aes(x=CountGroup,y=RM/MRM))+
labs(title = "Отношение повторного максимума к многоповторному в зависимости от числа повторений",
x="Диапазон повторений",y="Отношение повторного максимума к многоповторному",
caption = "Каждый диапазон повторений действует по своим законам \n и нуждается в собственной версии модели")+
theme_tq()
bx
#bx+facet_grid(~Sex)+theme_bw()+labs(caption="caption")
bx+facet_grid(~Action)+theme_bw()+labs(caption="caption")
#bx+facet_grid(~Sex)+theme_bw()+labs(caption="caption")
bx+facet_grid(~Action)+theme_bw()+labs(caption="Присед имеет хорошую выносливость на большом числе повдторений, жим -- на маленьком",
subtitle = "Чем отношение ниже, тем более 'выносливы' мышцы в том или ином диапазоне")
bx+facet_grid(~BodyType)+theme_bw()+labs(caption="Для числа повторений до 10 тип телосложения не имеет значения")
bx+facet_grid(~BodyType)+theme_bw()+labs(caption="Для числа повторений до 10 тип телосложения не имеет значения. На высоком числе повторений эндоморфы менее выносливы")
#по этому графику видно, что повторения делятся на линейные группы, то есть в пределах группы они дают одинаковый прирост
plot(seq(-10,10,length.out=50) %>% map_dbl(function(x)1/(1+exp(-x))) )
data %<>%filter(Count<=20)
plt=ggplot(data)+theme_bw()
plt+geom_density(aes(x=RM))
plt+geom_density(aes(x=RM))+geom_histogram(aes(x=RM),breaks=10)
plt+geom_density(aes(x=RM))+geom_histogram(aes(x=RM),bins=10)
plt+geom_density(aes(x=RM))
plt+geom_density(aes(x=RM))+geom_density(aes(x=MRM))
plt+geom_density(aes(x=RM),fill="green")+geom_density(aes(x=MRM))
plt+geom_density(aes(x=RM),fill="green")+geom_density(aes(x=MRM,fill="blue",alpha=0.5))
plt+geom_density(aes(x=RM),fill="green")+geom_density(aes(x=MRM,fill="red",alpha=0.5))
plt+geom_density(aes(x=RM),fill="green")+geom_density(aes(x=MRM,fill="red",alpha=0.5))+
labs(fill="")
plt+geom_density(aes(x=RM),fill="green")+geom_density(aes(x=MRM,fill="red",alpha=0.5))+
labs(x="RM (зелёное), MRM (красное)",y="ядерная плотность",title = 'Плотность распределения повторного максимума и многоповторного максимума')+
theme(legend.position = 'none')
data %>% summary()
plt+geom_bar(aes(x=factor(Count)))
plt+geom_bar(aes(x=CountGroup,col=BodyType))+coord_flip()
plt+geom_bar(aes(x=CountGroup,fill=BodyType))+coord_flip2()
plt+geom_bar(aes(x=CountGroup,fill=BodyType),position=position_dodge2())
plt+geom_bar(aes(x=CountGroup,fill=BodyType),position=position_dodge2())+theme(legend.position = c(.9,.9))+
labs(x="Диапазон повторений",y="Количество", title = "Количество наблюдений в каждом диапазоне повторений")
plt+geom_bar(aes(x=CountGroup,fill=BodyType),position=position_dodge2())+theme(legend.position = c(.9,.9))+
labs(x="Диапазон повторений",y="Количество", title = "Количество наблюдений в каждом диапазоне повторений",fill="Телосложение")
plt+geom_bar(aes(x=CountGroup,fill=BodyType),position=position_dodge2())+theme(legend.position = c(.85,.9))+
labs(x="Диапазон повторений",y="Количество", title = "Количество наблюдений в каждом диапазоне повторений",fill="Телосложение")
plt+geom_bar(aes(x=IndexGroup,fill=BodyType),position=position_dodge2())+theme(legend.position = c(.85,.9))+
labs(x="Диапазон повторений",y="Количество", title = "Количество наблюдений в каждом диапазоне повторений",fill="Телосложение")
plt+geom_bar(aes(x=AgeGroup,fill=BodyType),position=position_dodge2())+theme(legend.position = c(.85,.9))+
labs(x="Категория по индексу массы тела",y="Количество", title = "Количество наблюдений в каждой категории по индексу массы тела",fill="Телосложение")
plt+geom_bar(aes(x=Action,fill=BodyType),position=position_dodge2())+theme(legend.position = c(.85,.9))+
labs(x="Категория по возрасту",y="Количество", title = "Количество наблюдений в каждой категории по возрасту",fill="Телосложение")
plt+geom_bar(aes(x=Action,fill=BodyType),position=position_dodge2())+theme(legend.position = c(.85,.9))+
labs(x="Движение",y="Количество", title = "Количество наблюдений в каждом движении",fill="Телосложение")
plt+geom_density(aes(x=Age),fill="green")+geom_density(aes(x=Index,fill="red",alpha=0.5))+
labs(x="RM (зелёное), MRM (красное)",y="ядерная плотность",title = 'Плотность распределения повторного максимума и многоповторного максимума')+
theme(legend.position = 'none')
plt+geom_point(aes(x=Weight,y=Height,col=Experience))
plt+geom_point(aes(x=Weight,y=Height,col=Experience),size=2)
plt+geom_point(aes(x=Weight,y=Height,col=Experience),size=2)+facet_grid(vars(Action),vars(BodyType))
plt+geom_point(aes(x=Weight,y=Height,col=AgeGroup,shape=Sex),size=2)+facet_grid(vars(Action),vars(BodyType))
plt+geom_point(aes(x=Weight,y=Height,col=AgeGroup,shape=Sex),size=2.5)+
facet_grid(vars(Action),vars(BodyType))+
labs(x="Вес",y="Рост",shape="Пол",col="Возраст",title = "Зависимость между ростом и весом")
[sapply(data,is.numeric)
sapply(data,is.numeric)
sapply(data[sapply(data,is.numeric)], function(x)shapiro.test(x)$p.value)
density(data$Height)
hist(data$Height)
sapply(data.unique[sapply(data,is.numeric)] %>% filter(Count<=20), function(x)shapiro.test(x)$p.value)
sapply(data.unique[sapply(data.unique,is.numeric)] %>% filter(Count<=20), function(x)shapiro.test(x)$p.value)
data.unique
sapply(data[sapply(data,is.numeric)], function(x)shapiro.test(x)$p.value)
data$Height
data$Height %>% factor() %>% summary()
install.packages("nortest")
library(nortest)
p=data$MRM
ad.test(p)
p %>% cvm.test()
p %>% lillie.test()
p %>% pearson.test()
p %>% sf.test()
qqplot(p)
qqnorm(p)
data$Height %>% qqnorm()
