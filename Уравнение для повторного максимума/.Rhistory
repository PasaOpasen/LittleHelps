boot::cv.glm(data %>% filter(Count<11),glm(formula = model$call$formula,data=data %>% filter(Count<11)),K=10)$delta[1],"\n")
cat("Оценка кросс-валидации для не более чем 6 повторений",
boot::cv.glm(data %>% filter(Count<7),glm(formula = model$call$formula,data=data %>% filter(Count<7)),K=10)$delta[1],"\n")
}
ResAn=function(res){
p=ggplot(data %>% mutate(res=res),aes(x=CountGroup,y=res))+
geom_boxplot()+labs(x="Группа повторений",y="Остатки (цель - предсказание)",title="Распределения остатков в зависимости от группы повторений")+theme_bw()
print(p)
(p+facet_grid(vars(Action))) %>% print()
(p+facet_grid(vars(BodyType),vars(Action)))%>% print()
return(0)
}
#из этого графика можно сделать вывод, что модель неплохо работает на диапазоне 2-3, но на диапазоне 13-20 ошибка какая-то сильно отличающаяся от тенденции уменьшения ошибок, так что этот диапазон надо бы и вообще убрать, так как там уже играют роль свойства красных волокон, не говорящие о силе
ResAn(data$RM-data$MRM*(1+0.0333*data$Count))
ResVal=function(vals)ResAn(data$RM-vals)
#ResGraf=function(model)ResVal(predict(model,data))
mysummary=function(mdl){
cat("-----> ОБЩАЯ ИНФОРМАЦИЯ О МОДЕЛИ:\n");cat("\n")
gvlma::gvlma(mdl) %>% summary();cat("\n")
cat("-----> БАЗОВЫЕ ГРАФИКИ:\n");cat("\n")
par(mfrow=c(2,2))
plot(mdl)
par(mfrow=c(1,1)) ;cat("\n")
cat("-----> ТЕСТ НА НОРМАЛЬНОСТЬ РАСПРЕДЕЛЕНИЯ ОСТАТКОВ\n");cat("\n")
shapiro.test(mdl$residuals) %>% print();cat("\n")
qqPlot(mdl,main="Q-Q plot")
cat("-----> ФАКТОР ИНФЛЯЦИИ ДИСПЕРСИЙ:\n");cat("\n")
vif(mdl)%>% print();cat("\n")
cat("-----> ТЕСТ НА АВТОКОРРЕЛЯЦИЮ:\n");cat("\n")
durbinWatsonTest(mdl) %>% print();cat("\n")   #тест на автокорреляцию
# cat("-----> ТЕСТ НА ОДНОРОДНОСТЬ ДИСПЕРСИИ:\n");cat("\n")
# ncvTest(mdl)%>% print();cat("\n")    #однородность дисперсии
cat("-----> ТЕСТ НА ВЫБРОСЫ И ВЛИЯТЕЛЬНЫЕ НАБЛЮДЕНИЯ:\n");cat("\n")
outs=outlierTest(mdl)
outs%>% print()
influ=influencePlot(mdl,main="Диаграмма влияния",sub="Размеры кругов пропорциональны расстояниям Кука")
influ %>% print()
cat("-----> ВЫБРОСЫ И ВЛИЯТЕЛЬНЫЕ НАБЛЮДЕНИЯ:\n");cat("\n")
data[c(outs$p %>% names(),influ %>% rownames()) %>% as.numeric(),] %>% unique() %>%
select(-Mail) %>% arrange(-RM,-Count) %>% print();cat("\n")
}
all=function(modelka){
modelka %>% ShowErrors()
modelka %>% predict(data) %>% ResVal()
modelka %>% mysummary()
}
data %<>% mutate(Body2=ifelse(BodyType=="Эндоморф","Endo","NonEndo") %>% factor(),
Action2=ifelse(Action=="Жим","Up","Down") %>% factor())
lm(RM~MRM:Count:CountGroup+MRM:Action+MRM:Body2-1,data) %>% all()
lm(RM~MRM:Count:CountGroup+MRM:CountGroup-1,data) %>% all()
lm(RM~MRM:Count:CountGroup+MRM:Action-1,data) %>% all()
b4=lm(RM ~ MRM:Action + MRM:I(Count^2) + Action2:I(MRM/Weight) + MRM:Count:CountGroup - 1,data)
b4 %>% all()
b6=lm(RM ~ I((MRM/Index)^6) + MRM:CountGroup + MRM:Action + MRM:CountGroup:Count - 1,data)
b6 %>% all()
data %<>%filter(Count<11)
b4=lm(RM ~ MRM:Action + MRM:I(Count^2) + Action2:I(MRM/Weight) + MRM:Count:CountGroup - 1,data)
b4 %>% all()
b6=lm(RM ~ I((MRM/Index)^6) + MRM:CountGroup + MRM:Action + MRM:CountGroup:Count - 1,data)
b6 %>% all()
stp=b2 %>% step(
direction = "both",
scope = (~.+
I(Count^2):CountGroup:MRM+
MRM:BodyType+
MRM:Body2+
MRM:I(Count^2)+
MRM:Count:BodyType+
MRM:Experience+
MRM:AgeGroup:Experience+
MRM:Count:Experience+
MRM:Count:CountGroup:BodyType+
MRM:CountGroup:BodyType+
MRM:Count:CountGroup:Body2+
MRM:CountGroup:Body2+
I(MRM*Count/Weight):CountGroup+
I(MRM*Weight/(Height-100))+
I((MRM-100)/MRM)+
poly(MRM/Weight,2)+
MRM+
MRM:Count+
MRM:Body2+
MRM:Action2+
MRM:Weight:BodyType+
I((MRM/Index)^2)+
I((MRM/Index)^3)+
I((MRM/Index)^4)+
I((MRM/Index)^5)+
I((MRM/Index)^6)+
I((MRM/Index)^7)+
I((MRM/Index)^8)+
I((MRM/Index)^9)+
I((MRM/Index)^0.5)+
log(MRM/Index)+
I(log(MRM/Index)^2)+
I((MRM/Index)^2):Body2+
I((MRM/Index)^2):Action2+
I((MRM/Weight*((Height-100)/100)^2))
),steps=5000)
stp=b6 %>% step(
direction = "both",
scope = (~.+
I(Count^2):CountGroup:MRM+
MRM:BodyType+
MRM:Body2+
MRM:I(Count^2)+
MRM:Count:BodyType+
MRM:Experience+
MRM:AgeGroup:Experience+
MRM:Count:Experience+
MRM:Count:CountGroup:BodyType+
MRM:CountGroup:BodyType+
MRM:Count:CountGroup:Body2+
MRM:CountGroup:Body2+
I(MRM*Count/Weight):CountGroup+
I(MRM*Weight/(Height-100))+
I((MRM-100)/MRM)+
poly(MRM/Weight,2)+
MRM+
MRM:Count+
MRM:Body2+
MRM:Action2+
MRM:Weight:BodyType+
I((MRM/Index)^2)+
I((MRM/Index)^3)+
I((MRM/Index)^4)+
I((MRM/Index)^5)+
I((MRM/Index)^6)+
I((MRM/Index)^7)+
I((MRM/Index)^8)+
I((MRM/Index)^9)+
I((MRM/Index)^0.5)+
log(MRM/Index)+
I(log(MRM/Index)^2)+
I((MRM/Index)^2):Body2+
I((MRM/Index)^2):Action2+
I((MRM/Weight*((Height-100)/100)^2))
),steps=5000)
b4=lm(RM ~ MRM:Action + MRM:I(Count^2) + Action2:I(MRM/Weight) + MRM:Count:CountGroup - 1,data)
b4 %>% all()
#b5=lm(RM ~ I(MRM/Index) + MRM:CountGroup + MRM:Action + MRM:CountGroup:Count - 1,data)
#b5 %>% all()
b5=lm(RM ~ I((MRM/Index)^6) + MRM:CountGroup + MRM:Action + MRM:CountGroup:Count - 1,data)
b5 %>% all()
b2=lm(RM~MRM:Count:CountGroup+MRM:CountGroup-1,data); b2%>% all()
b3=lm(RM~MRM:Count:CountGroup+MRM:Action-1,data) #%>% all()
b1=lm(RM~MRM+MRM:Count-1,data)
nb=rep(1:5,3)
nb
gr=rep(c('all','2-7','2-3'),3)
gr
gr=rep(c('all','2-7','2-3'),5) %>% sort()
gr
m=matrix(nrow=15,ncol=5)
lst=list(b1,b2,b3,b4,b5)
ct=c(4,8,11)
for(i in 1:5){
model=lst[[i]]
for(j in 1:3){
dt=data %>% filter(Count<ct[j])
getval=function(k){
boot::cv.glm(data %>% dt,
glm(formula = model$call$formula,data=data %>% dt),K=k)$delta[1]
}
beg=(j-1)*5
m[beg,i]= getval(5)
m[beg+1,i]= getval(6)
m[beg+2,i]= getval(8)
m[beg+3,i]= getval(10)
m[beg+4,i]= getval(12)
}
}
for(i in 1:5){
model=lst[[i]]
for(j in 1:3){
dt=data %>% filter(Count<ct[j])
getval=function(k){
boot::cv.glm(data %>% dt,
glm(formula = model$call$formula,data= dt),K=k)$delta[1]
}
beg=(j-1)*5
m[beg,i]= getval(5)
m[beg+1,i]= getval(6)
m[beg+2,i]= getval(8)
m[beg+3,i]= getval(10)
m[beg+4,i]= getval(12)
}
}
for(i in 1:5){
model=lst[[i]]
for(j in 1:3){
dt=data %>% filter(Count<ct[j])
getval=function(k){
boot::cv.glm(dt,
glm(formula = model$call$formula,data= dt),K=k)$delta[1]
}
beg=(j-1)*5
m[beg,i]= getval(5)
m[beg+1,i]= getval(6)
m[beg+2,i]= getval(8)
m[beg+3,i]= getval(10)
m[beg+4,i]= getval(12)
}
}
for(i in 1:5){
model=lst[[i]]
for(j in 1:3){
dt=data %>% filter(Count<ct[j])
getval=function(k){
boot::cv.glm(dt,
glm(formula = model$call$formula,data= dt),K=k)$delta[1]
}
beg=(j-1)*5
m[beg,i]= getval(8)
m[beg+1,i]= getval(8)
m[beg+2,i]= getval(8)
m[beg+3,i]= getval(10)
m[beg+4,i]= getval(12)
}
}
dt=data %>% filter(Count<8)
boot::cv.glm(dt,
glm(formula = model$call$formula,data= dt),K=10)$delta[1]
boot::cv.glm(dt,
+                   glm(formula = model$call$formula,data= dt),K=8)$delta[1]
boot::cv.glm(dt,glm(formula = model$call$formula,data= dt),K=8)$delta[1]
for(i in 1:5){
model=lst[[i]]
for(j in 1:3){
dt=data %>% filter(Count<ct[j])
getval=function(k){
boot::cv.glm(dt,
glm(formula = model$call$formula,data= dt),K=k)$delta[1] %>% return()
}
beg=(j-1)*5
m[beg,i]= getval(8)
m[beg+1,i]= getval(8)
m[beg+2,i]= getval(8)
m[beg+3,i]= getval(10)
m[beg+4,i]= getval(12)
print(m)
}
}
m=matrix(nrow=15,ncol=5)
lst=list(b1,b2,b3,b4,b5)
ct=c(4,8,11)
for(i in 1:5){
model=lst[[i]]
for(j in 1:3){
dt=data %>% filter(Count<ct[j])
getval=function(k){
boot::cv.glm(dt,
glm(formula = model$call$formula,data= dt),K=k)$delta[1] %>% return()
}
beg=(j-1)*5
m[beg+1,i]= getval(8)
m[beg+2,i]= getval(8)
m[beg+3,i]= getval(8)
m[beg+4,i]= getval(10)
m[beg+5,i]= getval(12)
print(m)
}
}
m=matrix(nrow=15,ncol=5)
lst=list(b1,b2,b3,b4,b5)
ct=c(4,8,11)
for(i in 1:5){
model=lst[[i]]
for(j in 1:3){
dt=data %>% filter(Count<ct[j])
getval=function(k){
boot::cv.glm(dt,
glm(formula = model$call$formula,data= dt),K=k)$delta[1] %>% return()
}
beg=(j-1)*5
#m[beg+1,i]= getval(8)
#m[beg+2,i]= getval(8)
#m[beg+3,i]= getval(8)
m[beg+4,i]= getval(10)
m[beg+5,i]= getval(12)
print(m)
}
}
b4=lm(RM ~ MRM:Action + MRM:I(Count^2) + Action2:I(MRM/Weight) + MRM:Count:CountGroup - 1,data)
b5=lm(RM ~ I((MRM/Index)^6) + MRM:CountGroup + MRM:Action + MRM:CountGroup:Count - 1,data)
b2=lm(RM~MRM:Count:CountGroup+MRM:CountGroup-1,data); b2%>% all()
b3=lm(RM~MRM:Count:CountGroup+MRM:Action-1,data) #%>% all()
nb=rep(1:5,3)
gr=rep(c('all','2-7','2-3'),5) %>% sort()
m=matrix(nrow=15,ncol=5)
lst=list(b1,b2,b3,b4,b5)
lst
data %<>%filter(Count<11)
ct=c(4,8,11)
for(i in 1:5){
model=lst[[i]]
for(j in 1:3){
dt=data %>% filter(Count<ct[j])
getval=function(k){
boot::cv.glm(dt,
glm(formula = model$call$formula,data= dt),K=k)$delta[1] %>% return()
}
beg=(j-1)*5
#m[beg+1,i]= getval(8)
#m[beg+2,i]= getval(8)
#m[beg+3,i]= getval(8)
m[beg+4,i]= getval(10)
m[beg+5,i]= getval(12)
print(m)
}
}
for(i in 1:5){
model=lst[[i]]
for(j in 1:3){
getval=function(k){
dt=data %>% filter(Count<ct[j])
boot::cv.glm(dt,
glm(formula = model$call$formula,data= dt),K=k)$delta[1] %>% return()
}
beg=(j-1)*5
m[beg+1,i]= getval(8)
m[beg+2,i]= getval(8)
m[beg+3,i]= getval(8)
m[beg+4,i]= getval(10)
m[beg+5,i]= getval(12)
print(m)
}
}
m=matrix(nrow=15,ncol=5)
lst=list(b1,b1,b3,b4,b5)
ct=c(4,8,11)
for(i in 1:5){
model=lst[[i]]
for(j in 1:3){
getval=function(k){
dt=data %>% filter(Count<ct[j])
boot::cv.glm(dt,
glm(formula = model$call$formula,data= dt),K=k)$delta[1] %>% return()
}
beg=(j-1)*5
m[beg+1,i]= getval(8)
m[beg+2,i]= getval(8)
m[beg+3,i]= getval(8)
m[beg+4,i]= getval(10)
m[beg+5,i]= getval(12)
print(m)
}
}
model=b2
dt=data
boot::cv.glm(dt,
glm(formula = model$call$formula,data= dt),K=k)$delta[1]
boot::cv.glm(dt,
glm(formula = model$call$formula,data= dt),K=8)$delta[1]
for(i in 1:5){
model=lst[[i]]
for(j in 1:3){
dt=data %>% filter(Count<ct[j])
gl=glm(formula = model$call$formula,data= dt)
getval=function(k){
boot::cv.glm(dt, gl,K=k)$delta[1] %>% return()
}
beg=(j-1)*5
m[beg+1,i]= getval(8)
m[beg+2,i]= getval(8)
m[beg+3,i]= getval(8)
m[beg+4,i]= getval(10)
m[beg+5,i]= getval(12)
print(m)
}
}
m=matrix(nrow=15,ncol=5)
lst=list(b1,b2,b3,b4,b5)
ct=c(4,8,11)
for(i in 1:5){
model=lst[[i]]
for(j in 1:3){
dt=data %>% filter(Count<ct[j])
gl=glm(formula = model$call$formula,data= dt)
getval=function(k){
boot::cv.glm(dt, gl,K=k)$delta[1] %>% return()
}
beg=(j-1)*5
m[beg+1,i]= getval(8)
m[beg+2,i]= getval(8)
m[beg+3,i]= getval(8)
m[beg+4,i]= getval(10)
m[beg+5,i]= getval(12)
print(m)
}
}
gl=glm(formula = lst[[2]]$call$formula,data= dt)
gl=glm(formula = b2$call$formula,data= dt)
dt=data
gl=glm(formula = b2$call$formula,data= dt)
dt=data %>% filter(Count<3)
gl=glm(formula = b2$call$formula,data= dt)
nb=rep(1:5,2)
gr=rep(c('2-10','2-7'),5) %>% sort()
m=matrix(nrow=10,ncol=5)
lst=list(b1,b2,b3,b4,b5)
ct=c(8,11)
for(i in 1:2){
model=lst[[i]]
for(j in 1:3){
dt=data %>% filter(Count<ct[j])
gl=glm(formula = model$call$formula,data= dt)
getval=function(k){
boot::cv.glm(dt, gl,K=k)$delta[1] %>% return()
}
beg=(j-1)*5
m[beg+1,i]= getval(8)
m[beg+2,i]= getval(8)
m[beg+3,i]= getval(8)
m[beg+4,i]= getval(10)
m[beg+5,i]= getval(12)
print(m)
}
}
ct=c(8,11)
for(i in 1:5){
model=lst[[i]]
for(j in 1:2){
dt=data %>% filter(Count<ct[j])
gl=glm(formula = model$call$formula,data= dt)
getval=function(k){
boot::cv.glm(dt, gl,K=k)$delta[1] %>% return()
}
beg=(j-1)*5
m[beg+1,i]= getval(5)
m[beg+2,i]= getval(6)
m[beg+3,i]= getval(8)
m[beg+4,i]= getval(10)
m[beg+5,i]= getval(12)
print(m)
}
}
colnames(m)=paste('b',1:5)
kp=rep(kn,2)
kn=c(5,6,8,10,12)
kp=rep(kn,2)
vals=data.frame(kp=kp,m,) %>% tbl_df()
vals=data.frame(kp=kp,m,gr=gr) %>% tbl_df()
View(vals)
colnames(m)=paste('b',1:5 %>% as.character())
colnames(m)
colnames(m)=paste0('b',1:5)
kp=rep(kn,2)
vals=data.frame(kp=kp,m,gr=gr) %>% tbl_df()
ggplot(vals,aes(x=kp))+theme_bw()+
geom_point(aes(y=b1))
vals=data.frame(kp=kp,m,gr=factor(gr)) %>% tbl_df()
ggplot(vals,aes(x=kp))+theme_bw()+facet_grid(vars(gr))
geom_point(aes(y=b1))
vals=data.frame(kp=kp,m,gr=factor(gr)) %>% tbl_df()
ggplot(vals,aes(x=kp))+theme_bw()+facet_grid(vars(gr))+
geom_point(aes(y=b1))
ggplot(vals,aes(x=kp))+theme_bw()+facet_grid(vars(gr))+
geom_point(aes(y=b1))+geom_spline(aes(y=b1))
ggplot(vals,aes(x=kp))+theme_bw()+facet_grid(vars(gr))+
geom_point(aes(y=b1),size=3)+geom_line(aes(y=b1))
as.numeric(m)
m
vals=data.frame(kp=rep(kp,5),
b=as.numeric(m),
gr=factor(rep(gr,5)),
n=factor(rep(colnames(m),5))) %>%
tbl_df()
ggplot(vals,aes(x=kp))+theme_bw()+facet_grid(vars(gr))+
geom_point(aes(y=b),size=3)+geom_line(aes(y=b))
ggplot(vals,aes(x=kp,y=b,col=n))+theme_bw()+facet_grid(vars(gr))+
geom_point(size=3)+geom_line()
View(vals)
vals=data.frame(kp=rep(kp,5),
b=as.numeric(m),
gr=factor(rep(gr,5)),
n=factor(rep(colnames(m),5) %>% sort())) %>%
tbl_df()
ggplot(vals,aes(x=kp,y=b,col=n))+theme_bw()+facet_grid(vars(gr))+
geom_point(size=3)+geom_line()
View(m)
gr
#nb=rep(1:5,2)
gr=rep(c('2-10','2-7'),5) %>% sort() %>% reverse()
#nb=rep(1:5,2)
gr=rep(c('2-10','2-7'),5) %>% sort(decreasing = T)
vals=data.frame(kp=rep(kp,5),
b=as.numeric(m),
gr=factor(rep(gr,5)),
n=factor(rep(colnames(m),5) %>% sort())) %>%
tbl_df()
ggplot(vals,aes(x=kp,y=b,col=n))+theme_bw()+facet_grid(vars(gr))+
geom_point(size=3)+geom_line()
View(vals)
vals=data.frame(kp=rep(kp,5),
b=as.numeric(m),
gr=factor(rep(gr,5)),
n=factor(rep(colnames(m),10) %>% sort())) %>%
tbl_df()
ggplot(vals,aes(x=kp,y=b,col=n))+theme_bw()+facet_grid(vars(gr))+
geom_point(size=3)+geom_line()
save("CVvals.rdata",vals)
save(vals,"CVvals.rdata")
save(vals,file="CVvals.rdata")
ggplot(vals,aes(x=kp,y=b,col=n))+theme_bw()+facet_grid(vars(gr))+
geom_point(size=3)+geom_line()
ggplot(vals,aes(x=kp,y=b,col=n))+theme_bw()+facet_grid(vars(gr))+
geom_point(size=4)+geom_line(size=2)
ggplot(vals,aes(x=kp,y=b,col=n))+theme_bw()+facet_grid(vars(gr))+
geom_point(size=4)+geom_line(size=1.3)
ggplot(vals,aes(x=kp,y=b,col=n))+theme_bw()+facet_grid(vars(gr))+
geom_point(size=4)+geom_line(size=1.)
